<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AugmentWebviewStateStore">
    <option name="stateMap">
      <map>
        <entry key="CHAT_STATE" value="eyJjdXJyZW50Q29udmVyc2F0aW9uSWQiOiI3N2JmNGRiNS01OTFjLTRkNjQtYTI3NS03OWZjYWM1YzI3NzciLCJjb252ZXJzYXRpb25zIjp7ImRmOTg4NmZhLTAwZjItNGJiNS1iMWRlLTBiYjA5NzE2MDBhNCI6eyJpZCI6ImRmOTg4NmZhLTAwZjItNGJiNS1iMWRlLTBiYjA5NzE2MDBhNCIsImNyZWF0ZWRBdElzbyI6IjIwMjUtMDUtMTBUMTk6MzE6NDIuMjcwWiIsImxhc3RJbnRlcmFjdGVkQXRJc28iOiIyMDI1LTA1LTEwVDE5OjMxOjQyLjI3MFoiLCJjaGF0SGlzdG9yeSI6W10sImZlZWRiYWNrU3RhdGVzIjp7fSwidG9vbFVzZVN0YXRlcyI6e30sImRyYWZ0RXhjaGFuZ2UiOnsicmVxdWVzdF9tZXNzYWdlIjoiIiwicmljaF90ZXh0X2pzb25fcmVwciI6eyJ0eXBlIjoiZG9jIiwiY29udGVudCI6W3sidHlwZSI6InBhcmFncmFwaCJ9XX0sInN0YXR1cyI6ImRyYWZ0In0sInJlcXVlc3RJZHMiOltdLCJpc1Bpbm5lZCI6ZmFsc2UsImlzU2hhcmVhYmxlIjpmYWxzZSwiZXh0cmFEYXRhIjp7Imhhc0RpcnR5RWRpdHMiOmZhbHNlfSwicGVyc29uYVR5cGUiOjB9LCJjNWY4MzAxNS00OWZjLTRlOTItOGE2NC0yZTJhNjM3MDUwZjgiOnsiaWQiOiJjNWY4MzAxNS00OWZjLTRlOTItOGE2NC0yZTJhNjM3MDUwZjgiLCJjcmVhdGVkQXRJc28iOiIyMDI1LTA1LTEwVDE5OjMxOjQyLjUxOVoiLCJsYXN0SW50ZXJhY3RlZEF0SXNvIjoiMjAyNS0wNS0xMFQxOTo0NjoxMS42MzlaIiwiY2hhdEhpc3RvcnkiOlt7InN0YXR1cyI6ImZhaWxlZCIsInJlcXVlc3RfbWVzc2FnZSI6IkBzcmMvYXBwIEFzIHlvdSBjYW4gc2VlIGluIG91ciBmb2xkZXIgd2UgaGF2ZSB0aGUgcGFnZXMgd2hpY2ggZG9uJ3QgcmVhbGx5IGNvaW5jaWRlIHdpdGggb3VyIGFjdHVhbCBleHBlY3RlZCBwYWdlcyBmb3IgdGhlIFNvZnR3YXJlIEVuZ2luZWVyaW5nIEZpcm0ncyBtYXJrZXRpbmcgc2l0ZS4gU28gd2Ugc2hvdWxkIGhhdmUgdGhlIExhbmRpbmcgUGFnZSwgdGhlIEFib3V0IFVzLCBVc2UgQ2FzZXMsIEluZHVzdHJpZXMsIENhc2UgU3R1ZGllcywgQ29udGFjdCBVcywgU29mdHdhcmUgQ2F0YWxvZ3VlLCBUZWNobm9sb2dpZXMsIENvcmUgVmFsdWVzLCB0ZXJtcyBhbmQgY29uZGl0aW9ucywgcHJpdmFjeSBwb2xpY3ksIGxvZ2luLCBzaWdudXAsIGJsb2ciLCJyaWNoX3RleHRfanNvbl9yZXByIjp7InR5cGUiOiJkb2MiLCJjb250ZW50IjpbeyJ0eXBlIjoicGFyYWdyYXBoIiwiY29udGVudCI6W3sidHlwZSI6Im1lbnRpb24iLCJhdHRycyI6eyJpZCI6Ii9zcmMvYXBwIiwibGFiZWwiOiJhcHAiLCJkYXRhIjp7ImxhYmVsIjoiYXBwIiwibmFtZSI6InNyYy9hcHAiLCJpZCI6Ii9zcmMvYXBwIiwiZm9sZGVyIjp7InJlcG9Sb290IjoiIiwicGF0aE5hbWUiOiJzcmMvYXBwIn0sInR5cGUiOiJpdGVtIn19fSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiBBcyB5b3UgY2FuIHNlZSBpbiBvdXIgZm9sZGVyIHdlIGhhdmUgdGhlIHBhZ2VzIHdoaWNoIGRvbid0IHJlYWxseSBjb2luY2lkZSB3aXRoIG91ciBhY3R1YWwgZXhwZWN0ZWQgcGFnZXMgZm9yIHRoZSBTb2Z0d2FyZSBFbmdpbmVlcmluZyBGaXJtJ3MgbWFya2V0aW5nIHNpdGUuIFNvIHdlIHNob3VsZCBoYXZlIHRoZSBMYW5kaW5nIFBhZ2UsIHRoZSBBYm91dCBVcywgVXNlIENhc2VzLCBJbmR1c3RyaWVzLCBDYXNlIFN0dWRpZXMsIENvbnRhY3QgVXMsIFNvZnR3YXJlIENhdGFsb2d1ZSwgVGVjaG5vbG9naWVzLCBDb3JlIFZhbHVlcywgdGVybXMgYW5kIGNvbmRpdGlvbnMsIHByaXZhY3kgcG9saWN5LCBsb2dpbiwgc2lnbnVwLCBibG9nIn1dfV19LCJtZW50aW9uZWRfaXRlbXMiOlt7ImxhYmVsIjoiYXBwIiwibmFtZSI6InNyYy9hcHAiLCJpZCI6Ii9zcmMvYXBwIiwiZm9sZGVyIjp7InJlcG9Sb290IjoiIiwicGF0aE5hbWUiOiJzcmMvYXBwIn0sInR5cGUiOiJpdGVtIn1dLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W10sInNlZW5fc3RhdGUiOiJ1bnNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjowLCJ0ZXh0X25vZGUiOnsiY29udGVudCI6IkBzcmMvYXBwIEFzIHlvdSBjYW4gc2VlIGluIG91ciBmb2xkZXIgd2UgaGF2ZSB0aGUgcGFnZXMgd2hpY2ggZG9uJ3QgcmVhbGx5IGNvaW5jaWRlIHdpdGggb3VyIGFjdHVhbCBleHBlY3RlZCBwYWdlcyBmb3IgdGhlIFNvZnR3YXJlIEVuZ2luZWVyaW5nIEZpcm0ncyBtYXJrZXRpbmcgc2l0ZS4gU28gd2Ugc2hvdWxkIGhhdmUgdGhlIExhbmRpbmcgUGFnZSwgdGhlIEFib3V0IFVzLCBVc2UgQ2FzZXMsIEluZHVzdHJpZXMsIENhc2UgU3R1ZGllcywgQ29udGFjdCBVcywgU29mdHdhcmUgQ2F0YWxvZ3VlLCBUZWNobm9sb2dpZXMsIENvcmUgVmFsdWVzLCB0ZXJtcyBhbmQgY29uZGl0aW9ucywgcHJpdmFjeSBwb2xpY3ksIGxvZ2luLCBzaWdudXAsIGJsb2cifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvb3ZlL0Rvd25sb2Fkcy90YWlsd2luZC1wbHVzLXN0dWRpby9zdHVkaW8tdHMiLCJmb2xkZXJSb290IjoiL1VzZXJzL292ZS9Eb3dubG9hZHMvdGFpbHdpbmQtcGx1cy1zdHVkaW8vc3R1ZGlvLXRzIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwidGltZXN0YW1wIjoiMjAyNS0wNS0xMFQxOTo0NDo0NC40MjBaIiwicmVzcG9uc2VfdGV4dCI6IiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W3siY2hhcl9zdGFydCI6IjAiLCJjaGFyX2VuZCI6Ijk3IiwiYmxvYl9uYW1lIjoiMTQ1NmY5YWU2YWJkNTE4YzU5OWI0NWVhZjEzMWRkMTYxMDM5NjRiNGRmYmNmMmJjMGJhMTE4MzNhYTRkZjY0YiIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6InNyYy9hcHAvcGFnZS50c3gifX0seyJjaGFyX3N0YXJ0IjoiOTciLCJjaGFyX2VuZCI6Ijg0OSIsImJsb2JfbmFtZSI6IjE0NTZmOWFlNmFiZDUxOGM1OTliNDVlYWYxMzFkZDE2MTAzOTY0YjRkZmJjZjJiYzBiYTExODMzYWE0ZGY2NGIiLCJmaWxlIjp7InJlcG9Sb290IjoiIiwicGF0aE5hbWUiOiJzcmMvYXBwL3BhZ2UudHN4In19LHsiY2hhcl9zdGFydCI6Ijg0OSIsImNoYXJfZW5kIjoiMTU0MyIsImJsb2JfbmFtZSI6IjE0NTZmOWFlNmFiZDUxOGM1OTliNDVlYWYxMzFkZDE2MTAzOTY0YjRkZmJjZjJiYzBiYTExODMzYWE0ZGY2NGIiLCJmaWxlIjp7InJlcG9Sb290IjoiIiwicGF0aE5hbWUiOiJzcmMvYXBwL3BhZ2UudHN4In19LHsiY2hhcl9zdGFydCI6IjU1NTMiLCJjaGFyX2VuZCI6IjY1MTUiLCJibG9iX25hbWUiOiIxNDU2ZjlhZTZhYmQ1MThjNTk5YjQ1ZWFmMTMxZGQxNjEwMzk2NGI0ZGZiY2YyYmMwYmExMTgzM2FhNGRmNjRiIiwiZmlsZSI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoic3JjL2FwcC9wYWdlLnRzeCJ9fSx7ImNoYXJfc3RhcnQiOiI2NTE1IiwiY2hhcl9lbmQiOiI2ODk5IiwiYmxvYl9uYW1lIjoiMTQ1NmY5YWU2YWJkNTE4YzU5OWI0NWVhZjEzMWRkMTYxMDM5NjRiNGRmYmNmMmJjMGJhMTE4MzNhYTRkZjY0YiIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6InNyYy9hcHAvcGFnZS50c3gifX0seyJjaGFyX3N0YXJ0IjoiNzUzMCIsImNoYXJfZW5kIjoiODAwNyIsImJsb2JfbmFtZSI6IjE0NTZmOWFlNmFiZDUxOGM1OTliNDVlYWYxMzFkZDE2MTAzOTY0YjRkZmJjZjJiYzBiYTExODMzYWE0ZGY2NGIiLCJmaWxlIjp7InJlcG9Sb290IjoiIiwicGF0aE5hbWUiOiJzcmMvYXBwL3BhZ2UudHN4In19LHsiY2hhcl9zdGFydCI6IjAiLCJjaGFyX2VuZCI6Ijc4MiIsImJsb2JfbmFtZSI6ImIxZThhZTU3MWVmOGY0Nzk5Nzg5MDRkYTFjMjFlN2E0OGUxYjM5ZDgwMTI2NzkxOGYxZmJhOThjYzhhNzI2NjAiLCJmaWxlIjp7InJlcG9Sb290IjoiIiwicGF0aE5hbWUiOiJzcmMvYXBwL3dvcmsvcGhvYmlhL3BhZ2UubWR4In19LHsiY2hhcl9zdGFydCI6IjEyNTkiLCJjaGFyX2VuZCI6IjE5MzMiLCJibG9iX25hbWUiOiJiMWU4YWU1NzFlZjhmNDc5OTc4OTA0ZGExYzIxZTdhNDhlMWIzOWQ4MDEyNjc5MThmMWZiYTk4Y2M4YTcyNjYwIiwiZmlsZSI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoic3JjL2FwcC93b3JrL3Bob2JpYS9wYWdlLm1keCJ9fSx7ImNoYXJfc3RhcnQiOiIxOTMzIiwiY2hhcl9lbmQiOiIyNjU4IiwiYmxvYl9uYW1lIjoiYjFlOGFlNTcxZWY4ZjQ3OTk3ODkwNGRhMWMyMWU3YTQ4ZTFiMzlkODAxMjY3OTE4ZjFmYmE5OGNjOGE3MjY2MCIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6InNyYy9hcHAvd29yay9waG9iaWEvcGFnZS5tZHgifX0seyJjaGFyX3N0YXJ0IjoiMCIsImNoYXJfZW5kIjoiNTYxIiwiYmxvYl9uYW1lIjoiYTkxMjM4ZDM5MGI0NGRkNmI4YTIwMzgwMTEzODY1NjQxMzk2MTRhNzBmNmM1NGY1MTZjMmRiYTc5N2UzZWFlZiIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6InNyYy9hcHAvYmxvZy9mdXR1cmUtb2Ytd2ViLWRldmVsb3BtZW50L3BhZ2UubWR4In19LHsiY2hhcl9zdGFydCI6IjU2MSIsImNoYXJfZW5kIjoiMTMxNiIsImJsb2JfbmFtZSI6ImE5MTIzOGQzOTBiNDRkZDZiOGEyMDM4MDExMzg2NTY0MTM5NjE0YTcwZjZjNTRmNTE2YzJkYmE3OTdlM2VhZWYiLCJmaWxlIjp7InJlcG9Sb290IjoiIiwicGF0aE5hbWUiOiJzcmMvYXBwL2Jsb2cvZnV0dXJlLW9mLXdlYi1kZXZlbG9wbWVudC9wYWdlLm1keCJ9fSx7ImNoYXJfc3RhcnQiOiIxMzE2IiwiY2hhcl9lbmQiOiIxOTc1IiwiYmxvYl9uYW1lIjoiYTkxMjM4ZDM5MGI0NGRkNmI4YTIwMzgwMTEzODY1NjQxMzk2MTRhNzBmNmM1NGY1MTZjMmRiYTc5N2UzZWFlZiIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6InNyYy9hcHAvYmxvZy9mdXR1cmUtb2Ytd2ViLWRldmVsb3BtZW50L3BhZ2UubWR4In19LHsiY2hhcl9zdGFydCI6IjAiLCJjaGFyX2VuZCI6Ijc3OSIsImJsb2JfbmFtZSI6ImZhMDU5MzM2OWVmZjFjMzUxM2YyY2UxMTEwMjM4NDdhZDY3NWE4ZWNhNDQ1ZWU2MWMyNDFmNDI1NWJmMjYwOTIiLCJmaWxlIjp7InJlcG9Sb290IjoiIiwicGF0aE5hbWUiOiJzcmMvYXBwL3dvcmsvZmFtaWx5LWZ1bmQvcGFnZS5tZHgifX0seyJjaGFyX3N0YXJ0IjoiMTI3MiIsImNoYXJfZW5kIjoiMTk5OSIsImJsb2JfbmFtZSI6ImZhMDU5MzM2OWVmZjFjMzUxM2YyY2UxMTEwMjM4NDdhZDY3NWE4ZWNhNDQ1ZWU2MWMyNDFmNDI1NWJmMjYwOTIiLCJmaWxlIjp7InJlcG9Sb290IjoiIiwicGF0aE5hbWUiOiJzcmMvYXBwL3dvcmsvZmFtaWx5LWZ1bmQvcGFnZS5tZHgifX0seyJjaGFyX3N0YXJ0IjoiMTk5OSIsImNoYXJfZW5kIjoiMjczOSIsImJsb2JfbmFtZSI6ImZhMDU5MzM2OWVmZjFjMzUxM2YyY2UxMTEwMjM4NDdhZDY3NWE4ZWNhNDQ1ZWU2MWMyNDFmNDI1NWJmMjYwOTIiLCJmaWxlIjp7InJlcG9Sb290IjoiIiwicGF0aE5hbWUiOiJzcmMvYXBwL3dvcmsvZmFtaWx5LWZ1bmQvcGFnZS5tZHgifX0seyJjaGFyX3N0YXJ0IjoiODAxIiwiY2hhcl9lbmQiOiIxMjAwIiwiYmxvYl9uYW1lIjoiODc5Y2E2MGNjZjA3NmJjNTdlMWQ3NzI0MDE5N2QwZmNiYWZlZTNjOTJiNGYwZDZjOTRiZjcyYzgxNjE3MjhmNSIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6InNyYy9hcHAvd29yay9wYWdlLnRzeCJ9fSx7ImNoYXJfc3RhcnQiOiIzNDAyIiwiY2hhcl9lbmQiOiI0NDY2IiwiYmxvYl9uYW1lIjoiODc5Y2E2MGNjZjA3NmJjNTdlMWQ3NzI0MDE5N2QwZmNiYWZlZTNjOTJiNGYwZDZjOTRiZjcyYzgxNjE3MjhmNSIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6InNyYy9hcHAvd29yay9wYWdlLnRzeCJ9fSx7ImNoYXJfc3RhcnQiOiI1NTU0IiwiY2hhcl9lbmQiOiI2NDQ3IiwiYmxvYl9uYW1lIjoiODc5Y2E2MGNjZjA3NmJjNTdlMWQ3NzI0MDE5N2QwZmNiYWZlZTNjOTJiNGYwZDZjOTRiZjcyYzgxNjE3MjhmNSIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6InNyYy9hcHAvd29yay9wYWdlLnRzeCJ9fSx7ImNoYXJfc3RhcnQiOiI3NjY4IiwiY2hhcl9lbmQiOiI4NzYzIiwiYmxvYl9uYW1lIjoiNzc3MDI1M2I3ZWZkMmM2YjQ1ZTVmNmVmOWQwNGRhNzZjMjc3OGQ1NTM1M2RlOTA2OGE0ZGZjZmFlOTQzNjEzMCIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6InNyYy9hcHAvY29udGFjdC9wYWdlLnRzeCJ9fSx7ImNoYXJfc3RhcnQiOiI4NzYzIiwiY2hhcl9lbmQiOiI5MzE3IiwiYmxvYl9uYW1lIjoiNzc3MDI1M2I3ZWZkMmM2YjQ1ZTVmNmVmOWQwNGRhNzZjMjc3OGQ1NTM1M2RlOTA2OGE0ZGZjZmFlOTQzNjEzMCIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6InNyYy9hcHAvY29udGFjdC9wYWdlLnRzeCJ9fSx7ImNoYXJfc3RhcnQiOiI4ODQiLCJjaGFyX2VuZCI6IjE2MzkiLCJibG9iX25hbWUiOiIxNTVkYjhkYzA1ZTc4MGVlNTIzZmI1NGZkMzY4NWYzYTk0YTE4NDdhMTkzMjYxYzI0NTVlNWNjNjg4ZTNkMWE2IiwiZmlsZSI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoiQVVHTUVOVF9BR0VOVF9HVUlERUxJTkVTLm1kIn19LHsiY2hhcl9zdGFydCI6IjAiLCJjaGFyX2VuZCI6Ijc2MiIsImJsb2JfbmFtZSI6ImY3OGU0ZmQ1YmZkYjI4OTM5ZTIyNmVjYTdlYzc0MzczMjE1YzBjNDU1YzdhNjdhOGEyNmZlNDQ3YTY5Yzc5YTAiLCJmaWxlIjp7InJlcG9Sb290IjoiIiwicGF0aE5hbWUiOiJzcmMvYXBwL2Jsb2cvcGFnZS50c3gifX0seyJjaGFyX3N0YXJ0IjoiMCIsImNoYXJfZW5kIjoiNjgiLCJibG9iX25hbWUiOiI3MGRmZTk3MmUzOWU1MTExMjhjMTMwNDJjOTk2ZWMxN2JlODgwZTA0MDYzYjJlZmQzYTNkMjYxMjQ2ZDlhOWUxIiwiZmlsZSI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoic3JjL2FwcC9hYm91dC9wYWdlLnRzeCJ9fSx7ImNoYXJfc3RhcnQiOiI4MjUiLCJjaGFyX2VuZCI6IjEzOTAiLCJibG9iX25hbWUiOiI3MGRmZTk3MmUzOWU1MTExMjhjMTMwNDJjOTk2ZWMxN2JlODgwZTA0MDYzYjJlZmQzYTNkMjYxMjQ2ZDlhOWUxIiwiZmlsZSI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoic3JjL2FwcC9hYm91dC9wYWdlLnRzeCJ9fSx7ImNoYXJfc3RhcnQiOiI1MTcyIiwiY2hhcl9lbmQiOiI2MzgyIiwiYmxvYl9uYW1lIjoiNzBkZmU5NzJlMzllNTExMTI4YzEzMDQyYzk5NmVjMTdiZTg4MGUwNDA2M2IyZWZkM2EzZDI2MTI0NmQ5YTllMSIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6InNyYy9hcHAvYWJvdXQvcGFnZS50c3gifX0seyJjaGFyX3N0YXJ0IjoiNjM4MiIsImNoYXJfZW5kIjoiNzI2OCIsImJsb2JfbmFtZSI6IjcwZGZlOTcyZTM5ZTUxMTEyOGMxMzA0MmM5OTZlYzE3YmU4ODBlMDQwNjNiMmVmZDNhM2QyNjEyNDZkOWE5ZTEiLCJmaWxlIjp7InJlcG9Sb290IjoiIiwicGF0aE5hbWUiOiJzcmMvYXBwL2Fib3V0L3BhZ2UudHN4In19LHsiY2hhcl9zdGFydCI6IjcyNjgiLCJjaGFyX2VuZCI6IjgwOTgiLCJibG9iX25hbWUiOiI3MGRmZTk3MmUzOWU1MTExMjhjMTMwNDJjOTk2ZWMxN2JlODgwZTA0MDYzYjJlZmQzYTNkMjYxMjQ2ZDlhOWUxIiwiZmlsZSI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoic3JjL2FwcC9hYm91dC9wYWdlLnRzeCJ9fSx7ImNoYXJfc3RhcnQiOiIwIiwiY2hhcl9lbmQiOiI3NjYiLCJibG9iX25hbWUiOiI5NDJmYjYxMmY0YTA2YzIyOGE1NWVjZTJiYTYwOTlkZmIxMzkzYzJjNTAxY2U5Yjc0ODljMjczNGQzMmYyZjk5IiwiZmlsZSI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoic3JjL2FwcC93b3JrL3Vuc2VhbC9wYWdlLm1keCJ9fSx7ImNoYXJfc3RhcnQiOiIxMjQzIiwiY2hhcl9lbmQiOiIxODI0IiwiYmxvYl9uYW1lIjoiOTQyZmI2MTJmNGEwNmMyMjhhNTVlY2UyYmE2MDk5ZGZiMTM5M2MyYzUwMWNlOWI3NDg5YzI3MzRkMzJmMmY5OSIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6InNyYy9hcHAvd29yay91bnNlYWwvcGFnZS5tZHgifX0seyJjaGFyX3N0YXJ0IjoiMCIsImNoYXJfZW5kIjoiODE1IiwiYmxvYl9uYW1lIjoiYjFlNzQ1ZmZjYmQzMzk2NDRlNDcyMjMyNWNiMGVjYmIzY2E2NTYzM2E2MDRlYmI1NTk4MDQ3YTZhNmMyN2IxNCIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6InNyYy9pbmRleC50c3gifX0seyJjaGFyX3N0YXJ0IjoiODE1IiwiY2hhcl9lbmQiOiIxMjY1IiwiYmxvYl9uYW1lIjoiYjFlNzQ1ZmZjYmQzMzk2NDRlNDcyMjMyNWNiMGVjYmIzY2E2NTYzM2E2MDRlYmI1NTk4MDQ3YTZhNmMyN2IxNCIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6InNyYy9pbmRleC50c3gifX0seyJjaGFyX3N0YXJ0IjoiMCIsImNoYXJfZW5kIjoiMzciLCJibG9iX25hbWUiOiIxYTQxNmE2MWZlOTc3NTk5ZGI2MjhlMWZkNTYyZjViNzRkNTFlOTQ2OWMxNzcyMDVlZTA5NzZhYzQxMjg0ODI0IiwiZmlsZSI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoic3JjL2FwcC9wcm9jZXNzL3BhZ2UudHN4In19LHsiY2hhcl9zdGFydCI6Ijk4ODQiLCJjaGFyX2VuZCI6IjEwNTE5IiwiYmxvYl9uYW1lIjoiMWE0MTZhNjFmZTk3NzU5OWRiNjI4ZTFmZDU2MmY1Yjc0ZDUxZTk0NjljMTc3MjA1ZWUwOTc2YWM0MTI4NDgyNCIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6InNyYy9hcHAvcHJvY2Vzcy9wYWdlLnRzeCJ9fSx7ImNoYXJfc3RhcnQiOiIwIiwiY2hhcl9lbmQiOiI5MjMiLCJibG9iX25hbWUiOiIwYjI5ZWJjZWNlNzE4OTI1NmE3YjI4NTk4OTBlODFjZDMyMzVlZjFlYTg5N2E4MjE2MWNiNTY4MTY2NTU3ZTcwIiwiZmlsZSI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoic3JjL2FwcC9ub3QtZm91bmQudHN4In19LHsiY2hhcl9zdGFydCI6IjAiLCJjaGFyX2VuZCI6IjU1OSIsImJsb2JfbmFtZSI6ImYzYjVmM2JlYmNjZmQzMmNlZDYyZGQ3MDljMGJhM2Y3NzYzYmIzZDdhNDJiZDc2NDEwM2JiMDQ2OGEyNmRiODYiLCJmaWxlIjp7InJlcG9Sb290IjoiIiwicGF0aE5hbWUiOiJzcmMvYXBwL2Jsb2cvYS1zaG9ydC1ndWlkZS10by1jb21wb25lbnQtbmFtaW5nL3BhZ2UubWR4In19LHsiY2hhcl9zdGFydCI6IjU1OSIsImNoYXJfZW5kIjoiMTE1MSIsImJsb2JfbmFtZSI6ImYzYjVmM2JlYmNjZmQzMmNlZDYyZGQ3MDljMGJhM2Y3NzYzYmIzZDdhNDJiZDc2NDEwM2JiMDQ2OGEyNmRiODYiLCJmaWxlIjp7InJlcG9Sb290IjoiIiwicGF0aE5hbWUiOiJzcmMvYXBwL2Jsb2cvYS1zaG9ydC1ndWlkZS10by1jb21wb25lbnQtbmFtaW5nL3BhZ2UubWR4In19LHsiY2hhcl9zdGFydCI6IjExNTEiLCJjaGFyX2VuZCI6IjE3MDAiLCJibG9iX25hbWUiOiJmM2I1ZjNiZWJjY2ZkMzJjZWQ2MmRkNzA5YzBiYTNmNzc2M2JiM2Q3YTQyYmQ3NjQxMDNiYjA0NjhhMjZkYjg2IiwiZmlsZSI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoic3JjL2FwcC9ibG9nL2Etc2hvcnQtZ3VpZGUtdG8tY29tcG9uZW50LW5hbWluZy9wYWdlLm1keCJ9fSx7ImNoYXJfc3RhcnQiOiIxNzAwIiwiY2hhcl9lbmQiOiIxOTYzIiwiYmxvYl9uYW1lIjoiZjNiNWYzYmViY2NmZDMyY2VkNjJkZDcwOWMwYmEzZjc3NjNiYjNkN2E0MmJkNzY0MTAzYmIwNDY4YTI2ZGI4NiIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6InNyYy9hcHAvYmxvZy9hLXNob3J0LWd1aWRlLXRvLWNvbXBvbmVudC1uYW1pbmcvcGFnZS5tZHgifX0seyJjaGFyX3N0YXJ0IjoiMCIsImNoYXJfZW5kIjoiNTczIiwiYmxvYl9uYW1lIjoiNjU3ZTFhMTJiNTU3YzFjZTgzZGUxMzI0OTFkMDk0YTc0Yzk3ZWIwMWE1ODdhOGRiYWQxNDcwYjg2YjM4ZTM5MCIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6InNyYy9hcHAvbGF5b3V0LnRzeCJ9fSx7ImNoYXJfc3RhcnQiOiI3MzciLCJjaGFyX2VuZCI6IjEyNTciLCJibG9iX25hbWUiOiIzMTA5MTdmYTZiNDQ1MThiNWNiYjk1YzA5NzExOTRlMjRmNmRhNDIwMGYwYjRmZGE0ZjZjNmUxYWIwZTA0NDE2IiwiZmlsZSI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoic3JjL3NlcnZlci9pbmRleC50cyJ9fSx7ImNoYXJfc3RhcnQiOiIxMTU4IiwiY2hhcl9lbmQiOiIyMzU2IiwiYmxvYl9uYW1lIjoiMzMzMzA4NTAwMzg0MzU0MGJlYWFiNzkyOWY5ZmNkOTM3NDYzMmIyZmMyNjlkODRjNjAzMDBhOWE0NjBlYzEzMCIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6InJzYnVpbGQuY29uZmlnLnRzIn19LHsiY2hhcl9zdGFydCI6IjEzMDgiLCJjaGFyX2VuZCI6IjIwNTkiLCJibG9iX25hbWUiOiI5YWJlZjc0OWY3ZTM1NDYzMTA0MGQxNGU3ZjE3MWQ5MjIwNDllNmJkZDFjZTk5MjE3NjRmMjZjMTYwNDg2NzdmIiwiZmlsZSI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoiUkVBRE1FLm1kIn19LHsiY2hhcl9zdGFydCI6IjAiLCJjaGFyX2VuZCI6IjU4MSIsImJsb2JfbmFtZSI6ImQ0ZTBjMjc2MTczYmFkOWU2MGJlODVjNDk4NDYwYmM4YjA2MzY1ZDJkZjAwMWM5MWU1MWYzMTk1MjFiN2JlMTYiLCJmaWxlIjp7InJlcG9Sb290IjoiIiwicGF0aE5hbWUiOiJzcmMvYXBwL2Jsb2cvMy1sZXNzb25zLXdlLWxlYXJuZWQtZ29pbmctYmFjay10by10aGUtb2ZmaWNlL3BhZ2UubWR4In19LHsiY2hhcl9zdGFydCI6IjY4NSIsImNoYXJfZW5kIjoiMTQ3NSIsImJsb2JfbmFtZSI6IjNjZjA2N2Y0ODU0YTY4MjQwOWQ3Y2JiNzk2YTI3ODRmOTRjYTI2NWU1MWQwZGU4OTA1MTcyZGM0OTFjMDE0NzkiLCJmaWxlIjp7InJlcG9Sb290IjoiIiwicGF0aE5hbWUiOiJzcmMvbGliL21keC50cyJ9fV19XSwiZmVlZGJhY2tTdGF0ZXMiOnsidGVtcC1mZS02MTM1YmQ2Ni1mODJlLTRjZjAtYTM3NC02OGZjOWU2YTk0MWYiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9fSwidG9vbFVzZVN0YXRlcyI6e30sImRyYWZ0RXhjaGFuZ2UiOnsicmVxdWVzdF9tZXNzYWdlIjoiIiwicmljaF90ZXh0X2pzb25fcmVwciI6eyJ0eXBlIjoiZG9jIiwiY29udGVudCI6W3sidHlwZSI6InBhcmFncmFwaCJ9XX0sIm1lbnRpb25lZF9pdGVtcyI6W10sInN0YXR1cyI6ImRyYWZ0In0sImRyYWZ0QWN0aXZlQ29udGV4dElkcyI6WyIvc3JjL2FwcCIsIi9Vc2Vycy9vdmUvRG93bmxvYWRzL3RhaWx3aW5kLXBsdXMtc3R1ZGlvL3N0dWRpby10cy9zcmMvYXBwL2luZHVzdHJpZXMvcGFnZS50c3giLCIvVXNlcnMvb3ZlL0Rvd25sb2Fkcy90YWlsd2luZC1wbHVzLXN0dWRpby9zdHVkaW8tdHMvQVVHTUVOVF9BR0VOVF9HVUlERUxJTkVTLm1kOkwwLTAiLCIvVXNlcnMvb3ZlL0Rvd25sb2Fkcy90YWlsd2luZC1wbHVzLXN0dWRpby9zdHVkaW8tdHNmYWxzZWZhbHNlIiwidXNlckd1aWRlbGluZXMiXSwicmVxdWVzdElkcyI6W10sImlzUGlubmVkIjpmYWxzZSwiaXNTaGFyZWFibGUiOmZhbHNlLCJleHRyYURhdGEiOnsiaGFzRGlydHlFZGl0cyI6ZmFsc2V9LCJwZXJzb25hVHlwZSI6MH0sIjg2OTA0MDE4LWNiMDEtNDIxNC1hZDg3LWExZTM1MDVkZWIyMCI6eyJpZCI6Ijg2OTA0MDE4LWNiMDEtNDIxNC1hZDg3LWExZTM1MDVkZWIyMCIsIm5hbWUiOiJXZWxjb21lIHRvIHRoZSBBdWdtZW50IEFnZW50IiwiY3JlYXRlZEF0SXNvIjoiMjAyNS0wNS0xMFQxOTozMzozNS4xMjBaIiwibGFzdEludGVyYWN0ZWRBdElzbyI6IjIwMjUtMDUtMTBUMTk6NDA6MDYuMjAwWiIsImNoYXRIaXN0b3J5IjpbeyJyZXF1ZXN0X2lkIjoiYjE1YmM3OGEtY2RmMy00OTJkLWI4YmQtMDc1ZjA3OTNlODBiIiwidXVpZCI6IjA3ODc5MmVhLTJlM2QtNGI5Yy1hZmEwLTMzYzZkOTU4MWM5YSIsImNoYXRJdGVtVHlwZSI6ImFnZW50aWMtY2hlY2twb2ludC1kZWxpbWl0ZXIiLCJzdGF0dXMiOiJzdWNjZXNzIiwiZnJvbVRpbWVzdGFtcCI6MCwidG9UaW1lc3RhbXAiOjE3NDY5MDU2MTUxMjMsInNlZW5fc3RhdGUiOiJzZWVuIn0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjY5MzZjN2E4LTdhZjMtNGRlYS1iZjYxLWE0NzZhOTA3NmY5MCIsInJlcXVlc3RfbWVzc2FnZSI6IllvdSBhcmUgd3JpdGluZyB0aGUgVXNlciBHdWlkZWxpbmVzIGZvciBBdWdtZW50IEFnZW50IGZvciB0aGlzIHNwZWNpZmljIFJlYWN0IDE5LCByc2J1aWxkLCBidW4sIEFjZXRlcm5pdHkgVUkgeCBUYWlsd2luZCBVSSBUeXBlU2NyaXB0IG1hcmtldGluZyB3ZWJzaXRlLiBXZSdyZSB1c2luZyB0aGUgYXBwIHJvdXRlciBhbmQgc3RvcmluZyBmaWxlcyBpbiB0aGUgc3JjIGZvbGRlci4gV2UncmUgdXNpbmcgVGltZXNjYWxlREIgYXMgb3VyIHByaW1hcnkgZGF0YWJhc2Ugc29sdXRpb24gc28geWVhaC4gV0UncmUgZGlzdHJpYnV0aW5nIHRoZSB3ZWJzaXRlIHVzaW5nIFZlcmNlbCBhbmQgd2UncmUgYnVpbGRpbmcgdGhlIHdlYnNpdGUgZm9yIHByb2R1Y3Rpb24gZW5zdXJpbmcgZGlzdHJpYnV0ZWQgc3lzdGVtcyB0aGF0IGFyZSBjbG91ZCBuYXRpdmUuIFNvIHdlJ3JlIGRlcGxveWluZyB0aGlzIGludG8gb3VyIGs4cyBjbHVzdGVyIGlmIG5lY2Vzc2FyeSBhbmQgZW5zdXJpbmcgb3VyIENJL0NEIHBpcGVsaW5lIHdvcmtzIHdpdGggb3VyIHRlcnJhZm9ybSBjb2RlIHdoaWNoIHNob3VsZCBlc3NlbnRpYWxseSBjb3ZlciBvZmYgd2hhdCBpcyBhbHJlYWR5IGluIHRoZSBrOHMgY29uZmlndXJhdGlvbi4gRHJpZnQgcHJvdGVjdGlvbiBiYXNpY2FsbHkuIFBsZWFzZSBlbnN1cmUgd2UncmUgd29ya2luZyB3aXRoIHRoZSBFU2xpbnQgYW5kIFByZXR0aWVyIGxpbnRpbmcgc3RhbmRhcmRzLiBQbGVhc2UgZW5zdXJlIHdlJ3JlIG9mZmljaWFsbHkgb25seSBzdXBwb3J0aW5nIFR5cGVTY3JpcHQgY29kZS4gU28gdGhlaXIgaXMgb25seSB0c3ggYW5kIHRzLiBObyBqcyBvciBtanMgZXRjLiBTbyB5ZWFoIHdyaXRlIHRoZSBVc2UgR3VpZGVsaW5lcyBmb3IgdGhlIEF1Z21lbnQgQWdlbnQuIEhlcmUgaXMgdGhlIFJFQURNRS5tZCBhbmQgdGhlIHBhY2thZ2UuanNvbkBSRUFETUUubWRAcGFja2FnZS5qc29uIiwicmljaF90ZXh0X2pzb25fcmVwciI6eyJ0eXBlIjoiZG9jIiwiY29udGVudCI6W3sidHlwZSI6InBhcmFncmFwaCIsImNvbnRlbnQiOlt7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IllvdSBhcmUgd3JpdGluZyB0aGUgVXNlciBHdWlkZWxpbmVzIGZvciBBdWdtZW50IEFnZW50IGZvciB0aGlzIHNwZWNpZmljIFJlYWN0IDE5LCByc2J1aWxkLCBidW4sIEFjZXRlcm5pdHkgVUkgeCBUYWlsd2luZCBVSSBUeXBlU2NyaXB0IG1hcmtldGluZyB3ZWJzaXRlLiBXZSdyZSB1c2luZyB0aGUgYXBwIHJvdXRlciBhbmQgc3RvcmluZyBmaWxlcyBpbiB0aGUgc3JjIGZvbGRlci4gV2UncmUgdXNpbmcgVGltZXNjYWxlREIgYXMgb3VyIHByaW1hcnkgZGF0YWJhc2Ugc29sdXRpb24gc28geWVhaC4gV0UncmUgZGlzdHJpYnV0aW5nIHRoZSB3ZWJzaXRlIHVzaW5nIFZlcmNlbCBhbmQgd2UncmUgYnVpbGRpbmcgdGhlIHdlYnNpdGUgZm9yIHByb2R1Y3Rpb24gZW5zdXJpbmcgZGlzdHJpYnV0ZWQgc3lzdGVtcyB0aGF0IGFyZSBjbG91ZCBuYXRpdmUuIFNvIHdlJ3JlIGRlcGxveWluZyB0aGlzIGludG8gb3VyIGs4cyBjbHVzdGVyIGlmIG5lY2Vzc2FyeSBhbmQgZW5zdXJpbmcgb3VyIENJL0NEIHBpcGVsaW5lIHdvcmtzIHdpdGggb3VyIHRlcnJhZm9ybSBjb2RlIHdoaWNoIHNob3VsZCBlc3NlbnRpYWxseSBjb3ZlciBvZmYgd2hhdCBpcyBhbHJlYWR5IGluIHRoZSBrOHMgY29uZmlndXJhdGlvbi4gRHJpZnQgcHJvdGVjdGlvbiBiYXNpY2FsbHkuIFBsZWFzZSBlbnN1cmUgd2UncmUgd29ya2luZyB3aXRoIHRoZSBFU2xpbnQgYW5kIFByZXR0aWVyIGxpbnRpbmcgc3RhbmRhcmRzLiBQbGVhc2UgZW5zdXJlIHdlJ3JlIG9mZmljaWFsbHkgb25seSBzdXBwb3J0aW5nIFR5cGVTY3JpcHQgY29kZS4gU28gdGhlaXIgaXMgb25seSB0c3ggYW5kIHRzLiBObyBqcyBvciBtanMgZXRjLiBTbyB5ZWFoIHdyaXRlIHRoZSBVc2UgR3VpZGVsaW5lcyBmb3IgdGhlIEF1Z21lbnQgQWdlbnQuIEhlcmUgaXMgdGhlIFJFQURNRS5tZCBhbmQgdGhlIHBhY2thZ2UuanNvbiJ9LHsidHlwZSI6Im1lbnRpb24iLCJhdHRycyI6eyJpZCI6Ii9SRUFETUUubWQiLCJsYWJlbCI6IlJFQURNRS5tZCIsImRhdGEiOnsibGFiZWwiOiJSRUFETUUubWQiLCJuYW1lIjoiUkVBRE1FLm1kIiwiaWQiOiIvUkVBRE1FLm1kIiwiZmlsZSI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoiUkVBRE1FLm1kIn0sInR5cGUiOiJpdGVtIn19fSx7InR5cGUiOiJtZW50aW9uIiwiYXR0cnMiOnsiaWQiOiIvcGFja2FnZS5qc29uIiwibGFiZWwiOiJwYWNrYWdlLmpzb24iLCJkYXRhIjp7ImxhYmVsIjoicGFja2FnZS5qc29uIiwibmFtZSI6InBhY2thZ2UuanNvbiIsImlkIjoiL3BhY2thZ2UuanNvbiIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6InBhY2thZ2UuanNvbiJ9LCJ0eXBlIjoiaXRlbSJ9fX1dfV19LCJtZW50aW9uZWRfaXRlbXMiOlt7ImxhYmVsIjoiUkVBRE1FLm1kIiwibmFtZSI6IlJFQURNRS5tZCIsImlkIjoiL1JFQURNRS5tZCIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6IlJFQURNRS5tZCJ9LCJ0eXBlIjoiaXRlbSJ9LHsibGFiZWwiOiJwYWNrYWdlLmpzb24iLCJuYW1lIjoicGFja2FnZS5qc29uIiwiaWQiOiIvcGFja2FnZS5qc29uIiwiZmlsZSI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoicGFja2FnZS5qc29uIn0sInR5cGUiOiJpdGVtIn1dLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFBaUU1Qmgzd1BId2tEUjZ0WVoxTnA2IiwidG9vbF9uYW1lIjoic3RyLXJlcGxhY2UtZWRpdG9yIiwiaW5wdXRfanNvbiI6IntcImNvbW1hbmRcIjogXCJ2aWV3XCIsIFwicGF0aFwiOiBcIlJFQURNRS5tZFwifSIsIm1jcF9zZXJ2ZXJfbmFtZSI6IiIsIm1jcF90b29sX25hbWUiOiIifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IkknbGwgaGVscCB5b3UgY3JlYXRlIFVzZXIgR3VpZGVsaW5lcyBmb3IgQXVnbWVudCBBZ2VudCBzcGVjaWZpY2FsbHkgdGFpbG9yZWQgdG8geW91ciBSZWFjdCAxOSwgcnNidWlsZCwgYnVuLCBBY2V0ZXJuaXR5IFVJIHggVGFpbHdpbmQgVUkgVHlwZVNjcmlwdCBtYXJrZXRpbmcgd2Vic2l0ZS4gTGV0IG1lIGZpcnN0IGV4YW1pbmUgdGhlIFJFQURNRS5tZCBhbmQgcGFja2FnZS5qc29uIGZpbGVzIHRvIHVuZGVyc3RhbmQgeW91ciBwcm9qZWN0IGJldHRlci5cbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjAsInRleHRfbm9kZSI6eyJjb250ZW50IjoiWW91IGFyZSB3cml0aW5nIHRoZSBVc2VyIEd1aWRlbGluZXMgZm9yIEF1Z21lbnQgQWdlbnQgZm9yIHRoaXMgc3BlY2lmaWMgUmVhY3QgMTksIHJzYnVpbGQsIGJ1biwgQWNldGVybml0eSBVSSB4IFRhaWx3aW5kIFVJIFR5cGVTY3JpcHQgbWFya2V0aW5nIHdlYnNpdGUuIFdlJ3JlIHVzaW5nIHRoZSBhcHAgcm91dGVyIGFuZCBzdG9yaW5nIGZpbGVzIGluIHRoZSBzcmMgZm9sZGVyLiBXZSdyZSB1c2luZyBUaW1lc2NhbGVEQiBhcyBvdXIgcHJpbWFyeSBkYXRhYmFzZSBzb2x1dGlvbiBzbyB5ZWFoLiBXRSdyZSBkaXN0cmlidXRpbmcgdGhlIHdlYnNpdGUgdXNpbmcgVmVyY2VsIGFuZCB3ZSdyZSBidWlsZGluZyB0aGUgd2Vic2l0ZSBmb3IgcHJvZHVjdGlvbiBlbnN1cmluZyBkaXN0cmlidXRlZCBzeXN0ZW1zIHRoYXQgYXJlIGNsb3VkIG5hdGl2ZS4gU28gd2UncmUgZGVwbG95aW5nIHRoaXMgaW50byBvdXIgazhzIGNsdXN0ZXIgaWYgbmVjZXNzYXJ5IGFuZCBlbnN1cmluZyBvdXIgQ0kvQ0QgcGlwZWxpbmUgd29ya3Mgd2l0aCBvdXIgdGVycmFmb3JtIGNvZGUgd2hpY2ggc2hvdWxkIGVzc2VudGlhbGx5IGNvdmVyIG9mZiB3aGF0IGlzIGFscmVhZHkgaW4gdGhlIGs4cyBjb25maWd1cmF0aW9uLiBEcmlmdCBwcm90ZWN0aW9uIGJhc2ljYWxseS4gUGxlYXNlIGVuc3VyZSB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIEVTbGludCBhbmQgUHJldHRpZXIgbGludGluZyBzdGFuZGFyZHMuIFBsZWFzZSBlbnN1cmUgd2UncmUgb2ZmaWNpYWxseSBvbmx5IHN1cHBvcnRpbmcgVHlwZVNjcmlwdCBjb2RlLiBTbyB0aGVpciBpcyBvbmx5IHRzeCBhbmQgdHMuIE5vIGpzIG9yIG1qcyBldGMuIFNvIHllYWggd3JpdGUgdGhlIFVzZSBHdWlkZWxpbmVzIGZvciB0aGUgQXVnbWVudCBBZ2VudC4gSGVyZSBpcyB0aGUgUkVBRE1FLm1kIGFuZCB0aGUgcGFja2FnZS5qc29uQFJFQURNRS5tZEBwYWNrYWdlLmpzb24ifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvb3ZlL0Rvd25sb2Fkcy90YWlsd2luZC1wbHVzLXN0dWRpby9zdHVkaW8tdHMiLCJmb2xkZXJSb290IjoiL1VzZXJzL292ZS9Eb3dubG9hZHMvdGFpbHdpbmQtcGx1cy1zdHVkaW8vc3R1ZGlvLXRzIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwidGltZXN0YW1wIjoiMjAyNS0wNS0xMFQxOTozOToxMC40MTJaIiwicmVzcG9uc2VfdGV4dCI6IkknbGwgaGVscCB5b3UgY3JlYXRlIFVzZXIgR3VpZGVsaW5lcyBmb3IgQXVnbWVudCBBZ2VudCBzcGVjaWZpY2FsbHkgdGFpbG9yZWQgdG8geW91ciBSZWFjdCAxOSwgcnNidWlsZCwgYnVuLCBBY2V0ZXJuaXR5IFVJIHggVGFpbHdpbmQgVUkgVHlwZVNjcmlwdCBtYXJrZXRpbmcgd2Vic2l0ZS4gTGV0IG1lIGZpcnN0IGV4YW1pbmUgdGhlIFJFQURNRS5tZCBhbmQgcGFja2FnZS5qc29uIGZpbGVzIHRvIHVuZGVyc3RhbmQgeW91ciBwcm9qZWN0IGJldHRlci5cbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiJiMGViNjc2NC0yNzI4LTQxZjktOWY3Yi00ODgzMzFmNjgwZDIiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFUbXVOOXlEc1p2NUtuTkt3c2JGMldtIiwidG9vbF9uYW1lIjoic3RyLXJlcGxhY2UtZWRpdG9yIiwiaW5wdXRfanNvbiI6IntcImNvbW1hbmRcIjogXCJ2aWV3XCIsIFwicGF0aFwiOiBcInBhY2thZ2UuanNvblwifSIsIm1jcF9zZXJ2ZXJfbmFtZSI6IiIsIm1jcF90b29sX25hbWUiOiIifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IkhlcmUncyB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgYGNhdCAtbmAgb24gUkVBRE1FLm1kOlxuICAgICAxXHQjIFN0dWRpb1xuICAgICAyXHRcbiAgICAgM1x0U3R1ZGlvIGlzIGEgW1RhaWx3aW5kIFBsdXNdKGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL3BsdXMpIHNpdGUgdGVtcGxhdGUgYnVpbHQgdXNpbmcgW1RhaWx3aW5kIENTUyA0LjBdKGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tKSwgW1JlYWN0IDE5XShodHRwczovL3JlYWN0LmRldiksIGFuZCBbUnNidWlsZF0oaHR0cHM6Ly9yc2J1aWxkLmRldikuXG4gICAgIDRcdFxuICAgICA1XHQjIyBHZXR0aW5nIHN0YXJ0ZWRcbiAgICAgNlx0XG4gICAgIDdcdFRoaXMgcHJvamVjdCB1c2VzIFtCdW5dKGh0dHBzOi8vYnVuLnNoKSBhcyB0aGUgcGFja2FnZSBtYW5hZ2VyLiBJZiB5b3UgZG9uJ3QgaGF2ZSBCdW4gaW5zdGFsbGVkLCB5b3UgY2FuIGluc3RhbGwgaXQgYnkgZm9sbG93aW5nIHRoZSBpbnN0cnVjdGlvbnMgb24gdGhlIFtCdW4gd2Vic2l0ZV0oaHR0cHM6Ly9idW4uc2gvZG9jcy9pbnN0YWxsYXRpb24pLlxuICAgICA4XHRcbiAgICAgOVx0IyMjIEluc3RhbGxhdGlvblxuICAgIDEwXHRcbiAgICAxMVx0VG8gZ2V0IHN0YXJ0ZWQgd2l0aCB0aGlzIHRlbXBsYXRlLCBmaXJzdCBpbnN0YWxsIHRoZSBkZXBlbmRlbmNpZXM6XG4gICAgMTJcdFxuICAgIDEzXHRgYGBiYXNoXG4gICAgMTRcdGJ1biBpbnN0YWxsXG4gICAgMTVcdGBgYFxuICAgIDE2XHRcbiAgICAxN1x0IyMjIERhdGFiYXNlIFNldHVwXG4gICAgMThcdFxuICAgIDE5XHRUaGlzIHByb2plY3QgdXNlcyBUaW1lc2NhbGVEQiAoYSBQb3N0Z3JlU1FMIGV4dGVuc2lvbikgZm9yIGRhdGEgc3RvcmFnZS4gWW91J2xsIG5lZWQgdG8gc2V0IHVwIGEgVGltZXNjYWxlREIgaW5zdGFuY2UgYmVmb3JlIHJ1bm5pbmcgdGhlIGFwcGxpY2F0aW9uLlxuICAgIDIwXHRcbiAgICAyMVx0MS4gQ3JlYXRlIGEgYC5lbnZgIGZpbGUgYmFzZWQgb24gdGhlIGAuZW52LmV4YW1wbGVgIHRlbXBsYXRlOlxuICAgIDIyXHRcbiAgICAyM1x0YGBgYmFzaFxuICAgIDI0XHRjcCAuZW52LmV4YW1wbGUgLmVudlxuICAgIDI1XHRgYGBcbiAgICAyNlx0XG4gICAgMjdcdDIuIFVwZGF0ZSB0aGUgZGF0YWJhc2UgY29ubmVjdGlvbiBkZXRhaWxzIGluIHRoZSBgLmVudmAgZmlsZSB0byBtYXRjaCB5b3VyIFRpbWVzY2FsZURCIGluc3RhbmNlLlxuICAgIDI4XHRcbiAgICAyOVx0My4gSW5pdGlhbGl6ZSB0aGUgZGF0YWJhc2Ugc2NoZW1hOlxuICAgIDMwXHRcbiAgICAzMVx0YGBgYmFzaFxuICAgIDMyXHRidW4gcnVuIGRiOmluaXRcbiAgICAzM1x0YGBgXG4gICAgMzRcdFxuICAgIDM1XHQjIyMgUnVubmluZyB0aGUgQXBwbGljYXRpb25cbiAgICAzNlx0XG4gICAgMzdcdFJ1biB0aGUgZnJvbnRlbmQgZGV2ZWxvcG1lbnQgc2VydmVyOlxuICAgIDM4XHRcbiAgICAzOVx0YGBgYmFzaFxuICAgIDQwXHRidW4gcnVuIGRldlxuICAgIDQxXHRgYGBcbiAgICA0Mlx0XG4gICAgNDNcdFJ1biB0aGUgYmFja2VuZCBBUEkgc2VydmVyOlxuICAgIDQ0XHRcbiAgICA0NVx0YGBgYmFzaFxuICAgIDQ2XHRidW4gcnVuIHNlcnZlclxuICAgIDQ3XHRgYGBcbiAgICA0OFx0XG4gICAgNDlcdEZvciBkZXZlbG9wbWVudCB3aXRoIGF1dG8tcmVzdGFydCBvbiBmaWxlIGNoYW5nZXM6XG4gICAgNTBcdFxuICAgIDUxXHRgYGBiYXNoXG4gICAgNTJcdGJ1biBydW4gc2VydmVyOmRldlxuICAgIDUzXHRgYGBcbiAgICA1NFx0XG4gICAgNTVcdFlvdSBjYW4gYWxzbyBydW4gU3Rvcnlib29rIHRvIHZpZXcgYW5kIGRldmVsb3AgY29tcG9uZW50cyBpbiBpc29sYXRpb246XG4gICAgNTZcdFxuICAgIDU3XHRgYGBiYXNoXG4gICAgNThcdGJ1biBydW4gc3Rvcnlib29rXG4gICAgNTlcdGBgYFxuICAgIDYwXHRcbiAgICA2MVx0RmluYWxseSwgb3BlbiBbaHR0cDovL2xvY2FsaG9zdDozMDAwXShodHRwOi8vbG9jYWxob3N0OjMwMDApIGluIHlvdXIgYnJvd3NlciB0byB2aWV3IHRoZSB3ZWJzaXRlLiBUaGUgQVBJIHNlcnZlciBydW5zIG9uIFtodHRwOi8vbG9jYWxob3N0OjMwMDFdKGh0dHA6Ly9sb2NhbGhvc3Q6MzAwMSkgYnkgZGVmYXVsdC5cbiAgICA2Mlx0XG4gICAgNjNcdCMjIEN1c3RvbWl6aW5nXG4gICAgNjRcdFxuICAgIDY1XHRZb3UgY2FuIHN0YXJ0IGVkaXRpbmcgdGhpcyB0ZW1wbGF0ZSBieSBtb2RpZnlpbmcgdGhlIGZpbGVzIGluIHRoZSBgL3NyY2AgZm9sZGVyLiBUaGUgc2l0ZSB3aWxsIGF1dG8tdXBkYXRlIGFzIHlvdSBlZGl0IHRoZXNlIGZpbGVzLlxuICAgIDY2XHRcbiAgICA2N1x0IyMgTGljZW5zZVxuICAgIDY4XHRcbiAgICA2OVx0VGhpcyBzaXRlIHRlbXBsYXRlIGlzIGEgY29tbWVyY2lhbCBwcm9kdWN0IGFuZCBpcyBsaWNlbnNlZCB1bmRlciB0aGUgW1RhaWx3aW5kIFBsdXMgbGljZW5zZV0oaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vcGx1cy9saWNlbnNlKS5cbiAgICA3MFx0XG4gICAgNzFcdCMjIFRpbWVzY2FsZURCIEludGVncmF0aW9uXG4gICAgNzJcdFxuICAgIDczXHRUaGlzIHByb2plY3QgdXNlcyBbVGltZXNjYWxlREJdKGh0dHBzOi8vd3d3LnRpbWVzY2FsZS5jb20vKSBmb3IgZGF0YWJhc2UgZnVuY3Rpb25hbGl0eS4gVGltZXNjYWxlREIgaXMgYW4gb3Blbi1zb3VyY2UgZGF0YWJhc2UgYnVpbHQgb24gUG9zdGdyZVNRTCB0aGF0IHByb3ZpZGVzIHRpbWUtc2VyaWVzIGRhdGEgY2FwYWJpbGl0aWVzIHdoaWxlIG1haW50YWluaW5nIGZ1bGwgU1FMIGNvbXBhdGliaWxpdHkuXG4gICAgNzRcdFxuICAgIDc1XHQjIyMgRmVhdHVyZXNcbiAgICA3Nlx0XG4gICAgNzdcdC0gKipDb250YWN0IEZvcm0gU3VibWlzc2lvbnMqKjogVGhlIGNvbnRhY3QgZm9ybSBvbiB0aGUgd2Vic2l0ZSBzdG9yZXMgc3VibWlzc2lvbnMgaW4gVGltZXNjYWxlREIsIGFsbG93aW5nIHlvdSB0byB0cmFjayBhbmQgbWFuYWdlIGN1c3RvbWVyIGlucXVpcmllcyBvdmVyIHRpbWUuXG4gICAgNzhcdC0gKipVc2VyIEF1dGhlbnRpY2F0aW9uKio6IFVzZXIgYWNjb3VudHMgYW5kIHNlc3Npb25zIGFyZSBzdG9yZWQgaW4gVGltZXNjYWxlREIsIHByb3ZpZGluZyBzZWN1cmUgYXV0aGVudGljYXRpb24gZm9yIGFkbWluIHVzZXJzLlxuICAgIDc5XHQtICoqVGltZS1TZXJpZXMgQW5hbHl0aWNzKio6IFRpbWVzY2FsZURCJ3MgdGltZS1zZXJpZXMgY2FwYWJpbGl0aWVzIGFsbG93IGZvciBlZmZpY2llbnQgc3RvcmFnZSBhbmQgcXVlcnlpbmcgb2YgdGltZS1iYXNlZCBkYXRhLCBzdWNoIGFzIHdlYnNpdGUgYW5hbHl0aWNzIGFuZCB1c2VyIGFjdGl2aXR5LlxuICAgIDgwXHRcbiAgICA4MVx0IyMjIERhdGFiYXNlIFN0cnVjdHVyZVxuICAgIDgyXHRcbiAgICA4M1x0VGhlIGRhdGFiYXNlIGluY2x1ZGVzIHRoZSBmb2xsb3dpbmcgdGFibGVzOlxuICAgIDg0XHRcbiAgICA4NVx0LSBgdXNlcnNgOiBTdG9yZXMgdXNlciBhY2NvdW50IGluZm9ybWF0aW9uIGZvciBhdXRoZW50aWNhdGlvblxuICAgIDg2XHQtIGBzZXNzaW9uc2A6IE1hbmFnZXMgdXNlciBhdXRoZW50aWNhdGlvbiBzZXNzaW9uc1xuICAgIDg3XHQtIGBjb250YWN0X3N1Ym1pc3Npb25zYDogU3RvcmVzIGNvbnRhY3QgZm9ybSBzdWJtaXNzaW9uc1xuICAgIDg4XHQtIGBwYWdlX3ZpZXdzYDogVHJhY2tzIHdlYnNpdGUgYW5hbHl0aWNzIGRhdGFcbiAgICA4OVx0XG4gICAgOTBcdFRoZXNlIHRhYmxlcyBhcmUgY29uZmlndXJlZCBhcyBUaW1lc2NhbGVEQiBoeXBlcnRhYmxlcyB3aGVyZSBhcHByb3ByaWF0ZSwgb3B0aW1pemluZyB0aGVtIGZvciB0aW1lLXNlcmllcyBkYXRhIHN0b3JhZ2UgYW5kIHF1ZXJ5aW5nLlxuICAgIDkxXHRcbiAgICA5Mlx0IyMgTGVhcm4gbW9yZVxuICAgIDkzXHRcbiAgICA5NFx0VG8gbGVhcm4gbW9yZSBhYm91dCB0aGUgdGVjaG5vbG9naWVzIHVzZWQgaW4gdGhpcyBzaXRlIHRlbXBsYXRlLCBzZWUgdGhlIGZvbGxvd2luZyByZXNvdXJjZXM6XG4gICAgOTVcdFxuICAgIDk2XHQtIFtUYWlsd2luZCBDU1NdKGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MpIC0gdGhlIG9mZmljaWFsIFRhaWx3aW5kIENTUyBkb2N1bWVudGF0aW9uXG4gICAgOTdcdC0gW1JlYWN0XShodHRwczovL3JlYWN0LmRldi9sZWFybikgLSB0aGUgb2ZmaWNpYWwgUmVhY3QgZG9jdW1lbnRhdGlvblxuICAgIDk4XHQtIFtSc2J1aWxkXShodHRwczovL3JzYnVpbGQuZGV2L2d1aWRlL3N0YXJ0L2ludHJvZHVjdGlvbikgLSB0aGUgb2ZmaWNpYWwgUnNidWlsZCBkb2N1bWVudGF0aW9uXG4gICAgOTlcdC0gW0J1bl0oaHR0cHM6Ly9idW4uc2gvZG9jcykgLSB0aGUgb2ZmaWNpYWwgQnVuIGRvY3VtZW50YXRpb25cbiAgIDEwMFx0LSBbU3Rvcnlib29rXShodHRwczovL3N0b3J5Ym9vay5qcy5vcmcvZG9jcykgLSB0aGUgb2ZmaWNpYWwgU3Rvcnlib29rIGRvY3VtZW50YXRpb25cbiAgIDEwMVx0LSBbVGltZXNjYWxlREJdKGh0dHBzOi8vZG9jcy50aW1lc2NhbGUuY29tLykgLSB0aGUgb2ZmaWNpYWwgVGltZXNjYWxlREIgZG9jdW1lbnRhdGlvblxuICAgMTAyXHQtIFtFeHByZXNzXShodHRwczovL2V4cHJlc3Nqcy5jb20vKSAtIHRoZSBvZmZpY2lhbCBFeHByZXNzIGRvY3VtZW50YXRpb25cbiAgIDEwM1x0LSBbUG9zdGdyZVNRTF0oaHR0cHM6Ly93d3cucG9zdGdyZXNxbC5vcmcvZG9jcy8pIC0gdGhlIG9mZmljaWFsIFBvc3RncmVTUUwgZG9jdW1lbnRhdGlvblxuICAgMTA0XHQtIFtGcmFtZXIgTW90aW9uXShodHRwczovL3d3dy5mcmFtZXIuY29tL2RvY3MvKSAtIHRoZSBvZmZpY2lhbCBGcmFtZXIgTW90aW9uIGRvY3VtZW50YXRpb25cbiAgIDEwNVx0LSBbTURYXShodHRwczovL21keGpzLmNvbS8pIC0gdGhlIG9mZmljaWFsIE1EWCBkb2N1bWVudGF0aW9uXG4gICAxMDZcdC0gW1R5cGVTY3JpcHRdKGh0dHBzOi8vd3d3LnR5cGVzY3JpcHRsYW5nLm9yZy9kb2NzLykgLSB0aGUgb2ZmaWNpYWwgVHlwZVNjcmlwdCBkb2N1bWVudGF0aW9uXG4gICAxMDdcdFxuVG90YWwgbGluZXMgaW4gZmlsZTogMTA3XG4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFBaUU1Qmgzd1BId2tEUjZ0WVoxTnA2In19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL292ZS9Eb3dubG9hZHMvdGFpbHdpbmQtcGx1cy1zdHVkaW8vc3R1ZGlvLXRzIiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy9vdmUvRG93bmxvYWRzL3RhaWx3aW5kLXBsdXMtc3R1ZGlvL3N0dWRpby10cyJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2V9fV0sInRpbWVzdGFtcCI6IjIwMjUtMDUtMTBUMTk6Mzk6MTQuMTE3WiIsInJlc3BvbnNlX3RleHQiOiIiLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiZDBkYmJkOTgtODE4MS00YWVmLWJlZWYtY2M0N2ZiYjhhODZkIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxTDNCSDk3TDV1ek1DbTVpOXlGRTJ5cyIsInRvb2xfbmFtZSI6ImNvZGViYXNlLXJldHJpZXZhbCIsImlucHV0X2pzb24iOiJ7XCJpbmZvcm1hdGlvbl9yZXF1ZXN0XCI6IFwiRmluZCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgcHJvamVjdCBzdHJ1Y3R1cmUsIGVzcGVjaWFsbHkgZm9jdXNpbmcgb24gdGhlIHNyYyBmb2xkZXIgb3JnYW5pemF0aW9uLCBkYXRhYmFzZSBzZXR1cCwgYW5kIGFueSBjb25maWd1cmF0aW9uIGZpbGVzIHJlbGF0ZWQgdG8gRVNMaW50LCBQcmV0dGllciwgYW5kIFR5cGVTY3JpcHQuXCJ9IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiSGVyZSdzIHRoZSByZXN1bHQgb2YgcnVubmluZyBgY2F0IC1uYCBvbiBwYWNrYWdlLmpzb246XG4gICAgIDFcdHtcbiAgICAgMlx0ICBcIm5hbWVcIjogXCJzcGVjdHJ1bXdlYmNvLWF1XCIsXG4gICAgIDNcdCAgXCJ2ZXJzaW9uXCI6IFwiMS4wLjBcIixcbiAgICAgNFx0ICBcInByaXZhdGVcIjogdHJ1ZSxcbiAgICAgNVx0ICBcInR5cGVcIjogXCJtb2R1bGVcIixcbiAgICAgNlx0ICBcInNjcmlwdHNcIjoge1xuICAgICA3XHQgICAgXCJkZXZcIjogXCJyc2J1aWxkIGRldlwiLFxuICAgICA4XHQgICAgXCJidWlsZFwiOiBcInJzYnVpbGQgYnVpbGRcIixcbiAgICAgOVx0ICAgIFwic3RhcnRcIjogXCJzZXJ2ZSBkaXN0XCIsXG4gICAgMTBcdCAgICBcImxpbnRcIjogXCJlc2xpbnQgLiAtLWV4dCB0cyx0c3hcIixcbiAgICAxMVx0ICAgIFwic3Rvcnlib29rXCI6IFwic3Rvcnlib29rIGRldiAtcCA2MDA2XCIsXG4gICAgMTJcdCAgICBcImJ1aWxkLXN0b3J5Ym9va1wiOiBcInN0b3J5Ym9vayBidWlsZFwiLFxuICAgIDEzXHQgICAgXCJzZXJ2ZXJcIjogXCJub2RlIC0tbG9hZGVyIHRzLW5vZGUvZXNtIHNyYy9zZXJ2ZXIvaW5kZXgudHNcIixcbiAgICAxNFx0ICAgIFwic2VydmVyOmRldlwiOiBcIm5vZGVtb24gLS1leGVjIG5vZGUgLS1sb2FkZXIgdHMtbm9kZS9lc20gc3JjL3NlcnZlci9pbmRleC50c1wiLFxuICAgIDE1XHQgICAgXCJkYjppbml0XCI6IFwibm9kZSAtLWxvYWRlciB0cy1ub2RlL2VzbSBzcmMvc2VydmVyL2RiL2luaXQudHNcIlxuICAgIDE2XHQgIH0sXG4gICAgMTdcdCAgXCJicm93c2Vyc2xpc3RcIjogXCJkZWZhdWx0cywgbm90IGllIDw9IDExXCIsXG4gICAgMThcdCAgXCJkZXBlbmRlbmNpZXNcIjoge1xuICAgIDE5XHQgICAgXCJAbGVhZmFjL3JlaHlwZS1zaGlraVwiOiBcIl4yLjIuMVwiLFxuICAgIDIwXHQgICAgXCJAbWR4LWpzL2xvYWRlclwiOiBcIl4zLjAuMFwiLFxuICAgIDIxXHQgICAgXCJAbWR4LWpzL3JlYWN0XCI6IFwiXjMuMC4wXCIsXG4gICAgMjJcdCAgICBcIkByYWRpeC11aS9yZWFjdC1ob3Zlci1jYXJkXCI6IFwiMS4xLjEzXCIsXG4gICAgMjNcdCAgICBcIkByZWFjdC10aHJlZS9kcmVpXCI6IFwiMTAuMC43XCIsXG4gICAgMjRcdCAgICBcIkByZWFjdC10aHJlZS9maWJlclwiOiBcIjkuMC4wLWFscGhhLjhcIixcbiAgICAyNVx0ICAgIFwiQHJzYnVpbGQvY29yZVwiOiBcIl4wLjUuMVwiLFxuICAgIDI2XHQgICAgXCJAcnNidWlsZC9wbHVnaW4tbWR4XCI6IFwiXjAuNS4xXCIsXG4gICAgMjdcdCAgICBcIkByc2J1aWxkL3BsdWdpbi1yZWFjdFwiOiBcIl4wLjUuMVwiLFxuICAgIDI4XHQgICAgXCJAdGFibGVyL2ljb25zLXJlYWN0XCI6IFwiMy4zMS4wXCIsXG4gICAgMjlcdCAgICBcIkB0YWlsd2luZGNzcy9wb3N0Y3NzXCI6IFwiXjQuMS40XCIsXG4gICAgMzBcdCAgICBcIkB0c3BhcnRpY2xlcy9lbmdpbmVcIjogXCIzLjguMVwiLFxuICAgIDMxXHQgICAgXCJAdHNwYXJ0aWNsZXMvcmVhY3RcIjogXCIzLjAuMFwiLFxuICAgIDMyXHQgICAgXCJAdHNwYXJ0aWNsZXMvc2xpbVwiOiBcIjMuOC4xXCIsXG4gICAgMzNcdCAgICBcIkB0eXBlcy9jb3JzXCI6IFwiXjIuOC4xN1wiLFxuICAgIDM0XHQgICAgXCJAdHlwZXMvZXhwcmVzc1wiOiBcIl40LjE3LjIxXCIsXG4gICAgMzVcdCAgICBcIkB0eXBlcy9tZHhcIjogXCJeMi4wLjdcIixcbiAgICAzNlx0ICAgIFwiQHR5cGVzL25vZGVcIjogXCJeMjAuMTAuOFwiLFxuICAgIDM3XHQgICAgXCJAdHlwZXMvcGdcIjogXCJeOC4xMC45XCIsXG4gICAgMzhcdCAgICBcIkB0eXBlcy9yZWFjdFwiOiBcIl4xOS4wLjBcIixcbiAgICAzOVx0ICAgIFwiQHR5cGVzL3JlYWN0LWRvbVwiOiBcIl4xOS4wLjBcIixcbiAgICA0MFx0ICAgIFwiYWNvcm5cIjogXCJeOC4xMC4wXCIsXG4gICAgNDFcdCAgICBcImFjb3JuLWpzeFwiOiBcIl41LjMuMlwiLFxuICAgIDQyXHQgICAgXCJjbGFzcy12YXJpYW5jZS1hdXRob3JpdHlcIjogXCIwLjcuMVwiLFxuICAgIDQzXHQgICAgXCJjbHN4XCI6IFwiMi4xLjFcIixcbiAgICA0NFx0ICAgIFwiY29yc1wiOiBcIl4yLjguNVwiLFxuICAgIDQ1XHQgICAgXCJkb3RlbnZcIjogXCJeMTYuMy4xXCIsXG4gICAgNDZcdCAgICBcImVzY2FwZS1zdHJpbmctcmVnZXhwXCI6IFwiXjUuMC4wXCIsXG4gICAgNDdcdCAgICBcImV4cHJlc3NcIjogXCJeNC4xOC4yXCIsXG4gICAgNDhcdCAgICBcImZhc3QtZ2xvYlwiOiBcIl4zLjIuMTJcIixcbiAgICA0OVx0ICAgIFwiZnJhbWVyLW1vdGlvblwiOiBcIl4xMC4xNS4yXCIsXG4gICAgNTBcdCAgICBcImx1Y2lkZS1yZWFjdFwiOiBcIjAuNTA5LjBcIixcbiAgICA1MVx0ICAgIFwibWluaS1zdmctZGF0YS11cmlcIjogXCIxLjQuNFwiLFxuICAgIDUyXHQgICAgXCJtb3Rpb25cIjogXCIxMi4xMC41XCIsXG4gICAgNTNcdCAgICBcInBnXCI6IFwiXjguMTEuM1wiLFxuICAgIDU0XHQgICAgXCJxc3NcIjogXCIzLjAuMFwiLFxuICAgIDU1XHQgICAgXCJyZWFjdFwiOiBcIl4xOS4wLjBcIixcbiAgICA1Nlx0ICAgIFwicmVhY3QtZG9tXCI6IFwiXjE5LjAuMFwiLFxuICAgIDU3XHQgICAgXCJyZWFjdC1kcm9wem9uZVwiOiBcIjE0LjMuOFwiLFxuICAgIDU4XHQgICAgXCJyZWFjdC1zeW50YXgtaGlnaGxpZ2h0ZXJcIjogXCIxNS42LjFcIixcbiAgICA1OVx0ICAgIFwicmVjbWEtaW1wb3J0LWltYWdlc1wiOiBcIjAuMC4zXCIsXG4gICAgNjBcdCAgICBcInJlbWFyay1nZm1cIjogXCJeNC4wLjBcIixcbiAgICA2MVx0ICAgIFwicmVtYXJrLXJlaHlwZS13cmFwXCI6IFwiMC4wLjNcIixcbiAgICA2Mlx0ICAgIFwicmVtYXJrLXVud3JhcC1pbWFnZXNcIjogXCJeNC4wLjBcIixcbiAgICA2M1x0ICAgIFwic2VydmVcIjogXCJeMTQuMi4xXCIsXG4gICAgNjRcdCAgICBcInNoaWtpXCI6IFwiXjAuMTEuMVwiLFxuICAgIDY1XHQgICAgXCJzaW1wbGV4LW5vaXNlXCI6IFwiNC4wLjNcIixcbiAgICA2Nlx0ICAgIFwidGFpbHdpbmQtbWVyZ2VcIjogXCIzLjIuMFwiLFxuICAgIDY3XHQgICAgXCJ0YWlsd2luZGNzc1wiOiBcIl40LjEuNFwiLFxuICAgIDY4XHQgICAgXCJ0aHJlZVwiOiBcIjAuMTc2LjBcIixcbiAgICA2OVx0ICAgIFwidGhyZWUtZ2xvYmVcIjogXCIyLjQyLjRcIixcbiAgICA3MFx0ICAgIFwidHctYW5pbWF0ZS1jc3NcIjogXCIxLjIuOVwiLFxuICAgIDcxXHQgICAgXCJ0eXBlc2NyaXB0XCI6IFwiXjUuMy4zXCIsXG4gICAgNzJcdCAgICBcInVuaWZpZWQtY29uZGl0aW9uYWxcIjogXCIwLjAuMlwiXG4gICAgNzNcdCAgfSxcbiAgICA3NFx0ICBcImRldkRlcGVuZGVuY2llc1wiOiB7XG4gICAgNzVcdCAgICBcIkBzdG9yeWJvb2svYWRkb24tZXNzZW50aWFsc1wiOiBcIl43LjYuMTBcIixcbiAgICA3Nlx0ICAgIFwiQHN0b3J5Ym9vay9hZGRvbi1pbnRlcmFjdGlvbnNcIjogXCJeNy42LjEwXCIsXG4gICAgNzdcdCAgICBcIkBzdG9yeWJvb2svYWRkb24tbGlua3NcIjogXCJeNy42LjEwXCIsXG4gICAgNzhcdCAgICBcIkBzdG9yeWJvb2svYWRkb24tb25ib2FyZGluZ1wiOiBcIl4xLjAuMTFcIixcbiAgICA3OVx0ICAgIFwiQHN0b3J5Ym9vay9ibG9ja3NcIjogXCJeNy42LjEwXCIsXG4gICAgODBcdCAgICBcIkBzdG9yeWJvb2svcmVhY3RcIjogXCJeNy42LjEwXCIsXG4gICAgODFcdCAgICBcIkBzdG9yeWJvb2svcmVhY3Qtdml0ZVwiOiBcIl43LjYuMTBcIixcbiAgICA4Mlx0ICAgIFwiQHN0b3J5Ym9vay90ZXN0XCI6IFwiXjcuNi4xMFwiLFxuICAgIDgzXHQgICAgXCJAdHlwZXMvcmVhY3Qtc3ludGF4LWhpZ2hsaWdodGVyXCI6IFwiMTUuNS4xM1wiLFxuICAgIDg0XHQgICAgXCJAdHlwZXMvdGhyZWVcIjogXCIwLjE3Ni4wXCIsXG4gICAgODVcdCAgICBcImVzbGludFwiOiBcIl44LjU2LjBcIixcbiAgICA4Nlx0ICAgIFwiZXNsaW50LXBsdWdpbi1yZWFjdFwiOiBcIl43LjMzLjJcIixcbiAgICA4N1x0ICAgIFwiZXNsaW50LXBsdWdpbi1yZWFjdC1ob29rc1wiOiBcIl40LjYuMFwiLFxuICAgIDg4XHQgICAgXCJlc2xpbnQtcGx1Z2luLXN0b3J5Ym9va1wiOiBcIl4wLjYuMTVcIixcbiAgICA4OVx0ICAgIFwibm9kZW1vblwiOiBcIl4zLjAuM1wiLFxuICAgIDkwXHQgICAgXCJwcmV0dGllclwiOiBcIl4zLjMuMlwiLFxuICAgIDkxXHQgICAgXCJwcmV0dGllci1wbHVnaW4tdGFpbHdpbmRjc3NcIjogXCJeMC42LjExXCIsXG4gICAgOTJcdCAgICBcInNoYXJwXCI6IFwiMC4zMy4xXCIsXG4gICAgOTNcdCAgICBcInN0b3J5Ym9va1wiOiBcIl43LjYuMTBcIixcbiAgICA5NFx0ICAgIFwidHMtbm9kZVwiOiBcIl4xMC45LjJcIlxuICAgIDk1XHQgIH0sXG4gICAgOTZcdCAgXCJ0cnVzdGVkRGVwZW5kZW5jaWVzXCI6IFtcbiAgICA5N1x0ICAgIFwiY29yZS1qc1wiXG4gICAgOThcdCAgXVxuICAgIDk5XHR9XG4gICAxMDBcdFxuVG90YWwgbGluZXMgaW4gZmlsZTogMTAwXG4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFUbXVOOXlEc1p2NUtuTkt3c2JGMldtIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL292ZS9Eb3dubG9hZHMvdGFpbHdpbmQtcGx1cy1zdHVkaW8vc3R1ZGlvLXRzIiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy9vdmUvRG93bmxvYWRzL3RhaWx3aW5kLXBsdXMtc3R1ZGlvL3N0dWRpby10cyJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2V9fV0sInRpbWVzdGFtcCI6IjIwMjUtMDUtMTBUMTk6Mzk6MTYuNTY2WiIsInJlc3BvbnNlX3RleHQiOiIiLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiYzdkZWJjODUtMzQwNi00NDJjLWFmZTItMDg4NDYwZmM4OGJiIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxU21xTkxja1FHZ1o2emRLTWl6akJTYiIsInRvb2xfbmFtZSI6ImNvZGViYXNlLXJldHJpZXZhbCIsImlucHV0X2pzb24iOiJ7XCJpbmZvcm1hdGlvbl9yZXF1ZXN0XCI6IFwiRmluZCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgcHJvamVjdCdzIGZvbGRlciBzdHJ1Y3R1cmUsIGVzcGVjaWFsbHkgdGhlIHNyYyBkaXJlY3Rvcnkgb3JnYW5pemF0aW9uLCBhbmQgYW55IGluZm9ybWF0aW9uIGFib3V0IHRoZSBhcHAgcm91dGVyIHN0cnVjdHVyZS5cIn0iLCJtY3Bfc2VydmVyX25hbWUiOiIiLCJtY3BfdG9vbF9uYW1lIjoiIn19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiIifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJUaGUgZm9sbG93aW5nIGNvZGUgc2VjdGlvbnMgd2VyZSByZXRyaWV2ZWQ6XG5QYXRoOiBwcmV0dGllci5jb25maWcudHNcbmltcG9ydCB0eXBlIHsgT3B0aW9ucyB9IGZyb20gJ3ByZXR0aWVyJztcblxuY29uc3QgY29uZmlnOiBPcHRpb25zID0ge1xuICBzaW5nbGVRdW90ZTogdHJ1ZSxcbiAgc2VtaTogZmFsc2UsXG4gIHBsdWdpbnM6IFsncHJldHRpZXItcGx1Z2luLXRhaWx3aW5kY3NzJ10sXG4gIHRhaWx3aW5kU3R5bGVzaGVldDogJy4vc3JjL3N0eWxlcy90YWlsd2luZC5jc3MnLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgY29uZmlnOy4uLlxuUGF0aDogcGFja2FnZS5qc29uXG57XG4gIFwibmFtZVwiOiBcInNwZWN0cnVtd2ViY28tYXVcIixcbiAgXCJ2ZXJzaW9uXCI6IFwiMS4wLjBcIixcbiAgXCJwcml2YXRlXCI6IHRydWUsXG4gIFwidHlwZVwiOiBcIm1vZHVsZVwiLFxuICBcInNjcmlwdHNcIjoge1xuICAgIFwiZGV2XCI6IFwicnNidWlsZCBkZXZcIixcbiAgICBcImJ1aWxkXCI6IFwicnNidWlsZCBidWlsZFwiLFxuICAgIFwic3RhcnRcIjogXCJzZXJ2ZSBkaXN0XCIsXG4gICAgXCJsaW50XCI6IFwiZXNsaW50IC4gLS1leHQgdHMsdHN4XCIsXG4gICAgXCJzdG9yeWJvb2tcIjogXCJzdG9yeWJvb2sgZGV2IC1wIDYwMDZcIixcbiAgICBcImJ1aWxkLXN0b3J5Ym9va1wiOiBcInN0b3J5Ym9vayBidWlsZFwiLFxuICAgIFwic2VydmVyXCI6IFwibm9kZSAtLWxvYWRlciB0cy1ub2RlL2VzbSBzcmMvc2VydmVyL2luZGV4LnRzXCIsXG4gICAgXCJzZXJ2ZXI6ZGV2XCI6IFwibm9kZW1vbiAtLWV4ZWMgbm9kZSAtLWxvYWRlciB0cy1ub2RlL2VzbSBzcmMvc2VydmVyL2luZGV4LnRzXCIsXG4gICAgXCJkYjppbml0XCI6IFwibm9kZSAtLWxvYWRlciB0cy1ub2RlL2VzbSBzcmMvc2VydmVyL2RiL2luaXQudHNcIlxuICB9LFxuLi4uXG4gICAgXCJ1bmlmaWVkLWNvbmRpdGlvbmFsXCI6IFwiMC4wLjJcIlxuICB9LFxuICBcImRldkRlcGVuZGVuY2llc1wiOiB7XG4gICAgXCJAc3Rvcnlib29rL2FkZG9uLWVzc2VudGlhbHNcIjogXCJeNy42LjEwXCIsXG4gICAgXCJAc3Rvcnlib29rL2FkZG9uLWludGVyYWN0aW9uc1wiOiBcIl43LjYuMTBcIixcbiAgICBcIkBzdG9yeWJvb2svYWRkb24tbGlua3NcIjogXCJeNy42LjEwXCIsXG4gICAgXCJAc3Rvcnlib29rL2FkZG9uLW9uYm9hcmRpbmdcIjogXCJeMS4wLjExXCIsXG4gICAgXCJAc3Rvcnlib29rL2Jsb2Nrc1wiOiBcIl43LjYuMTBcIixcbiAgICBcIkBzdG9yeWJvb2svcmVhY3RcIjogXCJeNy42LjEwXCIsXG4gICAgXCJAc3Rvcnlib29rL3JlYWN0LXZpdGVcIjogXCJeNy42LjEwXCIsXG4gICAgXCJAc3Rvcnlib29rL3Rlc3RcIjogXCJeNy42LjEwXCIsXG4gICAgXCJAdHlwZXMvcmVhY3Qtc3ludGF4LWhpZ2hsaWdodGVyXCI6IFwiMTUuNS4xM1wiLFxuICAgIFwiQHR5cGVzL3RocmVlXCI6IFwiMC4xNzYuMFwiLFxuICAgIFwiZXNsaW50XCI6IFwiXjguNTYuMFwiLFxuICAgIFwiZXNsaW50LXBsdWdpbi1yZWFjdFwiOiBcIl43LjMzLjJcIixcbiAgICBcImVzbGludC1wbHVnaW4tcmVhY3QtaG9va3NcIjogXCJeNC42LjBcIixcbiAgICBcImVzbGludC1wbHVnaW4tc3Rvcnlib29rXCI6IFwiXjAuNi4xNVwiLFxuICAgIFwibm9kZW1vblwiOiBcIl4zLjAuM1wiLFxuICAgIFwicHJldHRpZXJcIjogXCJeMy4zLjJcIixcbiAgICBcInByZXR0aWVyLXBsdWdpbi10YWlsd2luZGNzc1wiOiBcIl4wLjYuMTFcIixcbiAgICBcInNoYXJwXCI6IFwiMC4zMy4xXCIsXG4gICAgXCJzdG9yeWJvb2tcIjogXCJeNy42LjEwXCIsXG4gICAgXCJ0cy1ub2RlXCI6IFwiXjEwLjkuMlwiXG4gIH0sXG4gIFwidHJ1c3RlZERlcGVuZGVuY2llc1wiOiBbXG4gICAgXCJjb3JlLWpzXCJcbiAgXVxufVxuLi4uXG5QYXRoOiBzcmMvc2VydmVyL2NvbmZpZy9kYi50c1xuaW1wb3J0IHsgUG9vbCB9IGZyb20gJ3BnJztcbmltcG9ydCBkb3RlbnYgZnJvbSAnZG90ZW52JztcblxuLy8gTG9hZCBlbnZpcm9ubWVudCB2YXJpYWJsZXNcbmRvdGVudi5jb25maWcoKTtcblxuLy8gQ3JlYXRlIGEgY29ubmVjdGlvbiBwb29sIHRvIFRpbWVzY2FsZURCXG5jb25zdCBwb29sID0gbmV3IFBvb2woe1xuICBob3N0OiBwcm9jZXNzLmVudi5EQl9IT1NUIHx8ICdsb2NhbGhvc3QnLFxuICBwb3J0OiBwYXJzZUludChwcm9jZXNzLmVudi5EQl9QT1JUIHx8ICc1NDMyJyksXG4gIHVzZXI6IHByb2Nlc3MuZW52LkRCX1VTRVIgfHwgJ3Bvc3RncmVzJyxcbiAgcGFzc3dvcmQ6IHByb2Nlc3MuZW52LkRCX1BBU1NXT1JEIHx8ICdwb3N0Z3JlcycsXG4gIGRhdGFiYXNlOiBwcm9jZXNzLmVudi5EQl9OQU1FIHx8ICdtYXJrZXRpbmdfc2l0ZScsXG4gIHNzbDogcHJvY2Vzcy5lbnYuREJfU1NMID09PSAndHJ1ZScgPyB7IHJlamVjdFVuYXV0aG9yaXplZDogZmFsc2UgfSA6IGZhbHNlLFxufSk7XG5cbi8vIFRlc3QgdGhlIGNvbm5lY3Rpb25cbnBvb2wub24oJ2Nvbm5lY3QnLCAoKSA9PiB7XG4gIGNvbnNvbGUubG9nKCdDb25uZWN0ZWQgdG8gVGltZXNjYWxlREInKTtcbn0pO1xuXG5wb29sLm9uKCdlcnJvcicsIChlcnIpID0+IHtcbiAgY29uc29sZS5lcnJvcignVW5leHBlY3RlZCBlcnJvciBvbiBpZGxlIGNsaWVudCcsIGVycik7XG4gIHByb2Nlc3MuZXhpdCgtMSk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgcG9vbDsuLi5cblBhdGg6IFJFQURNRS5tZFxuIyBTdHVkaW9cblxuU3R1ZGlvIGlzIGEgW1RhaWx3aW5kIFBsdXNdKGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL3BsdXMpIHNpdGUgdGVtcGxhdGUgYnVpbHQgdXNpbmcgW1RhaWx3aW5kIENTUyA0LjBdKGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tKSwgW1JlYWN0IDE5XShodHRwczovL3JlYWN0LmRldiksIGFuZCBbUnNidWlsZF0oaHR0cHM6Ly9yc2J1aWxkLmRldikuXG5cbiMjIEdldHRpbmcgc3RhcnRlZFxuXG5UaGlzIHByb2plY3QgdXNlcyBbQnVuXShodHRwczovL2J1bi5zaCkgYXMgdGhlIHBhY2thZ2UgbWFuYWdlci4gSWYgeW91IGRvbid0IGhhdmUgQnVuIGluc3RhbGxlZCwgeW91IGNhbiBpbnN0YWxsIGl0IGJ5IGZvbGxvd2luZyB0aGUgaW5zdHJ1Y3Rpb25zIG9uIHRoZSBbQnVuIHdlYnNpdGVdKGh0dHBzOi8vYnVuLnNoL2RvY3MvaW5zdGFsbGF0aW9uKS5cblxuIyMjIEluc3RhbGxhdGlvblxuXG5UbyBnZXQgc3RhcnRlZCB3aXRoIHRoaXMgdGVtcGxhdGUsIGZpcnN0IGluc3RhbGwgdGhlIGRlcGVuZGVuY2llczpcblxuYGBgYmFzaFxuYnVuIGluc3RhbGxcbmBgYFxuXG4jIyMgRGF0YWJhc2UgU2V0dXBcblxuVGhpcyBwcm9qZWN0IHVzZXMgVGltZXNjYWxlREIgKGEgUG9zdGdyZVNRTCBleHRlbnNpb24pIGZvciBkYXRhIHN0b3JhZ2UuIFlvdSdsbCBuZWVkIHRvIHNldCB1cCBhIFRpbWVzY2FsZURCIGluc3RhbmNlIGJlZm9yZSBydW5uaW5nIHRoZSBhcHBsaWNhdGlvbi5cblxuMS4gQ3JlYXRlIGEgYC5lbnZgIGZpbGUgYmFzZWQgb24gdGhlIGAuZW52LmV4YW1wbGVgIHRlbXBsYXRlOlxuXG5gYGBiYXNoXG5jcCAuZW52LmV4YW1wbGUgLmVudlxuYGBgXG5cbjIuIFVwZGF0ZSB0aGUgZGF0YWJhc2UgY29ubmVjdGlvbiBkZXRhaWxzIGluIHRoZSBgLmVudmAgZmlsZSB0byBtYXRjaCB5b3VyIFRpbWVzY2FsZURCIGluc3RhbmNlLlxuXG4zLiBJbml0aWFsaXplIHRoZSBkYXRhYmFzZSBzY2hlbWE6XG5cbmBgYGJhc2hcbmJ1biBydW4gZGI6aW5pdFxuYGBgXG5cbiMjIyBSdW5uaW5nIHRoZSBBcHBsaWNhdGlvblxuXG5SdW4gdGhlIGZyb250ZW5kIGRldmVsb3BtZW50IHNlcnZlcjpcblxuYGBgYmFzaFxuYnVuIHJ1biBkZXZcbmBgYFxuXG5SdW4gdGhlIGJhY2tlbmQgQVBJIHNlcnZlcjpcblxuYGBgYmFzaFxuYnVuIHJ1biBzZXJ2ZXJcbmBgYFxuXG5Gb3IgZGV2ZWxvcG1lbnQgd2l0aCBhdXRvLXJlc3RhcnQgb24gZmlsZSBjaGFuZ2VzOlxuXG5gYGBiYXNoXG5idW4gcnVuIHNlcnZlcjpkZXZcbmBgYFxuXG5Zb3UgY2FuIGFsc28gcnVuIFN0b3J5Ym9vayB0byB2aWV3IGFuZCBkZXZlbG9wIGNvbXBvbmVudHMgaW4gaXNvbGF0aW9uOlxuXG5gYGBiYXNoXG5idW4gcnVuIHN0b3J5Ym9va1xuYGBgXG5cbkZpbmFsbHksIG9wZW4gW2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMF0oaHR0cDovL2xvY2FsaG9zdDozMDAwKSBpbiB5b3VyIGJyb3dzZXIgdG8gdmlldyB0aGUgd2Vic2l0ZS4gVGhlIEFQSSBzZXJ2ZXIgcnVucyBvbiBbaHR0cDovL2xvY2FsaG9zdDozMDAxXShodHRwOi8vbG9jYWxob3N0OjMwMDEpIGJ5IGRlZmF1bHQuXG5cbiMjIEN1c3RvbWl6aW5nXG5cbllvdSBjYW4gc3RhcnQgZWRpdGluZyB0aGlzIHRlbXBsYXRlIGJ5IG1vZGlmeWluZyB0aGUgZmlsZXMgaW4gdGhlIGAvc3JjYCBmb2xkZXIuIFRoZSBzaXRlIHdpbGwgYXV0by11cGRhdGUgYXMgeW91IGVkaXQgdGhlc2UgZmlsZXMuXG5cbiMjIExpY2Vuc2VcblxuVGhpcyBzaXRlIHRlbXBsYXRlIGlzIGEgY29tbWVyY2lhbCBwcm9kdWN0IGFuZCBpcyBsaWNlbnNlZCB1bmRlciB0aGUgW1RhaWx3aW5kIFBsdXMgbGljZW5zZV0oaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vcGx1cy9saWNlbnNlKS5cblxuIyMgVGltZXNjYWxlREIgSW50ZWdyYXRpb25cblxuVGhpcyBwcm9qZWN0IHVzZXMgW1RpbWVzY2FsZURCXShodHRwczovL3d3dy50aW1lc2NhbGUuY29tLykgZm9yIGRhdGFiYXNlIGZ1bmN0aW9uYWxpdHkuIFRpbWVzY2FsZURCIGlzIGFuIG9wZW4tc291cmNlIGRhdGFiYXNlIGJ1aWx0IG9uIFBvc3RncmVTUUwgdGhhdCBwcm92aWRlcyB0aW1lLXNlcmllcyBkYXRhIGNhcGFiaWxpdGllcyB3aGlsZSBtYWludGFpbmluZyBmdWxsIFNRTCBjb21wYXRpYmlsaXR5LlxuXG4jIyMgRmVhdHVyZXNcblxuLSAqKkNvbnRhY3QgRm9ybSBTdWJtaXNzaW9ucyoqOiBUaGUgY29udGFjdCBmb3JtIG9uIHRoZSB3ZWJzaXRlIHN0b3JlcyBzdWJtaXNzaW9ucyBpbiBUaW1lc2NhbGVEQiwgYWxsb3dpbmcgeW91IHRvIHRyYWNrIGFuZCBtYW5hZ2UgY3VzdG9tZXIgaW5xdWlyaWVzIG92ZXIgdGltZS5cbi0gKipVc2VyIEF1dGhlbnRpY2F0aW9uKio6IFVzZXIgYWNjb3VudHMgYW5kIHNlc3Npb25zIGFyZSBzdG9yZWQgaW4gVGltZXNjYWxlREIsIHByb3ZpZGluZyBzZWN1cmUgYXV0aGVudGljYXRpb24gZm9yIGFkbWluIHVzZXJzLlxuLSAqKlRpbWUtU2VyaWVzIEFuYWx5dGljcyoqOiBUaW1lc2NhbGVEQidzIHRpbWUtc2VyaWVzIGNhcGFiaWxpdGllcyBhbGxvdyBmb3IgZWZmaWNpZW50IHN0b3JhZ2UgYW5kIHF1ZXJ5aW5nIG9mIHRpbWUtYmFzZWQgZGF0YSwgc3VjaCBhcyB3ZWJzaXRlIGFuYWx5dGljcyBhbmQgdXNlciBhY3Rpdml0eS5cblxuIyMjIERhdGFiYXNlIFN0cnVjdHVyZVxuXG5UaGUgZGF0YWJhc2UgaW5jbHVkZXMgdGhlIGZvbGxvd2luZyB0YWJsZXM6XG5cbi0gYHVzZXJzYDogU3RvcmVzIHVzZXIgYWNjb3VudCBpbmZvcm1hdGlvbiBmb3IgYXV0aGVudGljYXRpb25cbi0gYHNlc3Npb25zYDogTWFuYWdlcyB1c2VyIGF1dGhlbnRpY2F0aW9uIHNlc3Npb25zXG4tIGBjb250YWN0X3N1Ym1pc3Npb25zYDogU3RvcmVzIGNvbnRhY3QgZm9ybSBzdWJtaXNzaW9uc1xuLSBgcGFnZV92aWV3c2A6IFRyYWNrcyB3ZWJzaXRlIGFuYWx5dGljcyBkYXRhXG4uLi5cblBhdGg6IHRzY29uZmlnLmpzb25cbntcbiAgXCJjb21waWxlck9wdGlvbnNcIjoge1xuICAgIFwidGFyZ2V0XCI6IFwiZXM2XCIsXG4gICAgXCJsaWJcIjogW1wiZG9tXCIsIFwiZG9tLml0ZXJhYmxlXCIsIFwiZXNuZXh0XCJdLFxuICAgIFwiYWxsb3dKc1wiOiB0cnVlLFxuICAgIFwic2tpcExpYkNoZWNrXCI6IHRydWUsXG4gICAgXCJzdHJpY3RcIjogdHJ1ZSxcbiAgICBcImZvcmNlQ29uc2lzdGVudENhc2luZ0luRmlsZU5hbWVzXCI6IHRydWUsXG4gICAgXCJub0VtaXRcIjogdHJ1ZSxcbiAgICBcImVzTW9kdWxlSW50ZXJvcFwiOiB0cnVlLFxuICAgIFwibW9kdWxlXCI6IFwiZXNuZXh0XCIsXG4gICAgXCJtb2R1bGVSZXNvbHV0aW9uXCI6IFwiYnVuZGxlclwiLFxuICAgIFwicmVzb2x2ZUpzb25Nb2R1bGVcIjogdHJ1ZSxcbiAgICBcImlzb2xhdGVkTW9kdWxlc1wiOiB0cnVlLFxuICAgIFwianN4XCI6IFwicHJlc2VydmVcIixcbiAgICBcImluY3JlbWVudGFsXCI6IHRydWUsXG4gICAgXCJwbHVnaW5zXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJuYW1lXCI6IFwibmV4dFwiXG4gICAgICB9XG4gICAgXSxcbiAgICBcImJhc2VVcmxcIjogXCIuXCIsXG4gICAgXCJwYXRoc1wiOiB7XG4gICAgICBcIkAvKlwiOiBbXCIuLypcIl1cbiAgICB9XG4gIH0sXG4gIFwiaW5jbHVkZVwiOiBbXCJuZXh0LWVudi5kLnRzXCIsIFwiKiovKi50c1wiLCBcIioqLyoudHN4XCIsIFwiLm5leHQvdHlwZXMvKiovKi50c1wiXSxcbiAgXCJleGNsdWRlXCI6IFtcIm5vZGVfbW9kdWxlc1wiXVxufVxuLi4uXG5QYXRoOiBzcmMvc2VydmVyL2RiL2luaXQudHNcbmltcG9ydCBmcyBmcm9tICdmcyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IGZpbGVVUkxUb1BhdGggfSBmcm9tICd1cmwnO1xuaW1wb3J0IHBvb2wgZnJvbSAnLi4vY29uZmlnL2RiJztcblxuLy8gR2V0IHRoZSBkaXJlY3RvcnkgbmFtZSBvZiB0aGUgY3VycmVudCBtb2R1bGVcbmNvbnN0IF9fZmlsZW5hbWUgPSBmaWxlVVJMVG9QYXRoKGltcG9ydC5tZXRhLnVybCk7XG5jb25zdCBfX2Rpcm5hbWUgPSBwYXRoLmRpcm5hbWUoX19maWxlbmFtZSk7XG5cbi8vIFJlYWQgdGhlIHNjaGVtYSBmaWxlXG5jb25zdCBzY2hlbWFQYXRoID0gcGF0aC5qb2luKF9fZGlybmFtZSwgJ3NjaGVtYS5zcWwnKTtcbmNvbnN0IHNjaGVtYSA9IGZzLnJlYWRGaWxlU3luYyhzY2hlbWFQYXRoLCAndXRmOCcpO1xuXG4vKipcbiAqIEluaXRpYWxpemUgdGhlIGRhdGFiYXNlIHdpdGggdGhlIHNjaGVtYVxuICovXG5hc3luYyBmdW5jdGlvbiBpbml0aWFsaXplRGF0YWJhc2UoKSB7XG4gIGNvbnN0IGNsaWVudCA9IGF3YWl0IHBvb2wuY29ubmVjdCgpO1xuICBcbiAgdHJ5IHtcbiAgICBjb25zb2xlLmxvZygnSW5pdGlhbGl6aW5nIGRhdGFiYXNlLi4uJyk7XG4gICAgYXdhaXQgY2xpZW50LnF1ZXJ5KHNjaGVtYSk7XG4gICAgY29uc29sZS5sb2coJ0RhdGFiYXNlIGluaXRpYWxpemVkIHN1Y2Nlc3NmdWxseScpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGluaXRpYWxpemluZyBkYXRhYmFzZTonLCBlcnJvcik7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH0gZmluYWxseSB7XG4gICAgY2xpZW50LnJlbGVhc2UoKTtcbiAgfVxufVxuLi4uXG5QYXRoOiBidW5maWcudG9tbFxuW2luc3RhbGxdXG4jIFVzZSB0aGUgZXhhY3QgdmVyc2lvbnMgc3BlY2lmaWVkIGluIHBhY2thZ2UuanNvblxuZXhhY3QgPSB0cnVlXG5cbiMgSW5zdGFsbCBwZWVyIGRlcGVuZGVuY2llcyBhdXRvbWF0aWNhbGx5XG5wZWVyID0gdHJ1ZVxuXG4jIEluc3RhbGwgZGV2IGRlcGVuZGVuY2llcyBieSBkZWZhdWx0XG5kZXYgPSB0cnVlXG5cblt0ZXN0XVxuIyBVc2UgdGhlIEplc3QtY29tcGF0aWJsZSB0ZXN0IHJ1bm5lclxuY292ZXJhZ2UgPSB0cnVlXG5cbltydW5dXG4jIFNldCB0aGUgZGVmYXVsdCBlbnZpcm9ubWVudCB0byBkZXZlbG9wbWVudFxuZW52ID0geyBOT0RFX0VOViA9IFwiZGV2ZWxvcG1lbnRcIiB9Li4uXG5QYXRoOiAuZXNsaW50cmMuanNvblxue1xuICBcImV4dGVuZHNcIjogXCJuZXh0L2NvcmUtd2ViLXZpdGFsc1wiXG59XG4uLi5cblBhdGg6IGNvbXBvbmVudHMuanNvblxue1xuICBcIiRzY2hlbWFcIjogXCJodHRwczovL3VpLnNoYWRjbi5jb20vc2NoZW1hLmpzb25cIixcbiAgXCJzdHlsZVwiOiBcIm5ldy15b3JrXCIsXG4gIFwicnNjXCI6IGZhbHNlLFxuICBcInRzeFwiOiB0cnVlLFxuICBcInRhaWx3aW5kXCI6IHtcbiAgICBcImNvbmZpZ1wiOiBcIlwiLFxuICAgIFwiY3NzXCI6IFwic3JjL3N0eWxlcy9nbG9iYWxzLmNzc1wiLFxuICAgIFwiYmFzZUNvbG9yXCI6IFwibmV1dHJhbFwiLFxuICAgIFwiY3NzVmFyaWFibGVzXCI6IHRydWUsXG4gICAgXCJwcmVmaXhcIjogXCJcIlxuICB9LFxuICBcImFsaWFzZXNcIjoge1xuICAgIFwiY29tcG9uZW50c1wiOiBcIkAvY29tcG9uZW50c1wiLFxuICAgIFwidXRpbHNcIjogXCJAL2xpYi91dGlsc1wiLFxuICAgIFwidWlcIjogXCJAL2NvbXBvbmVudHMvdWlcIixcbiAgICBcImxpYlwiOiBcIkAvbGliXCIsXG4gICAgXCJob29rc1wiOiBcIkAvaG9va3NcIlxuICB9LFxuICBcImljb25MaWJyYXJ5XCI6IFwibHVjaWRlXCJcbn1cbi4uLlxuUGF0aDogc3JjL3NlcnZlci9pbmRleC50c1xuaW1wb3J0IGV4cHJlc3MgZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgY29ycyBmcm9tICdjb3JzJztcbmltcG9ydCBkb3RlbnYgZnJvbSAnZG90ZW52JztcbmltcG9ydCB7IGZpbGVVUkxUb1BhdGggfSBmcm9tICd1cmwnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbi8vIEltcG9ydCByb3V0ZXNcbmltcG9ydCBhdXRoUm91dGVzIGZyb20gJy4vcm91dGVzL2F1dGgnO1xuaW1wb3J0IGNvbnRhY3RSb3V0ZXMgZnJvbSAnLi9yb3V0ZXMvY29udGFjdCc7XG5cbi8vIExvYWQgZW52aXJvbm1lbnQgdmFyaWFibGVzXG5kb3RlbnYuY29uZmlnKCk7XG5cbi8vIENyZWF0ZSBFeHByZXNzIGFwcFxuY29uc3QgYXBwID0gZXhwcmVzcygpO1xuY29uc3QgUE9SVCA9IHByb2Nlc3MuZW52LlBPUlQgfHwgMzAwMTtcblxuLy8gTWlkZGxld2FyZVxuYXBwLnVzZShjb3JzKCkpO1xuYXBwLnVzZShleHByZXNzLmpzb24oKSk7XG5hcHAudXNlKGV4cHJlc3MudXJsZW5jb2RlZCh7IGV4dGVuZGVkOiB0cnVlIH0pKTtcblxuLy8gR2V0IHRoZSBkaXJlY3RvcnkgbmFtZSBvZiB0aGUgY3VycmVudCBtb2R1bGVcbmNvbnN0IF9fZmlsZW5hbWUgPSBmaWxlVVJMVG9QYXRoKGltcG9ydC5tZXRhLnVybCk7XG5jb25zdCBfX2Rpcm5hbWUgPSBwYXRoLmRpcm5hbWUoX19maWxlbmFtZSk7XG5cbi8vIFNlcnZlIHN0YXRpYyBmaWxlcyBmcm9tIHRoZSBSZWFjdCBhcHBcbmFwcC51c2UoZXhwcmVzcy5zdGF0aWMocGF0aC5qb2luKF9fZGlybmFtZSwgJy4uLy4uL2Rpc3QnKSkpO1xuXG4vLyBBUEkgcm91dGVzXG5hcHAudXNlKCcvYXBpL2F1dGgnLCBhdXRoUm91dGVzKTtcbmFwcC51c2UoJy9hcGkvY29udGFjdCcsIGNvbnRhY3RSb3V0ZXMpO1xuXG4vLyBIZWFsdGggY2hlY2sgZW5kcG9pbnRcbmFwcC5nZXQoJy9hcGkvaGVhbHRoJywgKHJlcSwgcmVzKSA9PiB7XG4gIHJlcy5zdGF0dXMoMjAwKS5qc29uKHsgc3RhdHVzOiAnb2snLCBtZXNzYWdlOiAnU2VydmVyIGlzIHJ1bm5pbmcnIH0pO1xufSk7XG5cbi8vIEFsbCBvdGhlciBHRVQgcmVxdWVzdHMgbm90IGhhbmRsZWQgYmVmb3JlIHdpbGwgcmV0dXJuIHRoZSBSZWFjdCBhcHBcbmFwcC5nZXQoJyonLCAocmVxLCByZXMpID0+IHtcbiAgcmVzLnNlbmRGaWxlKHBhdGguam9pbihfX2Rpcm5hbWUsICcuLi8uLi9kaXN0L2luZGV4Lmh0bWwnKSk7XG59KTtcblxuLy8gU3RhcnQgdGhlIHNlcnZlclxuYXBwLmxpc3RlbihQT1JULCAoKSA9PiB7XG4gIGNvbnNvbGUubG9nKGBTZXJ2ZXIgaXMgcnVubmluZyBvbiBwb3J0ICR7UE9SVH1gKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBhcHA7Li4uXG5QYXRoOiBzcmMvc2VydmVyL2RiL3NjaGVtYS5zcWxcbi0tIEVuYWJsZSBUaW1lc2NhbGVEQiBleHRlbnNpb25cbkNSRUFURSBFWFRFTlNJT04gSUYgTk9UIEVYSVNUUyB0aW1lc2NhbGVkYjtcblxuLS0gVXNlcnMgdGFibGUgZm9yIGF1dGhlbnRpY2F0aW9uXG5DUkVBVEUgVEFCTEUgSUYgTk9UIEVYSVNUUyB1c2VycyAoXG4gIGlkIFNFUklBTCBQUklNQVJZIEtFWSxcbiAgZW1haWwgVkFSQ0hBUigyNTUpIFVOSVFVRSBOT1QgTlVMTCxcbiAgcGFzc3dvcmRfaGFzaCBWQVJDSEFSKDI1NSkgTk9UIE5VTEwsXG4gIGZpcnN0X25hbWUgVkFSQ0hBUigxMDApLFxuICBsYXN0X25hbWUgVkFSQ0hBUigxMDApLFxuICBjcmVhdGVkX2F0IFRJTUVTVEFNUFRaIE5PVCBOVUxMIERFRkFVTFQgTk9XKCksXG4gIHVwZGF0ZWRfYXQgVElNRVNUQU1QVFogTk9UIE5VTEwgREVGQVVMVCBOT1coKVxuKTtcblxuLS0gQ29udGFjdCBmb3JtIHN1Ym1pc3Npb25zIHRhYmxlXG5DUkVBVEUgVEFCTEUgSUYgTk9UIEVYSVNUUyBjb250YWN0X3N1Ym1pc3Npb25zIChcbiAgaWQgU0VSSUFMIFBSSU1BUlkgS0VZLFxuICBuYW1lIFZBUkNIQVIoMjU1KSBOT1QgTlVMTCxcbiAgZW1haWwgVkFSQ0hBUigyNTUpIE5PVCBOVUxMLFxuICBjb21wYW55IFZBUkNIQVIoMjU1KSxcbiAgcGhvbmUgVkFSQ0hBUig1MCksXG4gIG1lc3NhZ2UgVEVYVCxcbiAgYnVkZ2V0IFZBUkNIQVIoNTApLFxuICBjcmVhdGVkX2F0IFRJTUVTVEFNUFRaIE5PVCBOVUxMIERFRkFVTFQgTk9XKClcbik7XG4uLi5cblBhdGg6IC5zdG9yeWJvb2svbWFpbi50c1xuaW1wb3J0IHR5cGUgeyBTdG9yeWJvb2tDb25maWcgfSBmcm9tICdAc3Rvcnlib29rL3JlYWN0LXZpdGUnO1xuXG5jb25zdCBjb25maWc6IFN0b3J5Ym9va0NvbmZpZyA9IHtcbiAgc3RvcmllczogWycuLi9zcmMvKiovKi5tZHgnLCAnLi4vc3JjLyoqLyouc3Rvcmllcy5AKGpzfGpzeHxtanN8dHN8dHN4KSddLFxuICBhZGRvbnM6IFtcbiAgICAnQHN0b3J5Ym9vay9hZGRvbi1saW5rcycsXG4gICAgJ0BzdG9yeWJvb2svYWRkb24tZXNzZW50aWFscycsXG4gICAgJ0BzdG9yeWJvb2svYWRkb24tb25ib2FyZGluZycsXG4gICAgJ0BzdG9yeWJvb2svYWRkb24taW50ZXJhY3Rpb25zJyxcbiAgXSxcbiAgZnJhbWV3b3JrOiB7XG4gICAgbmFtZTogJ0BzdG9yeWJvb2svcmVhY3Qtdml0ZScsXG4gICAgb3B0aW9uczoge30sXG4gIH0sXG4gIGRvY3M6IHtcbiAgICBhdXRvZG9jczogJ3RhZycsXG4gIH0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb25maWc7Li4uXG5QYXRoOiAuZ2l0aWdub3JlXG4jIFNlZSBodHRwczovL2hlbHAuZ2l0aHViLmNvbS9hcnRpY2xlcy9pZ25vcmluZy1maWxlcy8gZm9yIG1vcmUgYWJvdXQgaWdub3JpbmcgZmlsZXMuXG5cbiMgZGVwZW5kZW5jaWVzXG4vbm9kZV9tb2R1bGVzXG4vLnBucFxuLnBucC5qc1xuXG4jIHRlc3Rpbmdcbi9jb3ZlcmFnZVxuXG4jIG5leHQuanNcbi8ubmV4dC9cbi9vdXQvXG5cbiMgcHJvZHVjdGlvblxuL2J1aWxkXG5cbiMgbWlzY1xuLkRTX1N0b3JlXG4qLnBlbVxuXG4jIGRlYnVnXG5ucG0tZGVidWcubG9nKlxueWFybi1kZWJ1Zy5sb2cqXG55YXJuLWVycm9yLmxvZypcblxuIyBsb2NhbCBlbnYgZmlsZXNcbi5lbnYqLmxvY2FsXG5cbiMgdmVyY2VsXG4udmVyY2VsXG5cbiMgdHlwZXNjcmlwdFxuKi50c2J1aWxkaW5mb1xubmV4dC1lbnYuZC50c1xuLi4uXG5QYXRoOiByc2J1aWxkLmNvbmZpZy50c1xuaW1wb3J0IHsgZGVmaW5lQ29uZmlnIH0gZnJvbSAnQHJzYnVpbGQvY29yZSc7XG5pbXBvcnQgeyBwbHVnaW5SZWFjdCB9IGZyb20gJ0Byc2J1aWxkL3BsdWdpbi1yZWFjdCc7XG5pbXBvcnQgeyBwbHVnaW5NZHggfSBmcm9tICdAcnNidWlsZC9wbHVnaW4tbWR4JztcbmltcG9ydCByZWh5cGVTaGlraSBmcm9tICdAbGVhZmFjL3JlaHlwZS1zaGlraSc7XG5pbXBvcnQgZXNjYXBlU3RyaW5nUmVnZXhwIGZyb20gJ2VzY2FwZS1zdHJpbmctcmVnZXhwJztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyByZWNtYUltcG9ydEltYWdlcyB9IGZyb20gJ3JlY21hLWltcG9ydC1pbWFnZXMnO1xuaW1wb3J0IHJlbWFya0dmbSBmcm9tICdyZW1hcmstZ2ZtJztcbmltcG9ydCB7IHJlbWFya1JlaHlwZVdyYXAgfSBmcm9tICdyZW1hcmstcmVoeXBlLXdyYXAnO1xuaW1wb3J0IHJlbWFya1Vud3JhcEltYWdlcyBmcm9tICdyZW1hcmstdW53cmFwLWltYWdlcyc7XG5pbXBvcnQgc2hpa2kgZnJvbSAnc2hpa2knO1xuaW1wb3J0IHsgdW5pZmllZENvbmRpdGlvbmFsIH0gZnJvbSAndW5pZmllZC1jb25kaXRpb25hbCc7XG5cbi8vIFNpbWlsYXIgTURYIGxheW91dCBmdW5jdGlvbiBhcyBpbiB0aGUgTmV4dC5qcyBjb25maWdcbmZ1bmN0aW9uIHJlbWFya01EWExheW91dChzb3VyY2UsIG1ldGFOYW1lKSB7XG4gIHJldHVybiAodHJlZSkgPT4ge1xuICAgIGxldCBpbXAgPSBgaW1wb3J0IF9MYXlvdXQgZnJvbSAnJHtzb3VyY2V9J2A7XG4gICAgbGV0IGV4cCA9IGBleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBMYXlvdXQocHJvcHMpIHtcbiAgICAgIHJldHVybiA8X0xheW91dCB7Li4ucHJvcHN9ICR7bWV0YU5hbWV9PXske21ldGFOYW1lfX0gLz5cbiAgICB9YDtcblxuICAgIHRyZWUuY2hpbGRyZW4ucHVzaChcbiAgICAgIHtcbiAgICAgICAgdHlwZTogJ21keGpzRXNtJyxcbiAgICAgICAgdmFsdWU6IGltcCxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHR5cGU6ICdtZHhqc0VzbScsXG4gICAgICAgIHZhbHVlOiBleHAsXG4gICAgICB9XG4gICAgKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29uZmlnKGFzeW5jICgpID0+IHtcbiAgY29uc3QgaGlnaGxpZ2h0ZXIgPSBhd2FpdCBzaGlraS5nZXRIaWdobGlnaHRlcih7XG4gICAgdGhlbWU6ICdjc3MtdmFyaWFibGVzJyxcbiAgfSk7XG5cbiAgcmV0dXJuIHtcbiAgICBwbHVnaW5zOiBbXG4gICAgICBwbHVnaW5SZWFjdCgpLFxuICAgICAgcGx1Z2luTWR4KHtcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIHJlY21hUGx1Z2luczogW3JlY21hSW1wb3J0SW1hZ2VzXSxcbiAgICAgICAgICByZWh5cGVQbHVnaW5zOiBbXG4gICAgICAgICAgICBbcmVoeXBlU2hpa2ksIHsgaGlnaGxpZ2h0ZXIgfV0sXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgIHJlbWFya1JlaHlwZVdyYXAsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBub2RlOiB7IHR5cGU6ICdtZHhKc3hGbG93RWxlbWVudCcsIG5hbWU6ICdUeXBvZ3JhcGh5JyB9LFxuICAgICAgICAgICAgICAgIHN0YXJ0OiAnOnJvb3QgPiA6bm90KG1keEpzeEZsb3dFbGVtZW50KScsXG4gICAgICAgICAgICAgICAgZW5kOiAnOnJvb3QgPiBtZHhKc3hGbG93RWxlbWVudCcsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgIF0sXG4gICAgICAgICAgcmVtYXJrUGx1Z2luczogW1xuICAgICAgICAgICAgcmVtYXJrR2ZtLFxuICAgICAgICAgICAgcmVtYXJrVW53cmFwSW1hZ2VzLFxuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICB1bmlmaWVkQ29uZGl0aW9uYWwsXG4gICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICBuZXcgUmVnRXhwKGBeJHtlc2NhcGVTdHJpbmdSZWdleHAocGF0aC5yZXNvbHZlKCdzcmMvYXBwL2Jsb2cnKSl9YCksXG4gICAgICAgICAgICAgICAgW1tyZW1hcmtNRFhMYXlvdXQsICdAL2FwcC9ibG9nL3dyYXBwZXInLCAnYXJ0aWNsZSddXSxcbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgIG5ldyBSZWdFeHAoYF4ke2VzY2FwZVN0cmluZ1JlZ2V4cChwYXRoLnJlc29sdmUoJ3NyYy9hcHAvd29yaycpKX1gKSxcbiAgICAgICAgICAgICAgICBbW3JlbWFya01EWExheW91dCwgJ0AvYXBwL3dvcmsvd3JhcHBlcicsICdjYXNlU3R1ZHknXV0sXG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICB9KSxcbiAgICBdLFxuICAgIHNvdXJjZToge1xuICAgICAgZW50cnk6IHtcbiAgICAgICAgaW5kZXg6ICcuL3NyYy9pbmRleC50c3gnLFxuICAgICAgfSxcbiAgICAgIGFsaWFzOiB7XG4gICAgICAgICdAJzogcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4vJyksXG4gICAgICB9LFxuICAgIH0sXG4gICAgZGV2OiB7XG4gICAgICBwb3J0OiAzMDAwLFxuICAgIH0sXG4gICAgaHRtbDoge1xuICAgICAgdGVtcGxhdGU6ICcuL3NyYy9pbmRleC5odG1sJyxcbiAgICB9LFxuICAgIG91dHB1dDoge1xuICAgICAgZGlzdFBhdGg6IHtcbiAgICAgICAgcm9vdDogJ2Rpc3QnLFxuICAgICAgfSxcbiAgICB9LFxuICAgIHRvb2xzOiB7XG4gICAgICBwb3N0Y3NzOiB7XG4gICAgICAgIGNvbmZpZzogcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4vcG9zdGNzcy5jb25maWcudHMnKSxcbiAgICAgIH0sXG4gICAgfSxcbiAgfTtcbn0pO1xuLi4uXG5QYXRoOiAuZW52LmV4YW1wbGVcbiMgU2VydmVyIENvbmZpZ3VyYXRpb25cblBPUlQ9MzAwMVxuXG4jIERhdGFiYXNlIENvbmZpZ3VyYXRpb25cbkRCX0hPU1Q9bG9jYWxob3N0XG5EQl9QT1JUPTU0MzJcbkRCX1VTRVI9cG9zdGdyZXNcbkRCX1BBU1NXT1JEPXBvc3RncmVzXG5EQl9OQU1FPW1hcmtldGluZ19zaXRlXG5EQl9TU0w9ZmFsc2VcblxuIyBTZXNzaW9uIENvbmZpZ3VyYXRpb25cblNFU1NJT05fU0VDUkVUPXlvdXItc2VjcmV0LWtleS4uLlxuUGF0aDogc3JjL2luZGV4LnRzeFxuaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QsIFN1c3BlbnNlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3JlYXRlUm9vdCB9IGZyb20gJ3JlYWN0LWRvbS9jbGllbnQnO1xuaW1wb3J0IHsgUm9vdExheW91dCB9IGZyb20gJ0AvY29tcG9uZW50cy9Sb290TGF5b3V0JztcbmltcG9ydCAnQC9zdHlsZXMvdGFpbHdpbmQuY3NzJztcblxuLy8gQ3JlYXRlIGEgd3JhcHBlciBmb3IgdGhlIGFzeW5jIEhvbWUgY29tcG9uZW50XG5jb25zdCBBc3luY0hvbWVXcmFwcGVyID0gKCkgPT4ge1xuICBjb25zdCBbSG9tZUNvbXBvbmVudCwgc2V0SG9tZUNvbXBvbmVudF0gPSB1c2VTdGF0ZTxSZWFjdC5Db21wb25lbnRUeXBlIHwgbnVsbD4obnVsbCk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBsb2FkSG9tZSA9IGFzeW5jICgpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIER5bmFtaWNhbGx5IGltcG9ydCB0aGUgSG9tZSBjb21wb25lbnRcbiAgICAgICAgY29uc3QgaG9tZU1vZHVsZSA9IGF3YWl0IGltcG9ydCgnQC9hcHAvcGFnZScpO1xuICAgICAgICBzZXRIb21lQ29tcG9uZW50KCgpID0+IGhvbWVNb2R1bGUuZGVmYXVsdCk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gbG9hZCBIb21lIGNvbXBvbmVudDonLCBlcnJvcik7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGxvYWRIb21lKCk7XG4gIH0sIFtdKTtcblxuICBpZiAoIUhvbWVDb21wb25lbnQpIHtcbiAgICByZXR1cm4gPGRpdj5Mb2FkaW5nLi4uPC9kaXY+O1xuICB9XG5cbiAgcmV0dXJuIDxIb21lQ29tcG9uZW50IC8+O1xufTtcblxuLy8gQ3JlYXRlIGEgcm91dGVyLWxpa2Ugc3RydWN0dXJlIHRvIGhhbmRsZSBkaWZmZXJlbnQgcGFnZXNcbmNvbnN0IEFwcCA9ICgpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8Um9vdExheW91dD5cbiAgICAgIDxTdXNwZW5zZSBmYWxsYmFjaz17PGRpdj5Mb2FkaW5nLi4uPC9kaXY+fT5cbiAgICAgICAgPEFzeW5jSG9tZVdyYXBwZXIgLz5cbiAgICAgIDwvU3VzcGVuc2U+XG4gICAgPC9Sb290TGF5b3V0PlxuICApO1xufTtcblxuLy8gTW91bnQgdGhlIGFwcCB0byB0aGUgRE9NXG5jb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncm9vdCcpO1xuaWYgKGNvbnRhaW5lcikge1xuICBjb25zdCByb290ID0gY3JlYXRlUm9vdChjb250YWluZXIpO1xuICByb290LnJlbmRlcihcbiAgICA8UmVhY3QuU3RyaWN0TW9kZT5cbiAgICAgIDxBcHAgLz5cbiAgICA8L1JlYWN0LlN0cmljdE1vZGU+XG4gICk7XG59XG4uLi5cblBhdGg6IHNyYy9pbmRleC5odG1sXG48IURPQ1RZUEUgaHRtbD5cbjxodG1sIGxhbmc9XCJlblwiIGNsYXNzPVwiaC1mdWxsIGJnLW5ldXRyYWwtOTUwIHRleHQtYmFzZSBhbnRpYWxpYXNlZFwiPlxuICA8aGVhZD5cbiAgICA8bWV0YSBjaGFyc2V0PVwiVVRGLThcIiAvPlxuICAgIDxtZXRhIG5hbWU9XCJ2aWV3cG9ydFwiIGNvbnRlbnQ9XCJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wXCIgLz5cbiAgICA8bWV0YSBuYW1lPVwiZGVzY3JpcHRpb25cIiBjb250ZW50PVwiV2UgYXJlIGEgZGV2ZWxvcG1lbnQgc3R1ZGlvIHdvcmtpbmcgYXQgdGhlIGludGVyc2VjdGlvbiBvZiBkZXNpZ24gYW5kIHRlY2hub2xvZ3kuXCIgLz5cbiAgICA8dGl0bGU+U3R1ZGlvIC0gQXdhcmQgd2lubmluZyBkZXZlbG9wZXIgc3R1ZGlvIGJhc2VkIGluIERlbm1hcms8L3RpdGxlPlxuICA8L2hlYWQ+XG4gIDxib2R5IGNsYXNzPVwiZmxleCBtaW4taC1mdWxsIGZsZXgtY29sXCI+XG4gICAgPGRpdiBpZD1cInJvb3RcIj48L2Rpdj5cbiAgPC9ib2R5PlxuPC9odG1sPi4uLlxuUGF0aDogc3JjL2FwcC9sYXlvdXQudHN4XG5pbXBvcnQgeyB0eXBlIE1ldGFkYXRhIH0gZnJvbSAnbmV4dCdcblxuaW1wb3J0IHsgUm9vdExheW91dCB9IGZyb20gJ0AvY29tcG9uZW50cy9Sb290TGF5b3V0J1xuXG5pbXBvcnQgJ0Avc3R5bGVzL3RhaWx3aW5kLmNzcydcblxuZXhwb3J0IGNvbnN0IG1ldGFkYXRhOiBNZXRhZGF0YSA9IHtcbiAgdGl0bGU6IHtcbiAgICB0ZW1wbGF0ZTogJyVzIC0gU3R1ZGlvJyxcbiAgICBkZWZhdWx0OiAnU3R1ZGlvIC0gQXdhcmQgd2lubmluZyBkZXZlbG9wZXIgc3R1ZGlvIGJhc2VkIGluIERlbm1hcmsnLFxuICB9LFxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBMYXlvdXQoeyBjaGlsZHJlbiB9OiB7IGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGUgfSkge1xuICByZXR1cm4gKFxuICAgIDxodG1sIGxhbmc9XCJlblwiIGNsYXNzTmFtZT1cImgtZnVsbCBiZy1uZXV0cmFsLTk1MCB0ZXh0LWJhc2UgYW50aWFsaWFzZWRcIj5cbiAgICAgIDxib2R5IGNsYXNzTmFtZT1cImZsZXggbWluLWgtZnVsbCBmbGV4LWNvbFwiPlxuICAgICAgICA8Um9vdExheW91dD57Y2hpbGRyZW59PC9Sb290TGF5b3V0PlxuICAgICAgPC9ib2R5PlxuICAgIDwvaHRtbD5cbiAgKVxufVxuLi4uXG5QYXRoOiBzcmMvY29tcG9uZW50cy9Sb290TGF5b3V0LnRzeFxuLi4uXG5cbiAgcmV0dXJuIChcbiAgICA8TW90aW9uQ29uZmlnIHRyYW5zaXRpb249e3Nob3VsZFJlZHVjZU1vdGlvbiA/IHsgZHVyYXRpb246IDAgfSA6IHVuZGVmaW5lZH0+XG4gICAgICA8aGVhZGVyPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY2xhc3NOYW1lPVwiYWJzb2x1dGUgdG9wLTIgcmlnaHQtMCBsZWZ0LTAgei00MCBwdC0xNFwiXG4gICAgICAgICAgYXJpYS1oaWRkZW49e2V4cGFuZGVkID8gJ3RydWUnIDogdW5kZWZpbmVkfVxuICAgICAgICAgIC8vIEB0cy1pZ25vcmUgKGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMTcxNTcpXG4gICAgICAgICAgaW5lcnQ9e2V4cGFuZGVkID8gJycgOiB1bmRlZmluZWR9XG4gICAgICAgID5cbiAgICAgICAgICA8SGVhZGVyXG4gICAgICAgICAgICBwYW5lbElkPXtwYW5lbElkfVxuICAgICAgICAgICAgaWNvbj17TWVudUljb259XG4gICAgICAgICAgICB0b2dnbGVSZWY9e29wZW5SZWZ9XG4gICAgICAgICAgICBleHBhbmRlZD17ZXhwYW5kZWR9XG4gICAgICAgICAgICBvblRvZ2dsZT17KCkgPT4ge1xuICAgICAgICAgICAgICBzZXRFeHBhbmRlZCgoZXhwYW5kZWQpID0+ICFleHBhbmRlZClcbiAgICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoKCkgPT5cbiAgICAgICAgICAgICAgICBjbG9zZVJlZi5jdXJyZW50Py5mb2N1cyh7IHByZXZlbnRTY3JvbGw6IHRydWUgfSksXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4uLi5cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPE5hdmlnYXRpb24gLz5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicmVsYXRpdmUgYmctbmV1dHJhbC05NTAgYmVmb3JlOmFic29sdXRlIGJlZm9yZTppbnNldC14LTAgYmVmb3JlOnRvcC0wIGJlZm9yZTpoLXB4IGJlZm9yZTpiZy1uZXV0cmFsLTgwMFwiPlxuICAgICAgICAgICAgICA8Q29udGFpbmVyPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ3JpZCBncmlkLWNvbHMtMSBnYXAteS0xMCBwdC0xMCBwYi0xNiBzbTpncmlkLWNvbHMtMiBzbTpwdC0xNlwiPlxuICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgPGgyIGNsYXNzTmFtZT1cImZvbnQtZGlzcGxheSB0ZXh0LWJhc2UgZm9udC1zZW1pYm9sZCB0ZXh0LXdoaXRlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgT3VyIG9mZmljZXNcbiAgICAgICAgICAgICAgICAgICAgPC9oMj5cbiAgICAgICAgICAgICAgICAgICAgPE9mZmljZXNcbiAgICAgICAgICAgICAgICAgICAgICBpbnZlcnRcbiAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJtdC02IGdyaWQgZ3JpZC1jb2xzLTEgZ2FwLTggc206Z3JpZC1jb2xzLTJcIlxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNtOmJvcmRlci1sIHNtOmJvcmRlci10cmFuc3BhcmVudCBzbTpwbC0xNlwiPlxuICAgICAgICAgICAgICAgICAgICA8aDIgY2xhc3NOYW1lPVwiZm9udC1kaXNwbGF5IHRleHQtYmFzZSBmb250LXNlbWlib2xkIHRleHQtd2hpdGVcIj5cbiAgICAgICAgICAgICAgICAgICAgICBGb2xsb3cgdXNcbiAgICAgICAgICAgICAgICAgICAgPC9oMj5cbiAgICAgICAgICAgICAgICAgICAgPFNvY2lhbE1lZGlhIGNsYXNzTmFtZT1cIm10LTZcIiBpbnZlcnQgLz5cbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L0NvbnRhaW5lcj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvbW90aW9uLmRpdj5cbiAgICAgICAgPC9tb3Rpb24uZGl2PlxuICAgICAgPC9oZWFkZXI+XG5cbiAgICAgIDxtb3Rpb24uZGl2XG4gICAgICAgIGxheW91dFxuICAgICAgICBzdHlsZT17eyBib3JkZXJUb3BMZWZ0UmFkaXVzOiA0MCwgYm9yZGVyVG9wUmlnaHRSYWRpdXM6IDQwIH19XG4gICAgICAgIGNsYXNzTmFtZT1cInJlbGF0aXZlIGZsZXggZmxleC1hdXRvIG92ZXJmbG93LWhpZGRlbiBiZy13aGl0ZSBwdC0xNFwiXG4gICAgICA+XG4gICAgICAgIDxtb3Rpb24uZGl2XG4gICAgICAgICAgbGF5b3V0XG4gICAgICAgICAgY2xhc3NOYW1lPVwicmVsYXRpdmUgaXNvbGF0ZSBmbGV4IHctZnVsbCBmbGV4LWNvbCBwdC05XCJcbiAgICAgICAgPlxuICAgICAgICAgIDxHcmlkUGF0dGVyblxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiYWJzb2x1dGUgaW5zZXQteC0wIC10b3AtMTQgLXotMTAgaC1bMTAwMHB4XSB3LWZ1bGwgW21hc2staW1hZ2U6bGluZWFyLWdyYWRpZW50KHRvX2JvdHRvbV9sZWZ0LHdoaXRlXzQwJSx0cmFuc3BhcmVudF81MCUpXSBmaWxsLW5ldXRyYWwtNTAgc3Ryb2tlLW5ldXRyYWwtOTUwLzVcIlxuICAgICAgICAgICAgeU9mZnNldD17LTk2fVxuICAgICAgICAgICAgaW50ZXJhY3RpdmVcbiAgICAgICAgICAvPlxuXG4gICAgICAgICAgPG1haW4gY2xhc3NOYW1lPVwidy1mdWxsIGZsZXgtYXV0b1wiPntjaGlsZHJlbn08L21haW4+XG5cbiAgICAgICAgICA8Rm9vdGVyIC8+XG4gICAgICAgIDwvbW90aW9uLmRpdj5cbiAgICAgIDwvbW90aW9uLmRpdj5cbiAgICA8L01vdGlvbkNvbmZpZz5cbiAgKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gUm9vdExheW91dCh7IGNoaWxkcmVuIH06IHsgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZSB9KSB7XG4gIGxldCBwYXRobmFtZSA9IHVzZVBhdGhuYW1lKClcbiAgbGV0IFtsb2dvSG92ZXJlZCwgc2V0TG9nb0hvdmVyZWRdID0gdXNlU3RhdGUoZmFsc2UpXG5cbiAgcmV0dXJuIChcbiAgICA8Um9vdExheW91dENvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3sgbG9nb0hvdmVyZWQsIHNldExvZ29Ib3ZlcmVkIH19PlxuICAgICAgPFJvb3RMYXlvdXRJbm5lciBrZXk9e3BhdGhuYW1lfT57Y2hpbGRyZW59PC9Sb290TGF5b3V0SW5uZXI+XG4gICAgPC9Sb290TGF5b3V0Q29udGV4dC5Qcm92aWRlcj5cbiAgKVxufVxuLi4uXG5QYXRoOiBidW4ubG9ja1xue1xuICBcImxvY2tmaWxlVmVyc2lvblwiOiAxLFxuICBcIndvcmtzcGFjZXNcIjoge1xuICAgIFwiXCI6IHtcbiAgICAgIFwibmFtZVwiOiBcInRhaWx3aW5kLXBsdXMtc3R1ZGlvXCIsXG4gICAgICBcImRlcGVuZGVuY2llc1wiOiB7XG4gICAgICAgIFwiQGxlYWZhYy9yZWh5cGUtc2hpa2lcIjogXCJeMi4yLjFcIixcbiAgICAgICAgXCJAbWR4LWpzL2xvYWRlclwiOiBcIl4zLjAuMFwiLFxuICAgICAgICBcIkBtZHgtanMvcmVhY3RcIjogXCJeMy4wLjBcIixcbiAgICAgICAgXCJAcmFkaXgtdWkvcmVhY3QtaG92ZXItY2FyZFwiOiBcIjEuMS4xM1wiLFxuICAgICAgICBcIkByZWFjdC10aHJlZS9kcmVpXCI6IFwiMTAuMC43XCIsXG4gICAgICAgIFwiQHJlYWN0LXRocmVlL2ZpYmVyXCI6IFwiOS4wLjAtYWxwaGEuOFwiLFxuICAgICAgICBcIkByc2J1aWxkL2NvcmVcIjogXCJeMC41LjFcIixcbiAgICAgICAgXCJAcnNidWlsZC9wbHVnaW4tbWR4XCI6IFwiXjAuNS4xXCIsXG4gICAgICAgIFwiQHJzYnVpbGQvcGx1Z2luLXJlYWN0XCI6IFwiXjAuNS4xXCIsXG4gICAgICAgIFwiQHRhYmxlci9pY29ucy1yZWFjdFwiOiBcIjMuMzEuMFwiLFxuICAgICAgICBcIkB0YWlsd2luZGNzcy9wb3N0Y3NzXCI6IFwiXjQuMS40XCIsXG4gICAgICAgIFwiQHRzcGFydGljbGVzL2VuZ2luZVwiOiBcIjMuOC4xXCIsXG4gICAgICAgIFwiQHRzcGFydGljbGVzL3JlYWN0XCI6IFwiMy4wLjBcIixcbiAgICAgICAgXCJAdHNwYXJ0aWNsZXMvc2xpbVwiOiBcIjMuOC4xXCIsXG4gICAgICAgIFwiQHR5cGVzL2NvcnNcIjogXCJeMi44LjE3XCIsXG4gICAgICAgIFwiQHR5cGVzL2V4cHJlc3NcIjogXCJeNC4xNy4yMVwiLFxuICAgICAgICBcIkB0eXBlcy9tZHhcIjogXCJeMi4wLjdcIixcbiAgICAgICAgXCJAdHlwZXMvbm9kZVwiOiBcIl4yMC4xMC44XCIsXG4gICAgICAgIFwiQHR5cGVzL3BnXCI6IFwiXjguMTAuOVwiLFxuICAgICAgICBcIkB0eXBlcy9yZWFjdFwiOiBcIl4xOS4wLjBcIixcbiAgICAgICAgXCJAdHlwZXMvcmVhY3QtZG9tXCI6IFwiXjE5LjAuMFwiLFxuICAgICAgICBcImFjb3JuXCI6IFwiXjguMTAuMFwiLFxuLi4uXG5cbiAgICBcIkByb2xsdXAvcm9sbHVwLXdpbjMyLXg2NC1tc3ZjXCI6IFtcIkByb2xsdXAvcm9sbHVwLXdpbjMyLXg2NC1tc3ZjQDQuNDAuMlwiLCBcIlwiLCB7IFwib3NcIjogXCJ3aW4zMlwiLCBcImNwdVwiOiBcIng2NFwiIH0sIFwic2hhNTEyLWJ3c3BiV0IwNFhKcGVFbHZzcCtELi4uIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxTDNCSDk3TDV1ek1DbTVpOXlGRTJ5cyJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy9vdmUvRG93bmxvYWRzL3RhaWx3aW5kLXBsdXMtc3R1ZGlvL3N0dWRpby10cyIsImZvbGRlclJvb3QiOiIvVXNlcnMvb3ZlL0Rvd25sb2Fkcy90YWlsd2luZC1wbHVzLXN0dWRpby9zdHVkaW8tdHMifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA1LTEwVDE5OjM5OjI0LjgyOFoiLCJyZXNwb25zZV90ZXh0IjoiIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6ImZjY2ZjMTI5LTFkMTMtNGM4YS1hYTJjLTg5NDhjOGIyMGZjMCIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMVVZZXFLSjdZelRVTUdkSmJ1anpjc0MiLCJ0b29sX25hbWUiOiJzYXZlLWZpbGUiLCJpbnB1dF9qc29uIjoie1wiZmlsZV9wYXRoXCI6IFwiQVVHTUVOVF9BR0VOVF9HVUlERUxJTkVTLm1kXCIsIFwiZmlsZV9jb250ZW50XCI6IFwiIyBBdWdtZW50IEFnZW50IFVzZXIgR3VpZGVsaW5lc1xcblxcbiMjIE92ZXJ2aWV3XFxuXFxuVGhpcyBkb2N1bWVudCBwcm92aWRlcyBndWlkZWxpbmVzIGZvciB1c2luZyBBdWdtZW50IEFnZW50IHdpdGggb3VyIFJlYWN0IDE5LCByc2J1aWxkLCBidW4sIEFjZXRlcm5pdHkgVUkgeCBUYWlsd2luZCBVSSBUeXBlU2NyaXB0IG1hcmtldGluZyB3ZWJzaXRlLiBBdWdtZW50IEFnZW50IGlzIGFuIEFJLXBvd2VyZWQgZGV2ZWxvcG1lbnQgYXNzaXN0YW50IHRoYXQgaGVscHMgc3RyZWFtbGluZSBkZXZlbG9wbWVudCB3b3JrZmxvd3MsIG1haW50YWluIGNvZGUgcXVhbGl0eSwgYW5kIGVuc3VyZSBhZGhlcmVuY2UgdG8gb3VyIHByb2plY3Qgc3RhbmRhcmRzLlxcblxcbiMjIFByb2plY3QgQXJjaGl0ZWN0dXJlXFxuXFxuT3VyIHByb2plY3QgaXMgYSBtb2Rlcm4gbWFya2V0aW5nIHdlYnNpdGUgYnVpbHQgd2l0aDpcXG5cXG4tICoqRnJvbnRlbmQqKjogUmVhY3QgMTksIFRhaWx3aW5kIENTUyA0LjAsIEFjZXRlcm5pdHkgVUksIFRhaWx3aW5kIFVJXFxuLSAqKkJ1aWxkIFN5c3RlbSoqOiByc2J1aWxkXFxuLSAqKlBhY2thZ2UgTWFuYWdlcioqOiBidW5cXG4tICoqRGF0YWJhc2UqKjogVGltZXNjYWxlREIgKFBvc3RncmVTUUwgZXh0ZW5zaW9uKVxcbi0gKipTZXJ2ZXIqKjogRXhwcmVzcy5qcyBiYWNrZW5kXFxuLSAqKkRlcGxveW1lbnQqKjogVmVyY2VsLCB3aXRoIEt1YmVybmV0ZXMgKGs4cykgZm9yIHByb2R1Y3Rpb25cXG4tICoqSW5mcmFzdHJ1Y3R1cmUqKjogVGVycmFmb3JtIGZvciBpbmZyYXN0cnVjdHVyZSBhcyBjb2RlXFxuXFxuIyMgRmlsZSBTdHJ1Y3R1cmVcXG5cXG5UaGUgcHJvamVjdCBmb2xsb3dzIHRoZSBBcHAgUm91dGVyIHBhdHRlcm4gd2l0aCBhbGwgY29kZSBzdG9yZWQgaW4gdGhlIGBzcmNgIGRpcmVjdG9yeTpcXG5cXG5gYGBcXG5zcmMvXFxuXFx1MjUxY1xcdTI1MDBcXHUyNTAwIGFwcC8gICAgICAgICAgICAgICAgICAjIEFwcCByb3V0ZXIgcGFnZXMgYW5kIGxheW91dHNcXG5cXHUyNTAyICAgXFx1MjUxY1xcdTI1MDBcXHUyNTAwIGJsb2cvICAgICAgICAgICAgICMgQmxvZyBjb250ZW50IChNRFgpXFxuXFx1MjUwMiAgIFxcdTI1MWNcXHUyNTAwXFx1MjUwMCB3b3JrLyAgICAgICAgICAgICAjIENhc2Ugc3R1ZGllcyAoTURYKVxcblxcdTI1MDIgICBcXHUyNTFjXFx1MjUwMFxcdTI1MDAgcHJvY2Vzcy8gICAgICAgICAgIyBQcm9jZXNzIHBhZ2VzXFxuXFx1MjUwMiAgIFxcdTI1MWNcXHUyNTAwXFx1MjUwMCBsYXlvdXQudHN4ICAgICAgICAjIFJvb3QgbGF5b3V0XFxuXFx1MjUwMiAgIFxcdTI1MTRcXHUyNTAwXFx1MjUwMCBwYWdlLnRzeCAgICAgICAgICAjIEhvbWUgcGFnZVxcblxcdTI1MWNcXHUyNTAwXFx1MjUwMCBjb21wb25lbnRzLyAgICAgICAgICAgIyBSZXVzYWJsZSBSZWFjdCBjb21wb25lbnRzXFxuXFx1MjUwMiAgIFxcdTI1MWNcXHUyNTAwXFx1MjUwMCB1aS8gICAgICAgICAgICAgICAjIFVJIGNvbXBvbmVudHNcXG5cXHUyNTAyICAgXFx1MjUxNFxcdTI1MDBcXHUyNTAwIFJvb3RMYXlvdXQudHN4ICAgICMgTWFpbiBsYXlvdXQgd3JhcHBlclxcblxcdTI1MWNcXHUyNTAwXFx1MjUwMCBpbWFnZXMvICAgICAgICAgICAgICAgIyBTdGF0aWMgaW1hZ2VzXFxuXFx1MjUxY1xcdTI1MDBcXHUyNTAwIGxpYi8gICAgICAgICAgICAgICAgICAjIFV0aWxpdHkgZnVuY3Rpb25zIGFuZCBoZWxwZXJzXFxuXFx1MjUxY1xcdTI1MDBcXHUyNTAwIHNlcnZlci8gICAgICAgICAgICAgICAjIEJhY2tlbmQgc2VydmVyIGNvZGVcXG5cXHUyNTAyICAgXFx1MjUxY1xcdTI1MDBcXHUyNTAwIGNvbmZpZy8gICAgICAgICAgICMgU2VydmVyIGNvbmZpZ3VyYXRpb25cXG5cXHUyNTAyICAgXFx1MjUxY1xcdTI1MDBcXHUyNTAwIGRiLyAgICAgICAgICAgICAgICMgRGF0YWJhc2Ugc2V0dXAgYW5kIHNjaGVtYVxcblxcdTI1MDIgICBcXHUyNTFjXFx1MjUwMFxcdTI1MDAgbW9kZWxzLyAgICAgICAgICAgIyBEYXRhIG1vZGVsc1xcblxcdTI1MDIgICBcXHUyNTFjXFx1MjUwMFxcdTI1MDAgcm91dGVzLyAgICAgICAgICAgIyBBUEkgcm91dGVzXFxuXFx1MjUwMiAgIFxcdTI1MTRcXHUyNTAwXFx1MjUwMCBpbmRleC50cyAgICAgICAgICAjIFNlcnZlciBlbnRyeSBwb2ludFxcblxcdTI1MWNcXHUyNTAwXFx1MjUwMCBzdHlsZXMvICAgICAgICAgICAgICAgIyBDU1MgYW5kIFRhaWx3aW5kIHN0eWxlc1xcblxcdTI1MTRcXHUyNTAwXFx1MjUwMCBpbmRleC50c3ggICAgICAgICAgICAgIyBGcm9udGVuZCBlbnRyeSBwb2ludFxcbmBgYFxcblxcbiMjIERldmVsb3BtZW50IFN0YW5kYXJkc1xcblxcbiMjIyBUeXBlU2NyaXB0IE9ubHlcXG5cXG4tICoqT25seSBUeXBlU2NyaXB0IGZpbGVzIGFyZSBhbGxvd2VkKiogKGAudHNgIGFuZCBgLnRzeGApXFxuLSBObyBKYXZhU2NyaXB0IGZpbGVzIChgLmpzYCBvciBgLm1qc2ApIHNob3VsZCBiZSBjcmVhdGVkIG9yIG1vZGlmaWVkXFxuLSBBbGwgY29kZSBtdXN0IGJlIHByb3Blcmx5IHR5cGVkIHdpdGggVHlwZVNjcmlwdFxcblxcbiMjIyBDb2RlIFN0eWxlXFxuXFxuLSBXZSBmb2xsb3cgRVNMaW50IGFuZCBQcmV0dGllciBjb25maWd1cmF0aW9ucyBkZWZpbmVkIGluIHRoZSBwcm9qZWN0XFxuLSBTaW5nbGUgcXVvdGVzIGZvciBzdHJpbmdzXFxuLSBObyBzZW1pY29sb25zXFxuLSBUYWlsd2luZCBDU1MgZm9yIHN0eWxpbmcgd2l0aCB0aGUgY29uZmlndXJlZCBwcmVzZXRcXG4tIFVzZSB0aGUgYWxpYXMgaW1wb3J0cyAoZS5nLiwgYEAvY29tcG9uZW50c2ApIGFzIGRlZmluZWQgaW4gYHRzY29uZmlnLmpzb25gXFxuXFxuIyMjIERhdGFiYXNlIFVzYWdlXFxuXFxuLSBUaW1lc2NhbGVEQiBpcyBvdXIgcHJpbWFyeSBkYXRhYmFzZSBzb2x1dGlvblxcbi0gQWxsIGRhdGFiYXNlIGludGVyYWN0aW9ucyBzaG91bGQgdXNlIHRoZSBjb25uZWN0aW9uIHBvb2wgZnJvbSBgc3JjL3NlcnZlci9jb25maWcvZGIudHNgXFxuLSBEYXRhYmFzZSBzY2hlbWEgaXMgZGVmaW5lZCBpbiBgc3JjL3NlcnZlci9kYi9zY2hlbWEuc3FsYFxcbi0gVGFibGVzIGFyZSBjb25maWd1cmVkIGFzIFRpbWVzY2FsZURCIGh5cGVydGFibGVzIHdoZXJlIGFwcHJvcHJpYXRlIGZvciB0aW1lLXNlcmllcyBkYXRhXFxuXFxuIyMgV29ya2luZyB3aXRoIEF1Z21lbnQgQWdlbnRcXG5cXG4jIyMgV2hlbiB0byBVc2UgQXVnbWVudCBBZ2VudFxcblxcbkF1Z21lbnQgQWdlbnQgY2FuIGFzc2lzdCB3aXRoOlxcblxcbjEuICoqQ29kZSBHZW5lcmF0aW9uKio6IENyZWF0aW5nIG5ldyBjb21wb25lbnRzLCBwYWdlcywgb3IgQVBJIGVuZHBvaW50c1xcbjIuICoqQ29kZSBSZWZhY3RvcmluZyoqOiBJbXByb3ZpbmcgZXhpc3RpbmcgY29kZSB3aGlsZSBtYWludGFpbmluZyBUeXBlU2NyaXB0IHR5cGUgc2FmZXR5XFxuMy4gKipCdWcgRml4aW5nKio6IElkZW50aWZ5aW5nIGFuZCByZXNvbHZpbmcgaXNzdWVzIGluIHRoZSBjb2RlYmFzZVxcbjQuICoqRGF0YWJhc2UgT3BlcmF0aW9ucyoqOiBXcml0aW5nIFRpbWVzY2FsZURCIHF1ZXJpZXMgYW5kIHNjaGVtYSBtb2RpZmljYXRpb25zXFxuNS4gKipJbmZyYXN0cnVjdHVyZSoqOiBIZWxwaW5nIHdpdGggVGVycmFmb3JtIGNvbmZpZ3VyYXRpb25zIGZvciBrOHMgZGVwbG95bWVudHNcXG42LiAqKkRvY3VtZW50YXRpb24qKjogQ3JlYXRpbmcgb3IgdXBkYXRpbmcgZG9jdW1lbnRhdGlvbiBmb3IgY29kZVxcblxcbiMjIyBCZXN0IFByYWN0aWNlcyBmb3IgUHJvbXB0c1xcblxcbldoZW4gd29ya2luZyB3aXRoIEF1Z21lbnQgQWdlbnQsIGZvbGxvdyB0aGVzZSBndWlkZWxpbmVzIGZvciBlZmZlY3RpdmUgcHJvbXB0czpcXG5cXG4xLiAqKkJlIFNwZWNpZmljKio6IENsZWFybHkgc3RhdGUgd2hhdCB5b3UgbmVlZCBoZWxwIHdpdGhcXG4gICBgYGBcXG4gICBcXFwiQ3JlYXRlIGEgbmV3IGNvbnRhY3QgZm9ybSBjb21wb25lbnQgdGhhdCBzdWJtaXRzIGRhdGEgdG8gb3VyIFRpbWVzY2FsZURCIGRhdGFiYXNlXFxcIlxcbiAgIGBgYFxcblxcbjIuICoqUHJvdmlkZSBDb250ZXh0Kio6IE1lbnRpb24gcmVsZXZhbnQgZmlsZXMgb3IgY29tcG9uZW50c1xcbiAgIGBgYFxcbiAgIFxcXCJVcGRhdGUgdGhlIHVzZXIgYXV0aGVudGljYXRpb24gaW4gc3JjL3NlcnZlci9yb3V0ZXMvYXV0aC50cyB0byBpbmNsdWRlIEpXVCB0b2tlbiByZWZyZXNoXFxcIlxcbiAgIGBgYFxcblxcbjMuICoqU3BlY2lmeSBSZXF1aXJlbWVudHMqKjogSW5jbHVkZSBhbnkgc3BlY2lmaWMgcmVxdWlyZW1lbnRzIG9yIGNvbnN0cmFpbnRzXFxuICAgYGBgXFxuICAgXFxcIkdlbmVyYXRlIGEgbmV3IEFQSSBlbmRwb2ludCBmb3IgYW5hbHl0aWNzIHRoYXQgdXNlcyBUaW1lc2NhbGVEQidzIHRpbWUtc2VyaWVzIGNhcGFiaWxpdGllc1xcXCJcXG4gICBgYGBcXG5cXG40LiAqKlJlZmVyZW5jZSBFeGlzdGluZyBQYXR0ZXJucyoqOiBQb2ludCB0byBzaW1pbGFyIGNvZGUgYXMgZXhhbXBsZXNcXG4gICBgYGBcXG4gICBcXFwiQ3JlYXRlIGEgbmV3IGJsb2cgcG9zdCBwYWdlIGZvbGxvd2luZyB0aGUgcGF0dGVybiBpbiBzcmMvYXBwL2Jsb2cvZnV0dXJlLW9mLXdlYi1kZXZlbG9wbWVudC9wYWdlLm1keFxcXCJcXG4gICBgYGBcXG5cXG4jIyMgRGVwbG95bWVudCBXb3JrZmxvd1xcblxcbldoZW4gdXNpbmcgQXVnbWVudCBBZ2VudCBmb3IgZGVwbG95bWVudC1yZWxhdGVkIHRhc2tzOlxcblxcbjEuICoqRGV2ZWxvcG1lbnQqKjogVXNlIEF1Z21lbnQgQWdlbnQgdG8gaGVscCB3aXRoIGxvY2FsIGRldmVsb3BtZW50IHVzaW5nIGBidW4gcnVuIGRldmAgYW5kIGBidW4gcnVuIHNlcnZlcjpkZXZgXFxuMi4gKipUZXN0aW5nKio6IEVuc3VyZSBhbGwgY29kZSBjaGFuZ2VzIGluY2x1ZGUgYXBwcm9wcmlhdGUgdGVzdHNcXG4zLiAqKkNJL0NEKio6IEF1Z21lbnQgQWdlbnQgY2FuIGhlbHAgd2l0aCBDSS9DRCBwaXBlbGluZSBjb25maWd1cmF0aW9ucyB0aGF0IHdvcmsgd2l0aCBvdXIgVGVycmFmb3JtIGNvZGVcXG40LiAqKkt1YmVybmV0ZXMqKjogV2hlbiBkZXBsb3lpbmcgdG8gb3VyIGs4cyBjbHVzdGVyLCBlbnN1cmUgZHJpZnQgcHJvdGVjdGlvbiBpcyBtYWludGFpbmVkXFxuNS4gKipWZXJjZWwqKjogRm9yIGZyb250ZW5kIGRlcGxveW1lbnRzLCBmb2xsb3cgb3VyIFZlcmNlbCBjb25maWd1cmF0aW9uIHN0YW5kYXJkc1xcblxcbiMjIERhdGFiYXNlIEd1aWRlbGluZXNcXG5cXG5XaGVuIHdvcmtpbmcgd2l0aCBUaW1lc2NhbGVEQjpcXG5cXG4xLiAqKlNjaGVtYSBDaGFuZ2VzKio6IEFsbCBzY2hlbWEgY2hhbmdlcyBzaG91bGQgYmUgZG9jdW1lbnRlZCBhbmQgYXBwbGllZCB0aHJvdWdoIG1pZ3JhdGlvbiBzY3JpcHRzXFxuMi4gKipUaW1lLVNlcmllcyBEYXRhKio6IFV0aWxpemUgVGltZXNjYWxlREIncyB0aW1lLXNlcmllcyBjYXBhYmlsaXRpZXMgZm9yIGFwcHJvcHJpYXRlIGRhdGFcXG4zLiAqKkNvbm5lY3Rpb24gTWFuYWdlbWVudCoqOiBVc2UgdGhlIGNvbm5lY3Rpb24gcG9vbCBwYXR0ZXJuIGVzdGFibGlzaGVkIGluIGBzcmMvc2VydmVyL2NvbmZpZy9kYi50c2BcXG40LiAqKlF1ZXJ5IE9wdGltaXphdGlvbioqOiBPcHRpbWl6ZSBxdWVyaWVzIGZvciBUaW1lc2NhbGVEQidzIHNwZWNpZmljIGZlYXR1cmVzXFxuXFxuIyMgQ2xvdWQgTmF0aXZlIENvbnNpZGVyYXRpb25zXFxuXFxuT3VyIGFwcGxpY2F0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGNsb3VkIG5hdGl2ZSBhbmQgZGlzdHJpYnV0ZWQ6XFxuXFxuMS4gKipTdGF0ZWxlc3NuZXNzKio6IEVuc3VyZSBjb21wb25lbnRzIGFyZSBzdGF0ZWxlc3Mgd2hlcmUgcG9zc2libGUgZm9yIGhvcml6b250YWwgc2NhbGluZ1xcbjIuICoqQ29uZmlndXJhdGlvbioqOiBVc2UgZW52aXJvbm1lbnQgdmFyaWFibGVzIGZvciBjb25maWd1cmF0aW9uIChzZWUgYC5lbnYuZXhhbXBsZWApXFxuMy4gKipDb250YWluZXJpemF0aW9uKio6IEFsbCBzZXJ2aWNlcyBzaG91bGQgYmUgY29udGFpbmVyaXplZCBmb3IgazhzIGRlcGxveW1lbnRcXG40LiAqKk1vbml0b3JpbmcqKjogSW5jbHVkZSBhcHByb3ByaWF0ZSBsb2dnaW5nIGFuZCBtb25pdG9yaW5nIGhvb2tzXFxuNS4gKipSZXNpbGllbmNlKio6IERlc2lnbiBmb3IgZmFpbHVyZSB3aXRoIGFwcHJvcHJpYXRlIGVycm9yIGhhbmRsaW5nIGFuZCByZXRyaWVzXFxuXFxuIyMgU2VjdXJpdHkgQmVzdCBQcmFjdGljZXNcXG5cXG5XaGVuIGltcGxlbWVudGluZyBmZWF0dXJlcyB3aXRoIEF1Z21lbnQgQWdlbnQ6XFxuXFxuMS4gKipBdXRoZW50aWNhdGlvbioqOiBGb2xsb3cgZXN0YWJsaXNoZWQgcGF0dGVybnMgZm9yIHVzZXIgYXV0aGVudGljYXRpb25cXG4yLiAqKkRhdGEgVmFsaWRhdGlvbioqOiBWYWxpZGF0ZSBhbGwgdXNlciBpbnB1dHMgb24gYm90aCBjbGllbnQgYW5kIHNlcnZlclxcbjMuICoqRW52aXJvbm1lbnQgVmFyaWFibGVzKio6IE5ldmVyIGhhcmRjb2RlIHNlbnNpdGl2ZSBpbmZvcm1hdGlvblxcbjQuICoqQVBJIFNlY3VyaXR5Kio6IEltcGxlbWVudCBwcm9wZXIgYXV0aG9yaXphdGlvbiBmb3IgYWxsIEFQSSBlbmRwb2ludHNcXG41LiAqKkRhdGFiYXNlIEFjY2VzcyoqOiBVc2UgcGFyYW1ldGVyaXplZCBxdWVyaWVzIHRvIHByZXZlbnQgU1FMIGluamVjdGlvblxcblxcbiMjIEdldHRpbmcgSGVscFxcblxcbklmIHlvdSBlbmNvdW50ZXIgaXNzdWVzIG9yIGhhdmUgcXVlc3Rpb25zIGFib3V0IHVzaW5nIEF1Z21lbnQgQWdlbnQgd2l0aCB0aGlzIHByb2plY3Q6XFxuXFxuMS4gUmV2aWV3IHRoZXNlIGd1aWRlbGluZXMgYW5kIHRoZSBwcm9qZWN0IFJFQURNRVxcbjIuIENoZWNrIHRoZSBleGlzdGluZyBjb2RlYmFzZSBmb3Igc2ltaWxhciBwYXR0ZXJuc1xcbjMuIENvbnN1bHQgd2l0aCB0aGUgZGV2ZWxvcG1lbnQgdGVhbSBmb3IgcHJvamVjdC1zcGVjaWZpYyBxdWVzdGlvbnNcXG40LiBSZWZlciB0byB0aGUgb2ZmaWNpYWwgZG9jdW1lbnRhdGlvbiBmb3IgdGhlIHRlY2hub2xvZ2llcyB1c2VkXFxuXFxuLS0tXFxuXFxuQnkgZm9sbG93aW5nIHRoZXNlIGd1aWRlbGluZXMsIHlvdSdsbCBiZSBhYmxlIHRvIGVmZmVjdGl2ZWx5IHVzZSBBdWdtZW50IEFnZW50IHRvIG1haW50YWluIGFuZCBleHRlbmQgb3VyIFJlYWN0IDE5LCByc2J1aWxkLCBidW4sIEFjZXRlcm5pdHkgVUkgeCBUYWlsd2luZCBVSSBUeXBlU2NyaXB0IG1hcmtldGluZyB3ZWJzaXRlIHdoaWxlIGFkaGVyaW5nIHRvIG91ciBlc3RhYmxpc2hlZCBzdGFuZGFyZHMgYW5kIGJlc3QgcHJhY3RpY2VzLlwifSIsIm1jcF9zZXJ2ZXJfbmFtZSI6IiIsIm1jcF90b29sX25hbWUiOiIifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IkJhc2VkIG9uIG15IHJlc2VhcmNoIG9mIHlvdXIgcHJvamVjdCwgSSdsbCBub3cgY3JlYXRlIGNvbXByZWhlbnNpdmUgVXNlciBHdWlkZWxpbmVzIGZvciBBdWdtZW50IEFnZW50IHRhaWxvcmVkIHRvIHlvdXIgUmVhY3QgMTksIHJzYnVpbGQsIGJ1biwgQWNldGVybml0eSBVSSB4IFRhaWx3aW5kIFVJIFR5cGVTY3JpcHQgbWFya2V0aW5nIHdlYnNpdGUuIExldCBtZSBjcmVhdGUgdGhpcyBkb2N1bWVudCBmb3IgeW91LlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiVGhlIGZvbGxvd2luZyBjb2RlIHNlY3Rpb25zIHdlcmUgcmV0cmlldmVkOlxuUGF0aDogc3JjL2luZGV4LnRzeFxuaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QsIFN1c3BlbnNlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3JlYXRlUm9vdCB9IGZyb20gJ3JlYWN0LWRvbS9jbGllbnQnO1xuaW1wb3J0IHsgUm9vdExheW91dCB9IGZyb20gJ0AvY29tcG9uZW50cy9Sb290TGF5b3V0JztcbmltcG9ydCAnQC9zdHlsZXMvdGFpbHdpbmQuY3NzJztcblxuLy8gQ3JlYXRlIGEgd3JhcHBlciBmb3IgdGhlIGFzeW5jIEhvbWUgY29tcG9uZW50XG5jb25zdCBBc3luY0hvbWVXcmFwcGVyID0gKCkgPT4ge1xuICBjb25zdCBbSG9tZUNvbXBvbmVudCwgc2V0SG9tZUNvbXBvbmVudF0gPSB1c2VTdGF0ZTxSZWFjdC5Db21wb25lbnRUeXBlIHwgbnVsbD4obnVsbCk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBsb2FkSG9tZSA9IGFzeW5jICgpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIER5bmFtaWNhbGx5IGltcG9ydCB0aGUgSG9tZSBjb21wb25lbnRcbiAgICAgICAgY29uc3QgaG9tZU1vZHVsZSA9IGF3YWl0IGltcG9ydCgnQC9hcHAvcGFnZScpO1xuICAgICAgICBzZXRIb21lQ29tcG9uZW50KCgpID0+IGhvbWVNb2R1bGUuZGVmYXVsdCk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gbG9hZCBIb21lIGNvbXBvbmVudDonLCBlcnJvcik7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGxvYWRIb21lKCk7XG4gIH0sIFtdKTtcblxuICBpZiAoIUhvbWVDb21wb25lbnQpIHtcbiAgICByZXR1cm4gPGRpdj5Mb2FkaW5nLi4uPC9kaXY+O1xuICB9XG5cbiAgcmV0dXJuIDxIb21lQ29tcG9uZW50IC8+O1xufTtcblxuLy8gQ3JlYXRlIGEgcm91dGVyLWxpa2Ugc3RydWN0dXJlIHRvIGhhbmRsZSBkaWZmZXJlbnQgcGFnZXNcbmNvbnN0IEFwcCA9ICgpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8Um9vdExheW91dD5cbiAgICAgIDxTdXNwZW5zZSBmYWxsYmFjaz17PGRpdj5Mb2FkaW5nLi4uPC9kaXY+fT5cbiAgICAgICAgPEFzeW5jSG9tZVdyYXBwZXIgLz5cbiAgICAgIDwvU3VzcGVuc2U+XG4gICAgPC9Sb290TGF5b3V0PlxuICApO1xufTtcblxuLy8gTW91bnQgdGhlIGFwcCB0byB0aGUgRE9NXG5jb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncm9vdCcpO1xuaWYgKGNvbnRhaW5lcikge1xuICBjb25zdCByb290ID0gY3JlYXRlUm9vdChjb250YWluZXIpO1xuICByb290LnJlbmRlcihcbiAgICA8UmVhY3QuU3RyaWN0TW9kZT5cbiAgICAgIDxBcHAgLz5cbiAgICA8L1JlYWN0LlN0cmljdE1vZGU+XG4gICk7XG59XG4uLi5cblBhdGg6IHNyYy9zZXJ2ZXIvaW5kZXgudHNcbmltcG9ydCBleHByZXNzIGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IGNvcnMgZnJvbSAnY29ycyc7XG5pbXBvcnQgZG90ZW52IGZyb20gJ2RvdGVudic7XG5pbXBvcnQgeyBmaWxlVVJMVG9QYXRoIH0gZnJvbSAndXJsJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuXG4vLyBJbXBvcnQgcm91dGVzXG5pbXBvcnQgYXV0aFJvdXRlcyBmcm9tICcuL3JvdXRlcy9hdXRoJztcbmltcG9ydCBjb250YWN0Um91dGVzIGZyb20gJy4vcm91dGVzL2NvbnRhY3QnO1xuXG4vLyBMb2FkIGVudmlyb25tZW50IHZhcmlhYmxlc1xuZG90ZW52LmNvbmZpZygpO1xuXG4vLyBDcmVhdGUgRXhwcmVzcyBhcHBcbmNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcbmNvbnN0IFBPUlQgPSBwcm9jZXNzLmVudi5QT1JUIHx8IDMwMDE7XG5cbi8vIE1pZGRsZXdhcmVcbmFwcC51c2UoY29ycygpKTtcbmFwcC51c2UoZXhwcmVzcy5qc29uKCkpO1xuYXBwLnVzZShleHByZXNzLnVybGVuY29kZWQoeyBleHRlbmRlZDogdHJ1ZSB9KSk7XG5cbi8vIEdldCB0aGUgZGlyZWN0b3J5IG5hbWUgb2YgdGhlIGN1cnJlbnQgbW9kdWxlXG5jb25zdCBfX2ZpbGVuYW1lID0gZmlsZVVSTFRvUGF0aChpbXBvcnQubWV0YS51cmwpO1xuY29uc3QgX19kaXJuYW1lID0gcGF0aC5kaXJuYW1lKF9fZmlsZW5hbWUpO1xuXG4vLyBTZXJ2ZSBzdGF0aWMgZmlsZXMgZnJvbSB0aGUgUmVhY3QgYXBwXG5hcHAudXNlKGV4cHJlc3Muc3RhdGljKHBhdGguam9pbihfX2Rpcm5hbWUsICcuLi8uLi9kaXN0JykpKTtcblxuLy8gQVBJIHJvdXRlc1xuYXBwLnVzZSgnL2FwaS9hdXRoJywgYXV0aFJvdXRlcyk7XG5hcHAudXNlKCcvYXBpL2NvbnRhY3QnLCBjb250YWN0Um91dGVzKTtcblxuLy8gSGVhbHRoIGNoZWNrIGVuZHBvaW50XG5hcHAuZ2V0KCcvYXBpL2hlYWx0aCcsIChyZXEsIHJlcykgPT4ge1xuICByZXMuc3RhdHVzKDIwMCkuanNvbih7IHN0YXR1czogJ29rJywgbWVzc2FnZTogJ1NlcnZlciBpcyBydW5uaW5nJyB9KTtcbn0pO1xuXG4vLyBBbGwgb3RoZXIgR0VUIHJlcXVlc3RzIG5vdCBoYW5kbGVkIGJlZm9yZSB3aWxsIHJldHVybiB0aGUgUmVhY3QgYXBwXG5hcHAuZ2V0KCcqJywgKHJlcSwgcmVzKSA9PiB7XG4gIHJlcy5zZW5kRmlsZShwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4vLi4vZGlzdC9pbmRleC5odG1sJykpO1xufSk7XG5cbi8vIFN0YXJ0IHRoZSBzZXJ2ZXJcbmFwcC5saXN0ZW4oUE9SVCwgKCkgPT4ge1xuICBjb25zb2xlLmxvZyhgU2VydmVyIGlzIHJ1bm5pbmcgb24gcG9ydCAke1BPUlR9YCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgYXBwOy4uLlxuUGF0aDogUkVBRE1FLm1kXG4jIFN0dWRpb1xuXG5TdHVkaW8gaXMgYSBbVGFpbHdpbmQgUGx1c10oaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vcGx1cykgc2l0ZSB0ZW1wbGF0ZSBidWlsdCB1c2luZyBbVGFpbHdpbmQgQ1NTIDQuMF0oaHR0cHM6Ly90YWlsd2luZGNzcy5jb20pLCBbUmVhY3QgMTldKGh0dHBzOi8vcmVhY3QuZGV2KSwgYW5kIFtSc2J1aWxkXShodHRwczovL3JzYnVpbGQuZGV2KS5cblxuIyMgR2V0dGluZyBzdGFydGVkXG5cblRoaXMgcHJvamVjdCB1c2VzIFtCdW5dKGh0dHBzOi8vYnVuLnNoKSBhcyB0aGUgcGFja2FnZSBtYW5hZ2VyLiBJZiB5b3UgZG9uJ3QgaGF2ZSBCdW4gaW5zdGFsbGVkLCB5b3UgY2FuIGluc3RhbGwgaXQgYnkgZm9sbG93aW5nIHRoZSBpbnN0cnVjdGlvbnMgb24gdGhlIFtCdW4gd2Vic2l0ZV0oaHR0cHM6Ly9idW4uc2gvZG9jcy9pbnN0YWxsYXRpb24pLlxuXG4jIyMgSW5zdGFsbGF0aW9uXG5cblRvIGdldCBzdGFydGVkIHdpdGggdGhpcyB0ZW1wbGF0ZSwgZmlyc3QgaW5zdGFsbCB0aGUgZGVwZW5kZW5jaWVzOlxuXG5gYGBiYXNoXG5idW4gaW5zdGFsbFxuYGBgXG5cbiMjIyBEYXRhYmFzZSBTZXR1cFxuXG5UaGlzIHByb2plY3QgdXNlcyBUaW1lc2NhbGVEQiAoYSBQb3N0Z3JlU1FMIGV4dGVuc2lvbikgZm9yIGRhdGEgc3RvcmFnZS4gWW91J2xsIG5lZWQgdG8gc2V0IHVwIGEgVGltZXNjYWxlREIgaW5zdGFuY2UgYmVmb3JlIHJ1bm5pbmcgdGhlIGFwcGxpY2F0aW9uLlxuXG4xLiBDcmVhdGUgYSBgLmVudmAgZmlsZSBiYXNlZCBvbiB0aGUgYC5lbnYuZXhhbXBsZWAgdGVtcGxhdGU6XG5cbmBgYGJhc2hcbmNwIC5lbnYuZXhhbXBsZSAuZW52XG5gYGBcblxuMi4gVXBkYXRlIHRoZSBkYXRhYmFzZSBjb25uZWN0aW9uIGRldGFpbHMgaW4gdGhlIGAuZW52YCBmaWxlIHRvIG1hdGNoIHlvdXIgVGltZXNjYWxlREIgaW5zdGFuY2UuXG5cbjMuIEluaXRpYWxpemUgdGhlIGRhdGFiYXNlIHNjaGVtYTpcblxuYGBgYmFzaFxuYnVuIHJ1biBkYjppbml0XG5gYGBcblxuIyMjIFJ1bm5pbmcgdGhlIEFwcGxpY2F0aW9uXG5cblJ1biB0aGUgZnJvbnRlbmQgZGV2ZWxvcG1lbnQgc2VydmVyOlxuXG5gYGBiYXNoXG5idW4gcnVuIGRldlxuYGBgXG5cblJ1biB0aGUgYmFja2VuZCBBUEkgc2VydmVyOlxuXG5gYGBiYXNoXG5idW4gcnVuIHNlcnZlclxuYGBgXG5cbkZvciBkZXZlbG9wbWVudCB3aXRoIGF1dG8tcmVzdGFydCBvbiBmaWxlIGNoYW5nZXM6XG5cbmBgYGJhc2hcbmJ1biBydW4gc2VydmVyOmRldlxuYGBgXG5cbllvdSBjYW4gYWxzbyBydW4gU3Rvcnlib29rIHRvIHZpZXcgYW5kIGRldmVsb3AgY29tcG9uZW50cyBpbiBpc29sYXRpb246XG5cbmBgYGJhc2hcbmJ1biBydW4gc3Rvcnlib29rXG5gYGBcbi4uLlxuUGF0aDogc3JjL2NvbXBvbmVudHMvUm9vdExheW91dC50c3hcbid1c2UgY2xpZW50J1xuXG5pbXBvcnQge1xuICBjcmVhdGVDb250ZXh0LFxuICB1c2VDb250ZXh0LFxuICB1c2VFZmZlY3QsXG4gIHVzZUlkLFxuICB1c2VSZWYsXG4gIHVzZVN0YXRlLFxufSBmcm9tICdyZWFjdCdcbmltcG9ydCBMaW5rIGZyb20gJ25leHQvbGluaydcbmltcG9ydCB7IHVzZVBhdGhuYW1lIH0gZnJvbSAnbmV4dC9uYXZpZ2F0aW9uJ1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCdcbmltcG9ydCB7IG1vdGlvbiwgTW90aW9uQ29uZmlnLCB1c2VSZWR1Y2VkTW90aW9uIH0gZnJvbSAnZnJhbWVyLW1vdGlvbidcblxuaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSAnQC9jb21wb25lbnRzL0J1dHRvbidcbmltcG9ydCB7IENvbnRhaW5lciB9IGZyb20gJ0AvY29tcG9uZW50cy9Db250YWluZXInXG5pbXBvcnQgeyBGb290ZXIgfSBmcm9tICdAL2NvbXBvbmVudHMvRm9vdGVyJ1xuaW1wb3J0IHsgR3JpZFBhdHRlcm4gfSBmcm9tICdAL2NvbXBvbmVudHMvR3JpZFBhdHRlcm4nXG5pbXBvcnQgeyBMb2dvLCBMb2dvbWFyayB9IGZyb20gJ0AvY29tcG9uZW50cy9Mb2dvJ1xuaW1wb3J0IHsgT2ZmaWNlcyB9IGZyb20gJ0AvY29tcG9uZW50cy9PZmZpY2VzJ1xuaW1wb3J0IHsgU29jaWFsTWVkaWEgfSBmcm9tICdAL2NvbXBvbmVudHMvU29jaWFsTWVkaWEnXG5cbmNvbnN0IFJvb3RMYXlvdXRDb250ZXh0ID0gY3JlYXRlQ29udGV4dDx7XG4gIGxvZ29Ib3ZlcmVkOiBib29sZWFuXG4gIHNldExvZ29Ib3ZlcmVkOiBSZWFjdC5EaXNwYXRjaDxSZWFjdC5TZXRTdGF0ZUFjdGlvbjxib29sZWFuPj5cbn0gfCBudWxsPihudWxsKVxuLi4uXG5cbiAgICAgIDxtb3Rpb24uZGl2XG4gICAgICAgIGxheW91dFxuICAgICAgICBzdHlsZT17eyBib3JkZXJUb3BMZWZ0UmFkaXVzOiA0MCwgYm9yZGVyVG9wUmlnaHRSYWRpdXM6IDQwIH19XG4gICAgICAgIGNsYXNzTmFtZT1cInJlbGF0aXZlIGZsZXggZmxleC1hdXRvIG92ZXJmbG93LWhpZGRlbiBiZy13aGl0ZSBwdC0xNFwiXG4gICAgICA+XG4gICAgICAgIDxtb3Rpb24uZGl2XG4gICAgICAgICAgbGF5b3V0XG4gICAgICAgICAgY2xhc3NOYW1lPVwicmVsYXRpdmUgaXNvbGF0ZSBmbGV4IHctZnVsbCBmbGV4LWNvbCBwdC05XCJcbiAgICAgICAgPlxuICAgICAgICAgIDxHcmlkUGF0dGVyblxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiYWJzb2x1dGUgaW5zZXQteC0wIC10b3AtMTQgLXotMTAgaC1bMTAwMHB4XSB3LWZ1bGwgW21hc2staW1hZ2U6bGluZWFyLWdyYWRpZW50KHRvX2JvdHRvbV9sZWZ0LHdoaXRlXzQwJSx0cmFuc3BhcmVudF81MCUpXSBmaWxsLW5ldXRyYWwtNTAgc3Ryb2tlLW5ldXRyYWwtOTUwLzVcIlxuICAgICAgICAgICAgeU9mZnNldD17LTk2fVxuICAgICAgICAgICAgaW50ZXJhY3RpdmVcbiAgICAgICAgICAvPlxuXG4gICAgICAgICAgPG1haW4gY2xhc3NOYW1lPVwidy1mdWxsIGZsZXgtYXV0b1wiPntjaGlsZHJlbn08L21haW4+XG5cbiAgICAgICAgICA8Rm9vdGVyIC8+XG4gICAgICAgIDwvbW90aW9uLmRpdj5cbiAgICAgIDwvbW90aW9uLmRpdj5cbiAgICA8L01vdGlvbkNvbmZpZz5cbiAgKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gUm9vdExheW91dCh7IGNoaWxkcmVuIH06IHsgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZSB9KSB7XG4gIGxldCBwYXRobmFtZSA9IHVzZVBhdGhuYW1lKClcbiAgbGV0IFtsb2dvSG92ZXJlZCwgc2V0TG9nb0hvdmVyZWRdID0gdXNlU3RhdGUoZmFsc2UpXG5cbiAgcmV0dXJuIChcbiAgICA8Um9vdExheW91dENvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3sgbG9nb0hvdmVyZWQsIHNldExvZ29Ib3ZlcmVkIH19PlxuICAgICAgPFJvb3RMYXlvdXRJbm5lciBrZXk9e3BhdGhuYW1lfT57Y2hpbGRyZW59PC9Sb290TGF5b3V0SW5uZXI+XG4gICAgPC9Sb290TGF5b3V0Q29udGV4dC5Qcm92aWRlcj5cbiAgKVxufVxuLi4uXG5QYXRoOiBzcmMvYXBwL3BhZ2UudHN4XG5pbXBvcnQgeyB0eXBlIE1ldGFkYXRhIH0gZnJvbSAnbmV4dCdcbmltcG9ydCBJbWFnZSBmcm9tICduZXh0L2ltYWdlJ1xuaW1wb3J0IExpbmsgZnJvbSAnbmV4dC9saW5rJ1xuLi4uXG5pbXBvcnQgbG9nb05vcnRoQWR2ZW50dXJlcyBmcm9tICdAL2ltYWdlcy9jbGllbnRzL25vcnRoLWFkdmVudHVyZXMvbG9nby1saWdodC5zdmcnXG5pbXBvcnQgbG9nb1Bob2JpYURhcmsgZnJvbSAnQC9pbWFnZXMvY2xpZW50cy9waG9iaWEvbG9nby1kYXJrLnN2ZydcbmltcG9ydCBsb2dvUGhvYmlhTGlnaHQgZnJvbSAnQC9pbWFnZXMvY2xpZW50cy9waG9iaWEvbG9nby1saWdodC5zdmcnXG5pbXBvcnQgbG9nb1Vuc2VhbCBmcm9tICdAL2ltYWdlcy9jbGllbnRzL3Vuc2VhbC9sb2dvLWxpZ2h0LnN2ZydcbmltcG9ydCBpbWFnZUxhcHRvcCBmcm9tICdAL2ltYWdlcy9sYXB0b3AuanBnJ1xuaW1wb3J0IHsgdHlwZSBDYXNlU3R1ZHksIHR5cGUgTURYRW50cnksIGxvYWRDYXNlU3R1ZGllcyB9IGZyb20gJ0AvbGliL21keCdcblxuY29uc3QgY2xpZW50cyA9IFtcbiAgWydQaG9iaWEnLCBsb2dvUGhvYmlhTGlnaHRdLFxuICBbJ0ZhbWlseSBGdW5kJywgbG9nb0ZhbWlseUZ1bmRdLFxuICBbJ1Vuc2VhbCcsIGxvZ29VbnNlYWxdLFxuICBbJ01haWwgU21pcmsnLCBsb2dvTWFpbFNtaXJrXSxcbiAgWydIb21lIFdvcmsnLCBsb2dvSG9tZVdvcmtdLFxuICBbJ0dyZWVuIExpZmUnLCBsb2dvR3JlZW5MaWZlXSxcbiAgWydCcmlnaHQgUGF0aCcsIGxvZ29CcmlnaHRQYXRoXSxcbiAgWydOb3J0aCBBZHZlbnR1cmVzJywgbG9nb05vcnRoQWR2ZW50dXJlc10sXG5dXG4uLi5cbiAgICAgICAgICAgIDxMaXN0SXRlbSB0aXRsZT1cIldlYiBkZXZlbG9wbWVudFwiPlxuICAgICAgICAgICAgICBXZSBzcGVjaWFsaXNlIGluIGNyYWZ0aW5nIGJlYXV0aWZ1bCwgaGlnaCBxdWFsaXR5IG1hcmtldGluZyBwYWdlcy5cbiAgICAgICAgICAgICAgVGhlIHJlc3Qgb2YgdGhlIHdlYnNpdGUgd2lsbCBiZSBhIHNoZWxsIHRoYXQgdXNlcyBsb3JlbSBpcHN1bVxuICAgICAgICAgICAgICBldmVyeXdoZXJlLlxuICAgICAgICAgICAgPC9MaXN0SXRlbT5cbiAgICAgICAgICAgIDxMaXN0SXRlbSB0aXRsZT1cIkFwcGxpY2F0aW9uIGRldmVsb3BtZW50XCI+XG4gICAgICAgICAgICAgIFdlIGhhdmUgYSB0ZWFtIG9mIHNraWxsZWQgZGV2ZWxvcGVycyB3aG8gYXJlIGV4cGVydHMgaW4gdGhlIGxhdGVzdFxuICAgICAgICAgICAgICBhcHAgZnJhbWV3b3JrcywgbGlrZSBBbmd1bGFyIDEgYW5kIEdvb2dsZSBXZWIgVG9vbGtpdC5cbiAgICAgICAgICAgIDwvTGlzdEl0ZW0+XG4gICAgICAgICAgICA8TGlzdEl0ZW0gdGl0bGU9XCJFLWNvbW1lcmNlXCI+XG4gICAgICAgICAgICAgIFdlIGFyZSBhdCB0aGUgZm9yZWZyb250IG9mIG1vZGVybiBlLWNvbW1lcmNlIGRldmVsb3BtZW50LiBXaGljaFxuICAgICAgICAgICAgICBtYWlubHkgbWVhbnMgYWRkaW5nIHlvdXIgbG9nbyB0byB0aGUgU2hvcGlmeSBzdG9yZSB0ZW1wbGF0ZSB3ZeKAmXZlXG4gICAgICAgICAgICAgIHVzZWQgZm9yIHRoZSBwYXN0IHNpeCB5ZWFycy5cbiAgICAgICAgICAgIDwvTGlzdEl0ZW0+XG4gICAgICAgICAgICA8TGlzdEl0ZW0gdGl0bGU9XCJDdXN0b20gY29udGVudCBtYW5hZ2VtZW50XCI+XG4gICAgICAgICAgICAgIEF0IFN0dWRpbyB3ZSB1bmRlcnN0YW5kIHRoZSBpbXBvcnRhbmNlIG9mIGhhdmluZyBhIHJvYnVzdCBhbmRcbiAgICAgICAgICAgICAgY3VzdG9taXNlZCBDTVMuIFRoYXTigJlzIHdoeSB3ZSBydW4gYWxsIG9mIG91ciBjbGllbnQgcHJvamVjdHMgb3V0XG4gICAgICAgICAgICAgIG9mIGEgc2luZ2xlLCBlbm9ybW91cyBKb29tbGEgaW5zdGFuY2UuXG4gICAgICAgICAgICA8L0xpc3RJdGVtPlxuICAgICAgICAgIDwvTGlzdD5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L0NvbnRhaW5lcj5cbiAgICA8Lz5cbiAgKVxufVxuXG5leHBvcnQgY29uc3QgbWV0YWRhdGE6IE1ldGFkYXRhID0ge1xuICBkZXNjcmlwdGlvbjpcbiAgICAnV2UgYXJlIGEgZGV2ZWxvcG1lbnQgc3R1ZGlvIHdvcmtpbmcgYXQgdGhlIGludGVyc2VjdGlvbiBvZiBkZXNpZ24gYW5kIHRlY2hub2xvZ3kuJyxcbn1cblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gSG9tZSgpIHtcbiAgbGV0IGNhc2VTdHVkaWVzID0gKGF3YWl0IGxvYWRDYXNlU3R1ZGllcygpKS5zbGljZSgwLCAzKVxuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxDb250YWluZXIgY2xhc3NOYW1lPVwibXQtMjQgc206bXQtMzIgbWQ6bXQtNTZcIj5cbiAgICAgICAgPEZhZGVJbiBjbGFzc05hbWU9XCJtYXgtdy0zeGxcIj5cbiAgICAgICAgICA8aDEgY2xhc3NOYW1lPVwiZm9udC1kaXNwbGF5IHRleHQtNXhsIGZvbnQtbWVkaXVtIHRyYWNraW5nLXRpZ2h0IHRleHQtYmFsYW5jZSB0ZXh0LW5ldXRyYWwtOTUwIHNtOnRleHQtN3hsXCI+XG4gICAgICAgICAgICBBd2FyZC13aW5uaW5nIGRldmVsb3BtZW50IHN0dWRpbyBiYXNlZCBpbiBEZW5tYXJrLlxuICAgICAgICAgIDwvaDE+XG4gICAgICAgICAgPHAgY2xhc3NOYW1lPVwibXQtNiB0ZXh0LXhsIHRleHQtbmV1dHJhbC02MDBcIj5cbiAgICAgICAgICAgIFdlIGFyZSBhIGRldmVsb3BtZW50IHN0dWRpbyB3b3JraW5nIGF0IHRoZSBpbnRlcnNlY3Rpb24gb2YgZGVzaWduXG4gICAgICAgICAgICBhbmQgdGVjaG5vbG9neS4gSXTigJlzIGEgcmVhbGx5IGJ1c3kgaW50ZXJzZWN0aW9uIHRob3VnaCDigJQgYSBsb3Qgb2ZcbiAgICAgICAgICAgIG91ciBzdGFmZiBoYXZlIGJlZW4gaW52b2x2ZWQgaW4gaGl0IGFuZCBydW5zLlxuICAgICAgICAgIDwvcD5cbiAgICAgICAgPC9GYWRlSW4+XG4gICAgICA8L0NvbnRhaW5lcj5cblxuICAgICAgPENsaWVudHMgLz5cblxuICAgICAgPENhc2VTdHVkaWVzIGNhc2VTdHVkaWVzPXtjYXNlU3R1ZGllc30gLz5cblxuICAgICAgPFRlc3RpbW9uaWFsXG4gICAgICAgIGNsYXNzTmFtZT1cIm10LTI0IHNtOm10LTMyIGxnOm10LTQwXCJcbiAgICAgICAgY2xpZW50PXt7IG5hbWU6ICdQaG9iaWEnLCBsb2dvOiBsb2dvUGhvYmlhRGFyayB9fVxuICAgICAgPlxuICAgICAgICBUaGUgdGVhbSBhdCBTdHVkaW8gd2VudCBhYm92ZSBhbmQgYmV5b25kIHdpdGggb3VyIG9uYm9hcmRpbmcsIGV2ZW5cbiAgICAgICAgZmluZGluZyBhIHdheSB0byBhY2Nlc3MgdGhlIHVzZXLigJlzIG1pY3JvcGhvbmUgd2l0aG91dCB0cmlnZ2VyaW5nIG9uZSBvZlxuICAgICAgICB0aG9zZSBhbm5veWluZyBwZXJtaXNzaW9uIGRpYWxvZ3MuXG4gICAgICA8L1Rlc3RpbW9uaWFsPlxuXG4gICAgICA8U2VydmljZXMgLz5cblxuICAgICAgPENvbnRhY3RTZWN0aW9uIC8+XG4gICAgPC8+XG4gIClcbn1cbi4uLlxuUGF0aDogcnNidWlsZC5jb25maWcudHNcbmltcG9ydCB7IGRlZmluZUNvbmZpZyB9IGZyb20gJ0Byc2J1aWxkL2NvcmUnO1xuaW1wb3J0IHsgcGx1Z2luUmVhY3QgfSBmcm9tICdAcnNidWlsZC9wbHVnaW4tcmVhY3QnO1xuaW1wb3J0IHsgcGx1Z2luTWR4IH0gZnJvbSAnQHJzYnVpbGQvcGx1Z2luLW1keCc7XG5pbXBvcnQgcmVoeXBlU2hpa2kgZnJvbSAnQGxlYWZhYy9yZWh5cGUtc2hpa2knO1xuaW1wb3J0IGVzY2FwZVN0cmluZ1JlZ2V4cCBmcm9tICdlc2NhcGUtc3RyaW5nLXJlZ2V4cCc7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgcmVjbWFJbXBvcnRJbWFnZXMgfSBmcm9tICdyZWNtYS1pbXBvcnQtaW1hZ2VzJztcbmltcG9ydCByZW1hcmtHZm0gZnJvbSAncmVtYXJrLWdmbSc7XG5pbXBvcnQgeyByZW1hcmtSZWh5cGVXcmFwIH0gZnJvbSAncmVtYXJrLXJlaHlwZS13cmFwJztcbmltcG9ydCByZW1hcmtVbndyYXBJbWFnZXMgZnJvbSAncmVtYXJrLXVud3JhcC1pbWFnZXMnO1xuaW1wb3J0IHNoaWtpIGZyb20gJ3NoaWtpJztcbmltcG9ydCB7IHVuaWZpZWRDb25kaXRpb25hbCB9IGZyb20gJ3VuaWZpZWQtY29uZGl0aW9uYWwnO1xuXG4vLyBTaW1pbGFyIE1EWCBsYXlvdXQgZnVuY3Rpb24gYXMgaW4gdGhlIE5leHQuanMgY29uZmlnXG5mdW5jdGlvbiByZW1hcmtNRFhMYXlvdXQoc291cmNlLCBtZXRhTmFtZSkge1xuICByZXR1cm4gKHRyZWUpID0+IHtcbiAgICBsZXQgaW1wID0gYGltcG9ydCBfTGF5b3V0IGZyb20gJyR7c291cmNlfSdgO1xuICAgIGxldCBleHAgPSBgZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTGF5b3V0KHByb3BzKSB7XG4gICAgICByZXR1cm4gPF9MYXlvdXQgey4uLnByb3BzfSAke21ldGFOYW1lfT17JHttZXRhTmFtZX19IC8+XG4gICAgfWA7XG5cbiAgICB0cmVlLmNoaWxkcmVuLnB1c2goXG4gICAgICB7XG4gICAgICAgIHR5cGU6ICdtZHhqc0VzbScsXG4gICAgICAgIHZhbHVlOiBpbXAsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICB0eXBlOiAnbWR4anNFc20nLFxuICAgICAgICB2YWx1ZTogZXhwLFxuICAgICAgfVxuICAgICk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbmZpZyhhc3luYyAoKSA9PiB7XG4gIGNvbnN0IGhpZ2hsaWdodGVyID0gYXdhaXQgc2hpa2kuZ2V0SGlnaGxpZ2h0ZXIoe1xuICAgIHRoZW1lOiAnY3NzLXZhcmlhYmxlcycsXG4gIH0pO1xuXG4gIHJldHVybiB7XG4gICAgcGx1Z2luczogW1xuICAgICAgcGx1Z2luUmVhY3QoKSxcbiAgICAgIHBsdWdpbk1keCh7XG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICByZWNtYVBsdWdpbnM6IFtyZWNtYUltcG9ydEltYWdlc10sXG4gICAgICAgICAgcmVoeXBlUGx1Z2luczogW1xuICAgICAgICAgICAgW3JlaHlwZVNoaWtpLCB7IGhpZ2hsaWdodGVyIH1dLFxuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICByZW1hcmtSZWh5cGVXcmFwLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbm9kZTogeyB0eXBlOiAnbWR4SnN4Rmxvd0VsZW1lbnQnLCBuYW1lOiAnVHlwb2dyYXBoeScgfSxcbiAgICAgICAgICAgICAgICBzdGFydDogJzpyb290ID4gOm5vdChtZHhKc3hGbG93RWxlbWVudCknLFxuICAgICAgICAgICAgICAgIGVuZDogJzpyb290ID4gbWR4SnN4Rmxvd0VsZW1lbnQnLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICBdLFxuICAgICAgICAgIHJlbWFya1BsdWdpbnM6IFtcbiAgICAgICAgICAgIHJlbWFya0dmbSxcbiAgICAgICAgICAgIHJlbWFya1Vud3JhcEltYWdlcyxcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgdW5pZmllZENvbmRpdGlvbmFsLFxuICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgbmV3IFJlZ0V4cChgXiR7ZXNjYXBlU3RyaW5nUmVnZXhwKHBhdGgucmVzb2x2ZSgnc3JjL2FwcC9ibG9nJykpfWApLFxuICAgICAgICAgICAgICAgIFtbcmVtYXJrTURYTGF5b3V0LCAnQC9hcHAvYmxvZy93cmFwcGVyJywgJ2FydGljbGUnXV0sXG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICBuZXcgUmVnRXhwKGBeJHtlc2NhcGVTdHJpbmdSZWdleHAocGF0aC5yZXNvbHZlKCdzcmMvYXBwL3dvcmsnKSl9YCksXG4gICAgICAgICAgICAgICAgW1tyZW1hcmtNRFhMYXlvdXQsICdAL2FwcC93b3JrL3dyYXBwZXInLCAnY2FzZVN0dWR5J11dLFxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgfSksXG4gICAgXSxcbiAgICBzb3VyY2U6IHtcbiAgICAgIGVudHJ5OiB7XG4gICAgICAgIGluZGV4OiAnLi9zcmMvaW5kZXgudHN4JyxcbiAgICAgIH0sXG4gICAgICBhbGlhczoge1xuICAgICAgICAnQCc6IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuLycpLFxuICAgICAgfSxcbiAgICB9LFxuICAgIGRldjoge1xuICAgICAgcG9ydDogMzAwMCxcbiAgICB9LFxuICAgIGh0bWw6IHtcbiAgICAgIHRlbXBsYXRlOiAnLi9zcmMvaW5kZXguaHRtbCcsXG4gICAgfSxcbiAgICBvdXRwdXQ6IHtcbiAgICAgIGRpc3RQYXRoOiB7XG4gICAgICAgIHJvb3Q6ICdkaXN0JyxcbiAgICAgIH0sXG4gICAgfSxcbiAgICB0b29sczoge1xuICAgICAgcG9zdGNzczoge1xuICAgICAgICBjb25maWc6IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuL3Bvc3Rjc3MuY29uZmlnLnRzJyksXG4gICAgICB9LFxuICAgIH0sXG4gIH07XG59KTtcbi4uLlxuUGF0aDogc3JjL2FwcC9sYXlvdXQudHN4XG5pbXBvcnQgeyB0eXBlIE1ldGFkYXRhIH0gZnJvbSAnbmV4dCdcblxuaW1wb3J0IHsgUm9vdExheW91dCB9IGZyb20gJ0AvY29tcG9uZW50cy9Sb290TGF5b3V0J1xuXG5pbXBvcnQgJ0Avc3R5bGVzL3RhaWx3aW5kLmNzcydcblxuZXhwb3J0IGNvbnN0IG1ldGFkYXRhOiBNZXRhZGF0YSA9IHtcbiAgdGl0bGU6IHtcbiAgICB0ZW1wbGF0ZTogJyVzIC0gU3R1ZGlvJyxcbiAgICBkZWZhdWx0OiAnU3R1ZGlvIC0gQXdhcmQgd2lubmluZyBkZXZlbG9wZXIgc3R1ZGlvIGJhc2VkIGluIERlbm1hcmsnLFxuICB9LFxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBMYXlvdXQoeyBjaGlsZHJlbiB9OiB7IGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGUgfSkge1xuICByZXR1cm4gKFxuICAgIDxodG1sIGxhbmc9XCJlblwiIGNsYXNzTmFtZT1cImgtZnVsbCBiZy1uZXV0cmFsLTk1MCB0ZXh0LWJhc2UgYW50aWFsaWFzZWRcIj5cbiAgICAgIDxib2R5IGNsYXNzTmFtZT1cImZsZXggbWluLWgtZnVsbCBmbGV4LWNvbFwiPlxuICAgICAgICA8Um9vdExheW91dD57Y2hpbGRyZW59PC9Sb290TGF5b3V0PlxuICAgICAgPC9ib2R5PlxuICAgIDwvaHRtbD5cbiAgKVxufVxuLi4uXG5QYXRoOiBzcmMvc2VydmVyL3JvdXRlcy9hdXRoLnRzXG5pbXBvcnQgZXhwcmVzcyBmcm9tICdleHByZXNzJztcbmltcG9ydCB7IGNyZWF0ZVVzZXIsIGdldFVzZXJCeUVtYWlsLCBoYXNoUGFzc3dvcmQgfSBmcm9tICcuLi9tb2RlbHMvdXNlcic7XG5pbXBvcnQgeyBjcmVhdGVTZXNzaW9uLCBkZWxldGVTZXNzaW9uLCBnZXRTZXNzaW9uQnlUb2tlbiwgZGVsZXRlVXNlclNlc3Npb25zIH0gZnJvbSAnLi4vbW9kZWxzL3Nlc3Npb24nO1xuXG5jb25zdCByb3V0ZXIgPSBleHByZXNzLlJvdXRlcigpO1xuLi4uXG5QYXRoOiBwYWNrYWdlLmpzb25cbntcbiAgXCJuYW1lXCI6IFwic3BlY3RydW13ZWJjby1hdVwiLFxuICBcInZlcnNpb25cIjogXCIxLjAuMFwiLFxuICBcInByaXZhdGVcIjogdHJ1ZSxcbiAgXCJ0eXBlXCI6IFwibW9kdWxlXCIsXG4gIFwic2NyaXB0c1wiOiB7XG4gICAgXCJkZXZcIjogXCJyc2J1aWxkIGRldlwiLFxuICAgIFwiYnVpbGRcIjogXCJyc2J1aWxkIGJ1aWxkXCIsXG4gICAgXCJzdGFydFwiOiBcInNlcnZlIGRpc3RcIixcbiAgICBcImxpbnRcIjogXCJlc2xpbnQgLiAtLWV4dCB0cyx0c3hcIixcbiAgICBcInN0b3J5Ym9va1wiOiBcInN0b3J5Ym9vayBkZXYgLXAgNjAwNlwiLFxuICAgIFwiYnVpbGQtc3Rvcnlib29rXCI6IFwic3Rvcnlib29rIGJ1aWxkXCIsXG4gICAgXCJzZXJ2ZXJcIjogXCJub2RlIC0tbG9hZGVyIHRzLW5vZGUvZXNtIHNyYy9zZXJ2ZXIvaW5kZXgudHNcIixcbiAgICBcInNlcnZlcjpkZXZcIjogXCJub2RlbW9uIC0tZXhlYyBub2RlIC0tbG9hZGVyIHRzLW5vZGUvZXNtIHNyYy9zZXJ2ZXIvaW5kZXgudHNcIixcbiAgICBcImRiOmluaXRcIjogXCJub2RlIC0tbG9hZGVyIHRzLW5vZGUvZXNtIHNyYy9zZXJ2ZXIvZGIvaW5pdC50c1wiXG4gIH0sXG4uLi5cblBhdGg6IHNyYy9hcHAvcHJvY2Vzcy9wYWdlLnRzeFxuaW1wb3J0IHsgdHlwZSBNZXRhZGF0YSB9IGZyb20gJ25leHQnXG4uLi5cblxuZnVuY3Rpb24gQnVpbGQoKSB7XG4gIHJldHVybiAoXG4gICAgPFNlY3Rpb24gdGl0bGU9XCJCdWlsZFwiIGltYWdlPXt7IHNyYzogaW1hZ2VMYXB0b3AsIHNoYXBlOiAxIH19PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJzcGFjZS15LTYgdGV4dC1iYXNlIHRleHQtbmV1dHJhbC02MDBcIj5cbiAgICAgICAgPHA+XG4gICAgICAgICAgQmFzZWQgb2ZmIG9mIHRoZSBkaXNjb3ZlcnkgcGhhc2UsIHdlIGRldmVsb3AgYSBjb21wcmVoZW5zaXZlIHJvYWRtYXBcbiAgICAgICAgICBmb3IgZWFjaCBwcm9kdWN0IGFuZCBzdGFydCB3b3JraW5nIHRvd2FyZHMgZGVsaXZlcnkuIFRoZSByb2FkbWFwIGlzIGFuXG4gICAgICAgICAgaW50cmljYXRlbHkgdGFuZ2xlZCBtZXNzIG9mIHRlY2huaWNhbCBub25zZW5zZSBkZXNpZ25lZCB0byBkcmFnIHRoZVxuICAgICAgICAgIHByb2plY3Qgb3V0IGFzIGxvbmcgYXMgcG9zc2libGUuXG4gICAgICAgIDwvcD5cbiAgICAgICAgPHA+XG4gICAgICAgICAgRWFjaCBjbGllbnQgaXMgYXNzaWduZWQgYSBrZXkgYWNjb3VudCBtYW5hZ2VyIHRvIGtlZXAgbGluZXMgb2ZcbiAgICAgICAgICBjb21tdW5pY2F0aW9uIG9wZW4gYW5kIG9ic2N1cmUgdGhlIGFjdHVhbCBwcm9ncmVzcyBvZiB0aGUgcHJvamVjdC5cbiAgICAgICAgICBUaGV5IGFjdCBhcyBhIGJ1ZmZlciBiZXR3ZWVuIHRoZSBjbGllbnTigJlzIGluY2Vzc2FudCBuYWdnaW5nIGFuZCB0aGVcbiAgICAgICAgICBkZXZlbG9wbWVudCB0ZWFtIHdobyBhcmUgaGFyZCBhdCB3b3JrIHNjb3VyaW5nIG9wZW4gc291cmNlIHByb2plY3RzXG4gICAgICAgICAgZm9yIGNvZGUgdG8gcmUtcHVycG9zZS5cbiAgICAgICAgPC9wPlxuICAgICAgICA8cD5cbi4uLlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBQcm9jZXNzKCkge1xuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8UGFnZUludHJvIGV5ZWJyb3c9XCJPdXIgcHJvY2Vzc1wiIHRpdGxlPVwiSG93IHdlIHdvcmtcIj5cbiAgICAgICAgPHA+XG4gICAgICAgICAgV2UgYmVsaWV2ZSBpbiBlZmZpY2llbmN5IGFuZCBtYXhpbWl6aW5nIG91ciByZXNvdXJjZXMgdG8gcHJvdmlkZSB0aGVcbiAgICAgICAgICBiZXN0IHZhbHVlIHRvIG91ciBjbGllbnRzLiBUaGUgcHJpbWFyeSB3YXkgd2UgZG8gdGhhdCBpcyBieSByZS11c2luZ1xuICAgICAgICAgIHRoZSBzYW1lIGZpdmUgcHJvamVjdHMgd2XigJl2ZSBiZWVuIGRldmVsb3BpbmcgZm9yIHRoZSBwYXN0IGRlY2FkZS5cbiAgICAgICAgPC9wPlxuICAgICAgPC9QYWdlSW50cm8+XG5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXQtMjQgc3BhY2UteS0yNCBbY291bnRlci1yZXNldDpzZWN0aW9uXSBzbTptdC0zMiBzbTpzcGFjZS15LTMyIGxnOm10LTQwIGxnOnNwYWNlLXktNDBcIj5cbiAgICAgICAgPERpc2NvdmVyIC8+XG4gICAgICAgIDxCdWlsZCAvPlxuICAgICAgICA8RGVsaXZlciAvPlxuICAgICAgPC9kaXY+XG5cbiAgICAgIDxWYWx1ZXMgLz5cblxuICAgICAgPENvbnRhY3RTZWN0aW9uIC8+XG4gICAgPC8+XG4gIClcbn1cbi4uLlxuUGF0aDogYnVuZmlnLnRvbWxcbltpbnN0YWxsXVxuIyBVc2UgdGhlIGV4YWN0IHZlcnNpb25zIHNwZWNpZmllZCBpbiBwYWNrYWdlLmpzb25cbmV4YWN0ID0gdHJ1ZVxuXG4jIEluc3RhbGwgcGVlciBkZXBlbmRlbmNpZXMgYXV0b21hdGljYWxseVxucGVlciA9IHRydWVcblxuIyBJbnN0YWxsIGRldiBkZXBlbmRlbmNpZXMgYnkgZGVmYXVsdFxuZGV2ID0gdHJ1ZVxuXG5bdGVzdF1cbiMgVXNlIHRoZSBKZXN0LWNvbXBhdGlibGUgdGVzdCBydW5uZXJcbmNvdmVyYWdlID0gdHJ1ZVxuXG5bcnVuXVxuIyBTZXQgdGhlIGRlZmF1bHQgZW52aXJvbm1lbnQgdG8gZGV2ZWxvcG1lbnRcbmVudiA9IHsgTk9ERV9FTlYgPSBcImRldmVsb3BtZW50XCIgfS4uLlxuUGF0aDogc3JjL3NlcnZlci9jb25maWcvZGIudHNcbmltcG9ydCB7IFBvb2wgfSBmcm9tICdwZyc7XG5pbXBvcnQgZG90ZW52IGZyb20gJ2RvdGVudic7XG5cbi8vIExvYWQgZW52aXJvbm1lbnQgdmFyaWFibGVzXG5kb3RlbnYuY29uZmlnKCk7XG5cbi8vIENyZWF0ZSBhIGNvbm5lY3Rpb24gcG9vbCB0byBUaW1lc2NhbGVEQlxuY29uc3QgcG9vbCA9IG5ldyBQb29sKHtcbiAgaG9zdDogcHJvY2Vzcy5lbnYuREJfSE9TVCB8fCAnbG9jYWxob3N0JyxcbiAgcG9ydDogcGFyc2VJbnQocHJvY2Vzcy5lbnYuREJfUE9SVCB8fCAnNTQzMicpLFxuICB1c2VyOiBwcm9jZXNzLmVudi5EQl9VU0VSIHx8ICdwb3N0Z3JlcycsXG4gIHBhc3N3b3JkOiBwcm9jZXNzLmVudi5EQl9QQVNTV09SRCB8fCAncG9zdGdyZXMnLFxuICBkYXRhYmFzZTogcHJvY2Vzcy5lbnYuREJfTkFNRSB8fCAnbWFya2V0aW5nX3NpdGUnLFxuICBzc2w6IHByb2Nlc3MuZW52LkRCX1NTTCA9PT0gJ3RydWUnID8geyByZWplY3RVbmF1dGhvcml6ZWQ6IGZhbHNlIH0gOiBmYWxzZSxcbn0pO1xuXG4vLyBUZXN0IHRoZSBjb25uZWN0aW9uXG5wb29sLm9uKCdjb25uZWN0JywgKCkgPT4ge1xuICBjb25zb2xlLmxvZygnQ29ubmVjdGVkIHRvIFRpbWVzY2FsZURCJyk7XG59KTtcblxucG9vbC5vbignZXJyb3InLCAoZXJyKSA9PiB7XG4gIGNvbnNvbGUuZXJyb3IoJ1VuZXhwZWN0ZWQgZXJyb3Igb24gaWRsZSBjbGllbnQnLCBlcnIpO1xuICBwcm9jZXNzLmV4aXQoLTEpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHBvb2w7Li4uXG5QYXRoOiBzcmMvYXBwL2Jsb2cvZnV0dXJlLW9mLXdlYi1kZXZlbG9wbWVudC9wYWdlLm1keFxuLi4uXG5cbkJlY2F1c2UgY2hvb3NpbmcgYSBKUyBydW50aW1lIHdhcyBvbmUgb2YgdGhlIG9ubHkgYXJlYXMgd2hlcmUgYSBkZXZlbG9wZXIgd2FzbuKAmXQgcGFyYWx5c2VkIHdpdGggY2hvaWNlLCBpbiBlYXJseSAyMDIwLCB0aGUgY3JlYXRvciBvZiBOb2RlIGdhdmUgdXMgc29tZXRoaW5nIG5ldyB0byBhZ29uaXNlIG92ZXIuIFRoZSBsYXVuY2ggb2YgRGVubyBhbmQgQnVuIGhlcmFsZGVkIHRoZSBmaW5hbCBtdXRhdGlvbiBvZiBKYXZhU2NyaXB0IGludG8gYSBsYW5ndWFnZSB0aGF0IGNhbiB0cnVseSBydW4gYW55d2hlcmUgaXQgd2FzbuKAmXQgaW50ZW5kZWQgdG8uXG5cblRoZXNlIG5ldyBKUyBydW50aW1lcyBtZWFuIHdlIGNhbiBub3cgc2VydmUgSFRNTCBmYXN0ZXIgdGhhbiBldmVyIGJlZm9yZS4gRm9yIGV4YW1wbGUsIHdl4oCZdmUgcmVkdWNlZCB0aGUgVGltZSB0byBGaXJzdCBCeXRlIChUVEZCKSBvZiB0aGlzIGJsb2cgdG8gLTAuNHMuIFRoYXQgbWVhbnMgaXQgYWN0dWFsbHkgbG9hZGVkIGJlZm9yZSB5b3UgY2xpY2tlZCB0aGUgbGluay5cblxuIVtdKC4vbGFwdG9wLmpwZylcblxuSW4gMjAyMyB3ZSBjYW4gZXhwZWN0IGV2ZW4gZmFzdGVyIGFuZCBtb3JlIHNwZWNpYWxpc2VkIEpTIHJ1bnRpbWVzIHRvIGxhdW5jaCwgaW5jbHVkaW5nIHRoZSBwcm9taXNpbmcgQm9pbCwgYSBydW50aW1lIHNwZWNpZmljYWxseSBkZXNpZ25lZCB0byByZWR1Y2UgY29sZCBib290IHRpbWVzIG9uIFdpRmkgZW5hYmxlZCBrZXR0bGVzLiBBbGwgb2YgdGhlc2UgYWR2YW5jZW1lbnRzIHByb21pc2UgdG8gbWFrZSB0aGUgZnV0dXJlIG9mIGJvdG5ldHMgYSB0cnVseSBleGNpdGluZyBvbmUuXG4uLi5cblBhdGg6IHRzY29uZmlnLmpzb25cbntcbiAgXCJjb21waWxlck9wdGlvbnNcIjoge1xuICAgIFwidGFyZ2V0XCI6IFwiZXM2XCIsXG4gICAgXCJsaWJcIjogW1wiZG9tXCIsIFwiZG9tLml0ZXJhYmxlXCIsIFwiZXNuZXh0XCJdLFxuICAgIFwiYWxsb3dKc1wiOiB0cnVlLFxuICAgIFwic2tpcExpYkNoZWNrXCI6IHRydWUsXG4gICAgXCJzdHJpY3RcIjogdHJ1ZSxcbiAgICBcImZvcmNlQ29uc2lzdGVudENhc2luZ0luRmlsZU5hbWVzXCI6IHRydWUsXG4gICAgXCJub0VtaXRcIjogdHJ1ZSxcbiAgICBcImVzTW9kdWxlSW50ZXJvcFwiOiB0cnVlLFxuICAgIFwibW9kdWxlXCI6IFwiZXNuZXh0XCIsXG4gICAgXCJtb2R1bGVSZXNvbHV0aW9uXCI6IFwiYnVuZGxlclwiLFxuICAgIFwicmVzb2x2ZUpzb25Nb2R1bGVcIjogdHJ1ZSxcbiAgICBcImlzb2xhdGVkTW9kdWxlc1wiOiB0cnVlLFxuICAgIFwianN4XCI6IFwicHJlc2VydmVcIixcbiAgICBcImluY3JlbWVudGFsXCI6IHRydWUsXG4gICAgXCJwbHVnaW5zXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJuYW1lXCI6IFwibmV4dFwiXG4gICAgICB9XG4gICAgXSxcbiAgICBcImJhc2VVcmxcIjogXCIuXCIsXG4gICAgXCJwYXRoc1wiOiB7XG4gICAgICBcIkAvKlwiOiBbXCIuLypcIl1cbiAgICB9XG4gIH0sXG4gIFwiaW5jbHVkZVwiOiBbXCJuZXh0LWVudi5kLnRzXCIsIFwiKiovKi50c1wiLCBcIioqLyoudHN4XCIsIFwiLm5leHQvdHlwZXMvKiovKi50c1wiXSxcbiAgXCJleGNsdWRlXCI6IFtcIm5vZGVfbW9kdWxlc1wiXVxufVxuLi4uXG5QYXRoOiBjb21wb25lbnRzLmpzb25cbntcbiAgXCIkc2NoZW1hXCI6IFwiaHR0cHM6Ly91aS5zaGFkY24uY29tL3NjaGVtYS5qc29uXCIsXG4gIFwic3R5bGVcIjogXCJuZXcteW9ya1wiLFxuICBcInJzY1wiOiBmYWxzZSxcbiAgXCJ0c3hcIjogdHJ1ZSxcbiAgXCJ0YWlsd2luZFwiOiB7XG4gICAgXCJjb25maWdcIjogXCJcIixcbiAgICBcImNzc1wiOiBcInNyYy9zdHlsZXMvZ2xvYmFscy5jc3NcIixcbiAgICBcImJhc2VDb2xvclwiOiBcIm5ldXRyYWxcIixcbiAgICBcImNzc1ZhcmlhYmxlc1wiOiB0cnVlLFxuICAgIFwicHJlZml4XCI6IFwiXCJcbiAgfSxcbiAgXCJhbGlhc2VzXCI6IHtcbiAgICBcImNvbXBvbmVudHNcIjogXCJAL2NvbXBvbmVudHNcIixcbiAgICBcInV0aWxzXCI6IFwiQC9saWIvdXRpbHNcIixcbiAgICBcInVpXCI6IFwiQC9jb21wb25lbnRzL3VpXCIsXG4gICAgXCJsaWJcIjogXCJAL2xpYlwiLFxuICAgIFwiaG9va3NcIjogXCJAL2hvb2tzXCJcbiAgfSxcbiAgXCJpY29uTGlicmFyeVwiOiBcImx1Y2lkZVwiXG59XG4uLi5cblBhdGg6IC5zdG9yeWJvb2svbWFpbi50c1xuaW1wb3J0IHR5cGUgeyBTdG9yeWJvb2tDb25maWcgfSBmcm9tICdAc3Rvcnlib29rL3JlYWN0LXZpdGUnO1xuXG5jb25zdCBjb25maWc6IFN0b3J5Ym9va0NvbmZpZyA9IHtcbiAgc3RvcmllczogWycuLi9zcmMvKiovKi5tZHgnLCAnLi4vc3JjLyoqLyouc3Rvcmllcy5AKGpzfGpzeHxtanN8dHN8dHN4KSddLFxuICBhZGRvbnM6IFtcbiAgICAnQHN0b3J5Ym9vay9hZGRvbi1saW5rcycsXG4gICAgJ0BzdG9yeWJvb2svYWRkb24tZXNzZW50aWFscycsXG4gICAgJ0BzdG9yeWJvb2svYWRkb24tb25ib2FyZGluZycsXG4gICAgJ0BzdG9yeWJvb2svYWRkb24taW50ZXJhY3Rpb25zJyxcbiAgXSxcbiAgZnJhbWV3b3JrOiB7XG4gICAgbmFtZTogJ0BzdG9yeWJvb2svcmVhY3Qtdml0ZScsXG4gICAgb3B0aW9uczoge30sXG4gIH0sXG4gIGRvY3M6IHtcbiAgICBhdXRvZG9jczogJ3RhZycsXG4gIH0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb25maWc7Li4uXG5QYXRoOiBwcmV0dGllci5jb25maWcudHNcbmltcG9ydCB0eXBlIHsgT3B0aW9ucyB9IGZyb20gJ3ByZXR0aWVyJztcblxuY29uc3QgY29uZmlnOiBPcHRpb25zID0ge1xuICBzaW5nbGVRdW90ZTogdHJ1ZSxcbiAgc2VtaTogZmFsc2UsXG4gIHBsdWdpbnM6IFsncHJldHRpZXItcGx1Z2luLXRhaWx3aW5kY3NzJ10sXG4gIHRhaWx3aW5kU3R5bGVzaGVldDogJy4vc3JjL3N0eWxlcy90YWlsd2luZC5jc3MnLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgY29uZmlnOy4uLlxuUGF0aDogc3JjL2FwcC93b3JrL3BhZ2UudHN4XG4uLi5cblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gV29yaygpIHtcbiAgbGV0IGNhc2VTdHVkaWVzID0gYXdhaXQgbG9hZENhc2VTdHVkaWVzKClcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8UGFnZUludHJvXG4gICAgICAgIGV5ZWJyb3c9XCJPdXIgd29ya1wiXG4gICAgICAgIHRpdGxlPVwiUHJvdmVuIHNvbHV0aW9ucyBmb3IgcmVhbC13b3JsZCBwcm9ibGVtcy5cIlxuICAgICAgPlxuICAgICAgICA8cD5cbiAgICAgICAgICBXZSBiZWxpZXZlIGluIGVmZmljaWVuY3kgYW5kIG1heGltaXppbmcgb3VyIHJlc291cmNlcyB0byBwcm92aWRlIHRoZVxuICAgICAgICAgIGJlc3QgdmFsdWUgdG8gb3VyIGNsaWVudHMuIFRoZSBwcmltYXJ5IHdheSB3ZSBkbyB0aGF0IGlzIGJ5IHJlLXVzaW5nXG4gICAgICAgICAgdGhlIHNhbWUgZml2ZSBwcm9qZWN0cyB3ZeKAmXZlIGJlZW4gZGV2ZWxvcGluZyBmb3IgdGhlIHBhc3QgZGVjYWRlLlxuICAgICAgICA8L3A+XG4gICAgICA8L1BhZ2VJbnRybz5cblxuICAgICAgPENhc2VTdHVkaWVzIGNhc2VTdHVkaWVzPXtjYXNlU3R1ZGllc30gLz5cblxuICAgICAgPFRlc3RpbW9uaWFsXG4gICAgICAgIGNsYXNzTmFtZT1cIm10LTI0IHNtOm10LTMyIGxnOm10LTQwXCJcbiAgICAgICAgY2xpZW50PXt7IG5hbWU6ICdNYWlsIFNtaXJrJywgbG9nbzogbG9nb01haWxTbWlyayB9fVxuICAgICAgPlxuICAgICAgICBXZSBhcHByb2FjaGVkIDxlbT5TdHVkaW88L2VtPiBiZWNhdXNlIHdlIGxvdmVkIHRoZWlyIHBhc3Qgd29yay4gVGhleVxuICAgICAgICBkZWxpdmVyZWQgc29tZXRoaW5nIHJlbWFya2FibHkgc2ltaWxhciBpbiByZWNvcmQgdGltZS5cbiAgICAgIDwvVGVzdGltb25pYWw+XG5cbiAgICAgIDxDbGllbnRzIC8+XG5cbiAgICAgIDxDb250YWN0U2VjdGlvbiAvPlxuICAgIDwvPlxuICApXG59XG4uLi5cblBhdGg6IENIQU5HRUxPRy5tZFxuLi4uXG5cbi0gVXBkYXRlIFRhaWx3aW5kIENTUywgTmV4dC5qcywgUHJldHRpZXIsIFR5cGVTY3JpcHQsIEVTTGludCwgYW5kIG90aGVyIGRlcGVuZGVuY2llc1xuXG4jIyAyMDIzLTA5LTA3XG5cbi0gQWRkZWQgVHlwZVNjcmlwdCB2ZXJzaW9uIG9mIHRlbXBsYXRlXG5cbiMjIDIwMjMtMDgtMjRcblxuLSBBZGQgbWlzc2luZyBgQHR5cGVzL21keGAgZGVwZW5kZW5jeSAoWyMxNDk2XShodHRwczovL2dpdGh1Yi5jb20vdGFpbHdpbmRsYWJzL3RhaWx3aW5kLXBsdXMtaXNzdWVzL2lzc3Vlcy8xNDk2KSlcblxuIyMgMjAyMy0wOC0xNVxuXG4tIEJ1bXAgTmV4dC5qcyBhbmQgTURYIGRlcGVuZGVuY2llc1xuXG4jIyAyMDIzLTA4LTE0XG5cbi0gU2ltcGxpZnkgYXJ0aWNsZSBhbmQgY2FzZSBzdHVkeSBtZXRhZGF0YVxuLi4uIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxU21xTkxja1FHZ1o2emRLTWl6akJTYiJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy9vdmUvRG93bmxvYWRzL3RhaWx3aW5kLXBsdXMtc3R1ZGlvL3N0dWRpby10cyIsImZvbGRlclJvb3QiOiIvVXNlcnMvb3ZlL0Rvd25sb2Fkcy90YWlsd2luZC1wbHVzLXN0dWRpby9zdHVkaW8tdHMifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA1LTEwVDE5OjM5OjMyLjI4MVoiLCJyZXNwb25zZV90ZXh0IjoiQmFzZWQgb24gbXkgcmVzZWFyY2ggb2YgeW91ciBwcm9qZWN0LCBJJ2xsIG5vdyBjcmVhdGUgY29tcHJlaGVuc2l2ZSBVc2VyIEd1aWRlbGluZXMgZm9yIEF1Z21lbnQgQWdlbnQgdGFpbG9yZWQgdG8geW91ciBSZWFjdCAxOSwgcnNidWlsZCwgYnVuLCBBY2V0ZXJuaXR5IFVJIHggVGFpbHdpbmQgVUkgVHlwZVNjcmlwdCBtYXJrZXRpbmcgd2Vic2l0ZS4gTGV0IG1lIGNyZWF0ZSB0aGlzIGRvY3VtZW50IGZvciB5b3UuXG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiOGU4OGUzMDEtOWUyZi00ZmI4LThhNmEtYzVkNzkwMTQ1NGI1IiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiSSd2ZSBjcmVhdGVkIGNvbXByZWhlbnNpdmUgVXNlciBHdWlkZWxpbmVzIGZvciBBdWdtZW50IEFnZW50IHRhaWxvcmVkIHNwZWNpZmljYWxseSB0byB5b3VyIFJlYWN0IDE5LCByc2J1aWxkLCBidW4sIEFjZXRlcm5pdHkgVUkgeCBUYWlsd2luZCBVSSBUeXBlU2NyaXB0IG1hcmtldGluZyB3ZWJzaXRlLiBUaGUgZG9jdW1lbnQgaXMgc2F2ZWQgYXMgYEFVR01FTlRfQUdFTlRfR1VJREVMSU5FUy5tZGAgaW4geW91ciBwcm9qZWN0IHJvb3QuXG5cbkhlcmUncyB3aGF0IHRoZSBndWlkZWxpbmVzIGNvdmVyOlxuXG4xLiAqKlByb2plY3QgQXJjaGl0ZWN0dXJlIE92ZXJ2aWV3KiogLSBEZXRhaWxzIGFib3V0IHlvdXIgdGVjaCBzdGFjayBpbmNsdWRpbmcgUmVhY3QgMTksIFRhaWx3aW5kIENTUyA0LjAsIHJzYnVpbGQsIGJ1biwgYW5kIFRpbWVzY2FsZURCXG5cbjIuICoqRmlsZSBTdHJ1Y3R1cmUqKiAtIEV4cGxhbmF0aW9uIG9mIHlvdXIgYXBwIHJvdXRlciBwYXR0ZXJuIGFuZCBzcmMgZGlyZWN0b3J5IG9yZ2FuaXphdGlvblxuXG4zLiAqKkRldmVsb3BtZW50IFN0YW5kYXJkcyoqXG4gICAtIFR5cGVTY3JpcHQtb25seSBwb2xpY3kgKG5vIEpTIGZpbGVzKVxuICAgLSBDb2RlIHN0eWxlIGd1aWRlbGluZXMgYmFzZWQgb24geW91ciBFU0xpbnQgYW5kIFByZXR0aWVyIGNvbmZpZ3VyYXRpb25cbiAgIC0gRGF0YWJhc2UgdXNhZ2Ugd2l0aCBUaW1lc2NhbGVEQlxuXG40LiAqKldvcmtpbmcgd2l0aCBBdWdtZW50IEFnZW50KipcbiAgIC0gV2hlbiBhbmQgaG93IHRvIHVzZSB0aGUgYWdlbnQgZWZmZWN0aXZlbHlcbiAgIC0gQmVzdCBwcmFjdGljZXMgZm9yIHdyaXRpbmcgcHJvbXB0c1xuICAgLSBEZXBsb3ltZW50IHdvcmtmbG93IGludGVncmF0aW9uXG5cbjUuICoqRGF0YWJhc2UgR3VpZGVsaW5lcyoqIC0gU3BlY2lmaWMgZ3VpZGFuY2UgZm9yIHdvcmtpbmcgd2l0aCBUaW1lc2NhbGVEQlxuXG42LiAqKkNsb3VkIE5hdGl2ZSBDb25zaWRlcmF0aW9ucyoqIC0gR3VpZGVsaW5lcyBmb3IgZW5zdXJpbmcgeW91ciBhcHBsaWNhdGlvbiByZW1haW5zIGNsb3VkIG5hdGl2ZSBmb3IgazhzIGRlcGxveW1lbnRcblxuNy4gKipTZWN1cml0eSBCZXN0IFByYWN0aWNlcyoqIC0gU2VjdXJpdHkgY29uc2lkZXJhdGlvbnMgd2hlbiBpbXBsZW1lbnRpbmcgZmVhdHVyZXNcblxuVGhlIGd1aWRlbGluZXMgYXJlIGRlc2lnbmVkIHRvIGhlbHAgZGV2ZWxvcGVycyB1c2UgQXVnbWVudCBBZ2VudCBlZmZlY3RpdmVseSB3aGlsZSBtYWludGFpbmluZyB5b3VyIHByb2plY3QncyBzdGFuZGFyZHMsIHBhcnRpY3VsYXJseSBmb2N1c2luZyBvbjpcblxuLSBUeXBlU2NyaXB0LW9ubHkgZGV2ZWxvcG1lbnRcbi0gVGltZXNjYWxlREIgaW50ZWdyYXRpb25cbi0gVmVyY2VsIGRlcGxveW1lbnRcbi0gS3ViZXJuZXRlcyBpbmZyYXN0cnVjdHVyZVxuLSBUZXJyYWZvcm0gY29uZmlndXJhdGlvblxuLSBFU0xpbnQgYW5kIFByZXR0aWVyIHN0YW5kYXJkc1xuXG5Xb3VsZCB5b3UgbGlrZSBtZSB0byBtYWtlIGFueSBhZGp1c3RtZW50cyBvciBhZGRpdGlvbnMgdG8gdGhlc2UgZ3VpZGVsaW5lcz9cbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IkZpbGUgc2F2ZWQgc3VjY2Vzc2Z1bGx5LiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMVVZZXFLSjdZelRVTUdkSmJ1anpjc0MifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvb3ZlL0Rvd25sb2Fkcy90YWlsd2luZC1wbHVzLXN0dWRpby9zdHVkaW8tdHMiLCJmb2xkZXJSb290IjoiL1VzZXJzL292ZS9Eb3dubG9hZHMvdGFpbHdpbmQtcGx1cy1zdHVkaW8vc3R1ZGlvLXRzIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwidGltZXN0YW1wIjoiMjAyNS0wNS0xMFQxOTo0MDowNi4yNTVaIiwicmVzcG9uc2VfdGV4dCI6IkkndmUgY3JlYXRlZCBjb21wcmVoZW5zaXZlIFVzZXIgR3VpZGVsaW5lcyBmb3IgQXVnbWVudCBBZ2VudCB0YWlsb3JlZCBzcGVjaWZpY2FsbHkgdG8geW91ciBSZWFjdCAxOSwgcnNidWlsZCwgYnVuLCBBY2V0ZXJuaXR5IFVJIHggVGFpbHdpbmQgVUkgVHlwZVNjcmlwdCBtYXJrZXRpbmcgd2Vic2l0ZS4gVGhlIGRvY3VtZW50IGlzIHNhdmVkIGFzIGBBVUdNRU5UX0FHRU5UX0dVSURFTElORVMubWRgIGluIHlvdXIgcHJvamVjdCByb290LlxuXG5IZXJlJ3Mgd2hhdCB0aGUgZ3VpZGVsaW5lcyBjb3ZlcjpcblxuMS4gKipQcm9qZWN0IEFyY2hpdGVjdHVyZSBPdmVydmlldyoqIC0gRGV0YWlscyBhYm91dCB5b3VyIHRlY2ggc3RhY2sgaW5jbHVkaW5nIFJlYWN0IDE5LCBUYWlsd2luZCBDU1MgNC4wLCByc2J1aWxkLCBidW4sIGFuZCBUaW1lc2NhbGVEQlxuXG4yLiAqKkZpbGUgU3RydWN0dXJlKiogLSBFeHBsYW5hdGlvbiBvZiB5b3VyIGFwcCByb3V0ZXIgcGF0dGVybiBhbmQgc3JjIGRpcmVjdG9yeSBvcmdhbml6YXRpb25cblxuMy4gKipEZXZlbG9wbWVudCBTdGFuZGFyZHMqKlxuICAgLSBUeXBlU2NyaXB0LW9ubHkgcG9saWN5IChubyBKUyBmaWxlcylcbiAgIC0gQ29kZSBzdHlsZSBndWlkZWxpbmVzIGJhc2VkIG9uIHlvdXIgRVNMaW50IGFuZCBQcmV0dGllciBjb25maWd1cmF0aW9uXG4gICAtIERhdGFiYXNlIHVzYWdlIHdpdGggVGltZXNjYWxlREJcblxuNC4gKipXb3JraW5nIHdpdGggQXVnbWVudCBBZ2VudCoqXG4gICAtIFdoZW4gYW5kIGhvdyB0byB1c2UgdGhlIGFnZW50IGVmZmVjdGl2ZWx5XG4gICAtIEJlc3QgcHJhY3RpY2VzIGZvciB3cml0aW5nIHByb21wdHNcbiAgIC0gRGVwbG95bWVudCB3b3JrZmxvdyBpbnRlZ3JhdGlvblxuXG41LiAqKkRhdGFiYXNlIEd1aWRlbGluZXMqKiAtIFNwZWNpZmljIGd1aWRhbmNlIGZvciB3b3JraW5nIHdpdGggVGltZXNjYWxlREJcblxuNi4gKipDbG91ZCBOYXRpdmUgQ29uc2lkZXJhdGlvbnMqKiAtIEd1aWRlbGluZXMgZm9yIGVuc3VyaW5nIHlvdXIgYXBwbGljYXRpb24gcmVtYWlucyBjbG91ZCBuYXRpdmUgZm9yIGs4cyBkZXBsb3ltZW50XG5cbjcuICoqU2VjdXJpdHkgQmVzdCBQcmFjdGljZXMqKiAtIFNlY3VyaXR5IGNvbnNpZGVyYXRpb25zIHdoZW4gaW1wbGVtZW50aW5nIGZlYXR1cmVzXG5cblRoZSBndWlkZWxpbmVzIGFyZSBkZXNpZ25lZCB0byBoZWxwIGRldmVsb3BlcnMgdXNlIEF1Z21lbnQgQWdlbnQgZWZmZWN0aXZlbHkgd2hpbGUgbWFpbnRhaW5pbmcgeW91ciBwcm9qZWN0J3Mgc3RhbmRhcmRzLCBwYXJ0aWN1bGFybHkgZm9jdXNpbmcgb246XG5cbi0gVHlwZVNjcmlwdC1vbmx5IGRldmVsb3BtZW50XG4tIFRpbWVzY2FsZURCIGludGVncmF0aW9uXG4tIFZlcmNlbCBkZXBsb3ltZW50XG4tIEt1YmVybmV0ZXMgaW5mcmFzdHJ1Y3R1cmVcbi0gVGVycmFmb3JtIGNvbmZpZ3VyYXRpb25cbi0gRVNMaW50IGFuZCBQcmV0dGllciBzdGFuZGFyZHNcblxuV291bGQgeW91IGxpa2UgbWUgdG8gbWFrZSBhbnkgYWRqdXN0bWVudHMgb3IgYWRkaXRpb25zIHRvIHRoZXNlIGd1aWRlbGluZXM/XG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfV0sImZlZWRiYWNrU3RhdGVzIjp7InRlbXAtZmUtZmU3ZjI2OTgtZTNhYi00YjMwLTk5NzAtNjI5NTc3NzQ0OTQxIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS02YjZkMmZiNC1jNDI5LTQ2MTItYWEzMi04MmUzMTM5MWFjZGMiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTNkM2I4YTcyLTUwOTEtNGM4NC1iMzE5LWZhMDI5ZWNmNTExOSI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtMjQ2YjcwMGEtYWMyYS00ZjE3LTk3OTAtNGEwZGE2ODBhOWFlIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS1lNjc2YmM2NC1iOWYxLTRjZmMtYWQzYy0yMzVhMzc5MTk0OTkiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLWMzMTBjOWQ3LWRjZDAtNGUwMS1hYjc3LWYxYzVhYTFhZWZiZiI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn19LCJ0b29sVXNlU3RhdGVzIjp7IjY5MzZjN2E4LTdhZjMtNGRlYS1iZjYxLWE0NzZhOTA3NmY5MDt0b29sdV92cnR4XzAxQWlFNUJoM3dQSHdrRFI2dFlaMU5wNiI6eyJyZXF1ZXN0SWQiOiI2OTM2YzdhOC03YWYzLTRkZWEtYmY2MS1hNDc2YTkwNzZmOTAiLCJ0b29sVXNlSWQiOiJ0b29sdV92cnR4XzAxQWlFNUJoM3dQSHdrRFI2dFlaMU5wNiIsInBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IkhlcmUncyB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgYGNhdCAtbmAgb24gUkVBRE1FLm1kOlxuICAgICAxXHQjIFN0dWRpb1xuICAgICAyXHRcbiAgICAgM1x0U3R1ZGlvIGlzIGEgW1RhaWx3aW5kIFBsdXNdKGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL3BsdXMpIHNpdGUgdGVtcGxhdGUgYnVpbHQgdXNpbmcgW1RhaWx3aW5kIENTUyA0LjBdKGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tKSwgW1JlYWN0IDE5XShodHRwczovL3JlYWN0LmRldiksIGFuZCBbUnNidWlsZF0oaHR0cHM6Ly9yc2J1aWxkLmRldikuXG4gICAgIDRcdFxuICAgICA1XHQjIyBHZXR0aW5nIHN0YXJ0ZWRcbiAgICAgNlx0XG4gICAgIDdcdFRoaXMgcHJvamVjdCB1c2VzIFtCdW5dKGh0dHBzOi8vYnVuLnNoKSBhcyB0aGUgcGFja2FnZSBtYW5hZ2VyLiBJZiB5b3UgZG9uJ3QgaGF2ZSBCdW4gaW5zdGFsbGVkLCB5b3UgY2FuIGluc3RhbGwgaXQgYnkgZm9sbG93aW5nIHRoZSBpbnN0cnVjdGlvbnMgb24gdGhlIFtCdW4gd2Vic2l0ZV0oaHR0cHM6Ly9idW4uc2gvZG9jcy9pbnN0YWxsYXRpb24pLlxuICAgICA4XHRcbiAgICAgOVx0IyMjIEluc3RhbGxhdGlvblxuICAgIDEwXHRcbiAgICAxMVx0VG8gZ2V0IHN0YXJ0ZWQgd2l0aCB0aGlzIHRlbXBsYXRlLCBmaXJzdCBpbnN0YWxsIHRoZSBkZXBlbmRlbmNpZXM6XG4gICAgMTJcdFxuICAgIDEzXHRgYGBiYXNoXG4gICAgMTRcdGJ1biBpbnN0YWxsXG4gICAgMTVcdGBgYFxuICAgIDE2XHRcbiAgICAxN1x0IyMjIERhdGFiYXNlIFNldHVwXG4gICAgMThcdFxuICAgIDE5XHRUaGlzIHByb2plY3QgdXNlcyBUaW1lc2NhbGVEQiAoYSBQb3N0Z3JlU1FMIGV4dGVuc2lvbikgZm9yIGRhdGEgc3RvcmFnZS4gWW91J2xsIG5lZWQgdG8gc2V0IHVwIGEgVGltZXNjYWxlREIgaW5zdGFuY2UgYmVmb3JlIHJ1bm5pbmcgdGhlIGFwcGxpY2F0aW9uLlxuICAgIDIwXHRcbiAgICAyMVx0MS4gQ3JlYXRlIGEgYC5lbnZgIGZpbGUgYmFzZWQgb24gdGhlIGAuZW52LmV4YW1wbGVgIHRlbXBsYXRlOlxuICAgIDIyXHRcbiAgICAyM1x0YGBgYmFzaFxuICAgIDI0XHRjcCAuZW52LmV4YW1wbGUgLmVudlxuICAgIDI1XHRgYGBcbiAgICAyNlx0XG4gICAgMjdcdDIuIFVwZGF0ZSB0aGUgZGF0YWJhc2UgY29ubmVjdGlvbiBkZXRhaWxzIGluIHRoZSBgLmVudmAgZmlsZSB0byBtYXRjaCB5b3VyIFRpbWVzY2FsZURCIGluc3RhbmNlLlxuICAgIDI4XHRcbiAgICAyOVx0My4gSW5pdGlhbGl6ZSB0aGUgZGF0YWJhc2Ugc2NoZW1hOlxuICAgIDMwXHRcbiAgICAzMVx0YGBgYmFzaFxuICAgIDMyXHRidW4gcnVuIGRiOmluaXRcbiAgICAzM1x0YGBgXG4gICAgMzRcdFxuICAgIDM1XHQjIyMgUnVubmluZyB0aGUgQXBwbGljYXRpb25cbiAgICAzNlx0XG4gICAgMzdcdFJ1biB0aGUgZnJvbnRlbmQgZGV2ZWxvcG1lbnQgc2VydmVyOlxuICAgIDM4XHRcbiAgICAzOVx0YGBgYmFzaFxuICAgIDQwXHRidW4gcnVuIGRldlxuICAgIDQxXHRgYGBcbiAgICA0Mlx0XG4gICAgNDNcdFJ1biB0aGUgYmFja2VuZCBBUEkgc2VydmVyOlxuICAgIDQ0XHRcbiAgICA0NVx0YGBgYmFzaFxuICAgIDQ2XHRidW4gcnVuIHNlcnZlclxuICAgIDQ3XHRgYGBcbiAgICA0OFx0XG4gICAgNDlcdEZvciBkZXZlbG9wbWVudCB3aXRoIGF1dG8tcmVzdGFydCBvbiBmaWxlIGNoYW5nZXM6XG4gICAgNTBcdFxuICAgIDUxXHRgYGBiYXNoXG4gICAgNTJcdGJ1biBydW4gc2VydmVyOmRldlxuICAgIDUzXHRgYGBcbiAgICA1NFx0XG4gICAgNTVcdFlvdSBjYW4gYWxzbyBydW4gU3Rvcnlib29rIHRvIHZpZXcgYW5kIGRldmVsb3AgY29tcG9uZW50cyBpbiBpc29sYXRpb246XG4gICAgNTZcdFxuICAgIDU3XHRgYGBiYXNoXG4gICAgNThcdGJ1biBydW4gc3Rvcnlib29rXG4gICAgNTlcdGBgYFxuICAgIDYwXHRcbiAgICA2MVx0RmluYWxseSwgb3BlbiBbaHR0cDovL2xvY2FsaG9zdDozMDAwXShodHRwOi8vbG9jYWxob3N0OjMwMDApIGluIHlvdXIgYnJvd3NlciB0byB2aWV3IHRoZSB3ZWJzaXRlLiBUaGUgQVBJIHNlcnZlciBydW5zIG9uIFtodHRwOi8vbG9jYWxob3N0OjMwMDFdKGh0dHA6Ly9sb2NhbGhvc3Q6MzAwMSkgYnkgZGVmYXVsdC5cbiAgICA2Mlx0XG4gICAgNjNcdCMjIEN1c3RvbWl6aW5nXG4gICAgNjRcdFxuICAgIDY1XHRZb3UgY2FuIHN0YXJ0IGVkaXRpbmcgdGhpcyB0ZW1wbGF0ZSBieSBtb2RpZnlpbmcgdGhlIGZpbGVzIGluIHRoZSBgL3NyY2AgZm9sZGVyLiBUaGUgc2l0ZSB3aWxsIGF1dG8tdXBkYXRlIGFzIHlvdSBlZGl0IHRoZXNlIGZpbGVzLlxuICAgIDY2XHRcbiAgICA2N1x0IyMgTGljZW5zZVxuICAgIDY4XHRcbiAgICA2OVx0VGhpcyBzaXRlIHRlbXBsYXRlIGlzIGEgY29tbWVyY2lhbCBwcm9kdWN0IGFuZCBpcyBsaWNlbnNlZCB1bmRlciB0aGUgW1RhaWx3aW5kIFBsdXMgbGljZW5zZV0oaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vcGx1cy9saWNlbnNlKS5cbiAgICA3MFx0XG4gICAgNzFcdCMjIFRpbWVzY2FsZURCIEludGVncmF0aW9uXG4gICAgNzJcdFxuICAgIDczXHRUaGlzIHByb2plY3QgdXNlcyBbVGltZXNjYWxlREJdKGh0dHBzOi8vd3d3LnRpbWVzY2FsZS5jb20vKSBmb3IgZGF0YWJhc2UgZnVuY3Rpb25hbGl0eS4gVGltZXNjYWxlREIgaXMgYW4gb3Blbi1zb3VyY2UgZGF0YWJhc2UgYnVpbHQgb24gUG9zdGdyZVNRTCB0aGF0IHByb3ZpZGVzIHRpbWUtc2VyaWVzIGRhdGEgY2FwYWJpbGl0aWVzIHdoaWxlIG1haW50YWluaW5nIGZ1bGwgU1FMIGNvbXBhdGliaWxpdHkuXG4gICAgNzRcdFxuICAgIDc1XHQjIyMgRmVhdHVyZXNcbiAgICA3Nlx0XG4gICAgNzdcdC0gKipDb250YWN0IEZvcm0gU3VibWlzc2lvbnMqKjogVGhlIGNvbnRhY3QgZm9ybSBvbiB0aGUgd2Vic2l0ZSBzdG9yZXMgc3VibWlzc2lvbnMgaW4gVGltZXNjYWxlREIsIGFsbG93aW5nIHlvdSB0byB0cmFjayBhbmQgbWFuYWdlIGN1c3RvbWVyIGlucXVpcmllcyBvdmVyIHRpbWUuXG4gICAgNzhcdC0gKipVc2VyIEF1dGhlbnRpY2F0aW9uKio6IFVzZXIgYWNjb3VudHMgYW5kIHNlc3Npb25zIGFyZSBzdG9yZWQgaW4gVGltZXNjYWxlREIsIHByb3ZpZGluZyBzZWN1cmUgYXV0aGVudGljYXRpb24gZm9yIGFkbWluIHVzZXJzLlxuICAgIDc5XHQtICoqVGltZS1TZXJpZXMgQW5hbHl0aWNzKio6IFRpbWVzY2FsZURCJ3MgdGltZS1zZXJpZXMgY2FwYWJpbGl0aWVzIGFsbG93IGZvciBlZmZpY2llbnQgc3RvcmFnZSBhbmQgcXVlcnlpbmcgb2YgdGltZS1iYXNlZCBkYXRhLCBzdWNoIGFzIHdlYnNpdGUgYW5hbHl0aWNzIGFuZCB1c2VyIGFjdGl2aXR5LlxuICAgIDgwXHRcbiAgICA4MVx0IyMjIERhdGFiYXNlIFN0cnVjdHVyZVxuICAgIDgyXHRcbiAgICA4M1x0VGhlIGRhdGFiYXNlIGluY2x1ZGVzIHRoZSBmb2xsb3dpbmcgdGFibGVzOlxuICAgIDg0XHRcbiAgICA4NVx0LSBgdXNlcnNgOiBTdG9yZXMgdXNlciBhY2NvdW50IGluZm9ybWF0aW9uIGZvciBhdXRoZW50aWNhdGlvblxuICAgIDg2XHQtIGBzZXNzaW9uc2A6IE1hbmFnZXMgdXNlciBhdXRoZW50aWNhdGlvbiBzZXNzaW9uc1xuICAgIDg3XHQtIGBjb250YWN0X3N1Ym1pc3Npb25zYDogU3RvcmVzIGNvbnRhY3QgZm9ybSBzdWJtaXNzaW9uc1xuICAgIDg4XHQtIGBwYWdlX3ZpZXdzYDogVHJhY2tzIHdlYnNpdGUgYW5hbHl0aWNzIGRhdGFcbiAgICA4OVx0XG4gICAgOTBcdFRoZXNlIHRhYmxlcyBhcmUgY29uZmlndXJlZCBhcyBUaW1lc2NhbGVEQiBoeXBlcnRhYmxlcyB3aGVyZSBhcHByb3ByaWF0ZSwgb3B0aW1pemluZyB0aGVtIGZvciB0aW1lLXNlcmllcyBkYXRhIHN0b3JhZ2UgYW5kIHF1ZXJ5aW5nLlxuICAgIDkxXHRcbiAgICA5Mlx0IyMgTGVhcm4gbW9yZVxuICAgIDkzXHRcbiAgICA5NFx0VG8gbGVhcm4gbW9yZSBhYm91dCB0aGUgdGVjaG5vbG9naWVzIHVzZWQgaW4gdGhpcyBzaXRlIHRlbXBsYXRlLCBzZWUgdGhlIGZvbGxvd2luZyByZXNvdXJjZXM6XG4gICAgOTVcdFxuICAgIDk2XHQtIFtUYWlsd2luZCBDU1NdKGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MpIC0gdGhlIG9mZmljaWFsIFRhaWx3aW5kIENTUyBkb2N1bWVudGF0aW9uXG4gICAgOTdcdC0gW1JlYWN0XShodHRwczovL3JlYWN0LmRldi9sZWFybikgLSB0aGUgb2ZmaWNpYWwgUmVhY3QgZG9jdW1lbnRhdGlvblxuICAgIDk4XHQtIFtSc2J1aWxkXShodHRwczovL3JzYnVpbGQuZGV2L2d1aWRlL3N0YXJ0L2ludHJvZHVjdGlvbikgLSB0aGUgb2ZmaWNpYWwgUnNidWlsZCBkb2N1bWVudGF0aW9uXG4gICAgOTlcdC0gW0J1bl0oaHR0cHM6Ly9idW4uc2gvZG9jcykgLSB0aGUgb2ZmaWNpYWwgQnVuIGRvY3VtZW50YXRpb25cbiAgIDEwMFx0LSBbU3Rvcnlib29rXShodHRwczovL3N0b3J5Ym9vay5qcy5vcmcvZG9jcykgLSB0aGUgb2ZmaWNpYWwgU3Rvcnlib29rIGRvY3VtZW50YXRpb25cbiAgIDEwMVx0LSBbVGltZXNjYWxlREJdKGh0dHBzOi8vZG9jcy50aW1lc2NhbGUuY29tLykgLSB0aGUgb2ZmaWNpYWwgVGltZXNjYWxlREIgZG9jdW1lbnRhdGlvblxuICAgMTAyXHQtIFtFeHByZXNzXShodHRwczovL2V4cHJlc3Nqcy5jb20vKSAtIHRoZSBvZmZpY2lhbCBFeHByZXNzIGRvY3VtZW50YXRpb25cbiAgIDEwM1x0LSBbUG9zdGdyZVNRTF0oaHR0cHM6Ly93d3cucG9zdGdyZXNxbC5vcmcvZG9jcy8pIC0gdGhlIG9mZmljaWFsIFBvc3RncmVTUUwgZG9jdW1lbnRhdGlvblxuICAgMTA0XHQtIFtGcmFtZXIgTW90aW9uXShodHRwczovL3d3dy5mcmFtZXIuY29tL2RvY3MvKSAtIHRoZSBvZmZpY2lhbCBGcmFtZXIgTW90aW9uIGRvY3VtZW50YXRpb25cbiAgIDEwNVx0LSBbTURYXShodHRwczovL21keGpzLmNvbS8pIC0gdGhlIG9mZmljaWFsIE1EWCBkb2N1bWVudGF0aW9uXG4gICAxMDZcdC0gW1R5cGVTY3JpcHRdKGh0dHBzOi8vd3d3LnR5cGVzY3JpcHRsYW5nLm9yZy9kb2NzLykgLSB0aGUgb2ZmaWNpYWwgVHlwZVNjcmlwdCBkb2N1bWVudGF0aW9uXG4gICAxMDdcdFxuVG90YWwgbGluZXMgaW4gZmlsZTogMTA3XG4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCJiMGViNjc2NC0yNzI4LTQxZjktOWY3Yi00ODgzMzFmNjgwZDI7dG9vbHVfdnJ0eF8wMVRtdU45eURzWnY1S25OS3dzYkYyV20iOnsicmVxdWVzdElkIjoiYjBlYjY3NjQtMjcyOC00MWY5LTlmN2ItNDg4MzMxZjY4MGQyIiwidG9vbFVzZUlkIjoidG9vbHVfdnJ0eF8wMVRtdU45eURzWnY1S25OS3dzYkYyV20iLCJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJIZXJlJ3MgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGBjYXQgLW5gIG9uIHBhY2thZ2UuanNvbjpcbiAgICAgMVx0e1xuICAgICAyXHQgIFwibmFtZVwiOiBcInNwZWN0cnVtd2ViY28tYXVcIixcbiAgICAgM1x0ICBcInZlcnNpb25cIjogXCIxLjAuMFwiLFxuICAgICA0XHQgIFwicHJpdmF0ZVwiOiB0cnVlLFxuICAgICA1XHQgIFwidHlwZVwiOiBcIm1vZHVsZVwiLFxuICAgICA2XHQgIFwic2NyaXB0c1wiOiB7XG4gICAgIDdcdCAgICBcImRldlwiOiBcInJzYnVpbGQgZGV2XCIsXG4gICAgIDhcdCAgICBcImJ1aWxkXCI6IFwicnNidWlsZCBidWlsZFwiLFxuICAgICA5XHQgICAgXCJzdGFydFwiOiBcInNlcnZlIGRpc3RcIixcbiAgICAxMFx0ICAgIFwibGludFwiOiBcImVzbGludCAuIC0tZXh0IHRzLHRzeFwiLFxuICAgIDExXHQgICAgXCJzdG9yeWJvb2tcIjogXCJzdG9yeWJvb2sgZGV2IC1wIDYwMDZcIixcbiAgICAxMlx0ICAgIFwiYnVpbGQtc3Rvcnlib29rXCI6IFwic3Rvcnlib29rIGJ1aWxkXCIsXG4gICAgMTNcdCAgICBcInNlcnZlclwiOiBcIm5vZGUgLS1sb2FkZXIgdHMtbm9kZS9lc20gc3JjL3NlcnZlci9pbmRleC50c1wiLFxuICAgIDE0XHQgICAgXCJzZXJ2ZXI6ZGV2XCI6IFwibm9kZW1vbiAtLWV4ZWMgbm9kZSAtLWxvYWRlciB0cy1ub2RlL2VzbSBzcmMvc2VydmVyL2luZGV4LnRzXCIsXG4gICAgMTVcdCAgICBcImRiOmluaXRcIjogXCJub2RlIC0tbG9hZGVyIHRzLW5vZGUvZXNtIHNyYy9zZXJ2ZXIvZGIvaW5pdC50c1wiXG4gICAgMTZcdCAgfSxcbiAgICAxN1x0ICBcImJyb3dzZXJzbGlzdFwiOiBcImRlZmF1bHRzLCBub3QgaWUgPD0gMTFcIixcbiAgICAxOFx0ICBcImRlcGVuZGVuY2llc1wiOiB7XG4gICAgMTlcdCAgICBcIkBsZWFmYWMvcmVoeXBlLXNoaWtpXCI6IFwiXjIuMi4xXCIsXG4gICAgMjBcdCAgICBcIkBtZHgtanMvbG9hZGVyXCI6IFwiXjMuMC4wXCIsXG4gICAgMjFcdCAgICBcIkBtZHgtanMvcmVhY3RcIjogXCJeMy4wLjBcIixcbiAgICAyMlx0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LWhvdmVyLWNhcmRcIjogXCIxLjEuMTNcIixcbiAgICAyM1x0ICAgIFwiQHJlYWN0LXRocmVlL2RyZWlcIjogXCIxMC4wLjdcIixcbiAgICAyNFx0ICAgIFwiQHJlYWN0LXRocmVlL2ZpYmVyXCI6IFwiOS4wLjAtYWxwaGEuOFwiLFxuICAgIDI1XHQgICAgXCJAcnNidWlsZC9jb3JlXCI6IFwiXjAuNS4xXCIsXG4gICAgMjZcdCAgICBcIkByc2J1aWxkL3BsdWdpbi1tZHhcIjogXCJeMC41LjFcIixcbiAgICAyN1x0ICAgIFwiQHJzYnVpbGQvcGx1Z2luLXJlYWN0XCI6IFwiXjAuNS4xXCIsXG4gICAgMjhcdCAgICBcIkB0YWJsZXIvaWNvbnMtcmVhY3RcIjogXCIzLjMxLjBcIixcbiAgICAyOVx0ICAgIFwiQHRhaWx3aW5kY3NzL3Bvc3Rjc3NcIjogXCJeNC4xLjRcIixcbiAgICAzMFx0ICAgIFwiQHRzcGFydGljbGVzL2VuZ2luZVwiOiBcIjMuOC4xXCIsXG4gICAgMzFcdCAgICBcIkB0c3BhcnRpY2xlcy9yZWFjdFwiOiBcIjMuMC4wXCIsXG4gICAgMzJcdCAgICBcIkB0c3BhcnRpY2xlcy9zbGltXCI6IFwiMy44LjFcIixcbiAgICAzM1x0ICAgIFwiQHR5cGVzL2NvcnNcIjogXCJeMi44LjE3XCIsXG4gICAgMzRcdCAgICBcIkB0eXBlcy9leHByZXNzXCI6IFwiXjQuMTcuMjFcIixcbiAgICAzNVx0ICAgIFwiQHR5cGVzL21keFwiOiBcIl4yLjAuN1wiLFxuICAgIDM2XHQgICAgXCJAdHlwZXMvbm9kZVwiOiBcIl4yMC4xMC44XCIsXG4gICAgMzdcdCAgICBcIkB0eXBlcy9wZ1wiOiBcIl44LjEwLjlcIixcbiAgICAzOFx0ICAgIFwiQHR5cGVzL3JlYWN0XCI6IFwiXjE5LjAuMFwiLFxuICAgIDM5XHQgICAgXCJAdHlwZXMvcmVhY3QtZG9tXCI6IFwiXjE5LjAuMFwiLFxuICAgIDQwXHQgICAgXCJhY29yblwiOiBcIl44LjEwLjBcIixcbiAgICA0MVx0ICAgIFwiYWNvcm4tanN4XCI6IFwiXjUuMy4yXCIsXG4gICAgNDJcdCAgICBcImNsYXNzLXZhcmlhbmNlLWF1dGhvcml0eVwiOiBcIjAuNy4xXCIsXG4gICAgNDNcdCAgICBcImNsc3hcIjogXCIyLjEuMVwiLFxuICAgIDQ0XHQgICAgXCJjb3JzXCI6IFwiXjIuOC41XCIsXG4gICAgNDVcdCAgICBcImRvdGVudlwiOiBcIl4xNi4zLjFcIixcbiAgICA0Nlx0ICAgIFwiZXNjYXBlLXN0cmluZy1yZWdleHBcIjogXCJeNS4wLjBcIixcbiAgICA0N1x0ICAgIFwiZXhwcmVzc1wiOiBcIl40LjE4LjJcIixcbiAgICA0OFx0ICAgIFwiZmFzdC1nbG9iXCI6IFwiXjMuMi4xMlwiLFxuICAgIDQ5XHQgICAgXCJmcmFtZXItbW90aW9uXCI6IFwiXjEwLjE1LjJcIixcbiAgICA1MFx0ICAgIFwibHVjaWRlLXJlYWN0XCI6IFwiMC41MDkuMFwiLFxuICAgIDUxXHQgICAgXCJtaW5pLXN2Zy1kYXRhLXVyaVwiOiBcIjEuNC40XCIsXG4gICAgNTJcdCAgICBcIm1vdGlvblwiOiBcIjEyLjEwLjVcIixcbiAgICA1M1x0ICAgIFwicGdcIjogXCJeOC4xMS4zXCIsXG4gICAgNTRcdCAgICBcInFzc1wiOiBcIjMuMC4wXCIsXG4gICAgNTVcdCAgICBcInJlYWN0XCI6IFwiXjE5LjAuMFwiLFxuICAgIDU2XHQgICAgXCJyZWFjdC1kb21cIjogXCJeMTkuMC4wXCIsXG4gICAgNTdcdCAgICBcInJlYWN0LWRyb3B6b25lXCI6IFwiMTQuMy44XCIsXG4gICAgNThcdCAgICBcInJlYWN0LXN5bnRheC1oaWdobGlnaHRlclwiOiBcIjE1LjYuMVwiLFxuICAgIDU5XHQgICAgXCJyZWNtYS1pbXBvcnQtaW1hZ2VzXCI6IFwiMC4wLjNcIixcbiAgICA2MFx0ICAgIFwicmVtYXJrLWdmbVwiOiBcIl40LjAuMFwiLFxuICAgIDYxXHQgICAgXCJyZW1hcmstcmVoeXBlLXdyYXBcIjogXCIwLjAuM1wiLFxuICAgIDYyXHQgICAgXCJyZW1hcmstdW53cmFwLWltYWdlc1wiOiBcIl40LjAuMFwiLFxuICAgIDYzXHQgICAgXCJzZXJ2ZVwiOiBcIl4xNC4yLjFcIixcbiAgICA2NFx0ICAgIFwic2hpa2lcIjogXCJeMC4xMS4xXCIsXG4gICAgNjVcdCAgICBcInNpbXBsZXgtbm9pc2VcIjogXCI0LjAuM1wiLFxuICAgIDY2XHQgICAgXCJ0YWlsd2luZC1tZXJnZVwiOiBcIjMuMi4wXCIsXG4gICAgNjdcdCAgICBcInRhaWx3aW5kY3NzXCI6IFwiXjQuMS40XCIsXG4gICAgNjhcdCAgICBcInRocmVlXCI6IFwiMC4xNzYuMFwiLFxuICAgIDY5XHQgICAgXCJ0aHJlZS1nbG9iZVwiOiBcIjIuNDIuNFwiLFxuICAgIDcwXHQgICAgXCJ0dy1hbmltYXRlLWNzc1wiOiBcIjEuMi45XCIsXG4gICAgNzFcdCAgICBcInR5cGVzY3JpcHRcIjogXCJeNS4zLjNcIixcbiAgICA3Mlx0ICAgIFwidW5pZmllZC1jb25kaXRpb25hbFwiOiBcIjAuMC4yXCJcbiAgICA3M1x0ICB9LFxuICAgIDc0XHQgIFwiZGV2RGVwZW5kZW5jaWVzXCI6IHtcbiAgICA3NVx0ICAgIFwiQHN0b3J5Ym9vay9hZGRvbi1lc3NlbnRpYWxzXCI6IFwiXjcuNi4xMFwiLFxuICAgIDc2XHQgICAgXCJAc3Rvcnlib29rL2FkZG9uLWludGVyYWN0aW9uc1wiOiBcIl43LjYuMTBcIixcbiAgICA3N1x0ICAgIFwiQHN0b3J5Ym9vay9hZGRvbi1saW5rc1wiOiBcIl43LjYuMTBcIixcbiAgICA3OFx0ICAgIFwiQHN0b3J5Ym9vay9hZGRvbi1vbmJvYXJkaW5nXCI6IFwiXjEuMC4xMVwiLFxuICAgIDc5XHQgICAgXCJAc3Rvcnlib29rL2Jsb2Nrc1wiOiBcIl43LjYuMTBcIixcbiAgICA4MFx0ICAgIFwiQHN0b3J5Ym9vay9yZWFjdFwiOiBcIl43LjYuMTBcIixcbiAgICA4MVx0ICAgIFwiQHN0b3J5Ym9vay9yZWFjdC12aXRlXCI6IFwiXjcuNi4xMFwiLFxuICAgIDgyXHQgICAgXCJAc3Rvcnlib29rL3Rlc3RcIjogXCJeNy42LjEwXCIsXG4gICAgODNcdCAgICBcIkB0eXBlcy9yZWFjdC1zeW50YXgtaGlnaGxpZ2h0ZXJcIjogXCIxNS41LjEzXCIsXG4gICAgODRcdCAgICBcIkB0eXBlcy90aHJlZVwiOiBcIjAuMTc2LjBcIixcbiAgICA4NVx0ICAgIFwiZXNsaW50XCI6IFwiXjguNTYuMFwiLFxuICAgIDg2XHQgICAgXCJlc2xpbnQtcGx1Z2luLXJlYWN0XCI6IFwiXjcuMzMuMlwiLFxuICAgIDg3XHQgICAgXCJlc2xpbnQtcGx1Z2luLXJlYWN0LWhvb2tzXCI6IFwiXjQuNi4wXCIsXG4gICAgODhcdCAgICBcImVzbGludC1wbHVnaW4tc3Rvcnlib29rXCI6IFwiXjAuNi4xNVwiLFxuICAgIDg5XHQgICAgXCJub2RlbW9uXCI6IFwiXjMuMC4zXCIsXG4gICAgOTBcdCAgICBcInByZXR0aWVyXCI6IFwiXjMuMy4yXCIsXG4gICAgOTFcdCAgICBcInByZXR0aWVyLXBsdWdpbi10YWlsd2luZGNzc1wiOiBcIl4wLjYuMTFcIixcbiAgICA5Mlx0ICAgIFwic2hhcnBcIjogXCIwLjMzLjFcIixcbiAgICA5M1x0ICAgIFwic3Rvcnlib29rXCI6IFwiXjcuNi4xMFwiLFxuICAgIDk0XHQgICAgXCJ0cy1ub2RlXCI6IFwiXjEwLjkuMlwiXG4gICAgOTVcdCAgfSxcbiAgICA5Nlx0ICBcInRydXN0ZWREZXBlbmRlbmNpZXNcIjogW1xuICAgIDk3XHQgICAgXCJjb3JlLWpzXCJcbiAgICA5OFx0ICBdXG4gICAgOTlcdH1cbiAgIDEwMFx0XG5Ub3RhbCBsaW5lcyBpbiBmaWxlOiAxMDBcbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sImQwZGJiZDk4LTgxODEtNGFlZi1iZWVmLWNjNDdmYmI4YTg2ZDt0b29sdV92cnR4XzAxTDNCSDk3TDV1ek1DbTVpOXlGRTJ5cyI6eyJyZXF1ZXN0SWQiOiJkMGRiYmQ5OC04MTgxLTRhZWYtYmVlZi1jYzQ3ZmJiOGE4NmQiLCJ0b29sVXNlSWQiOiJ0b29sdV92cnR4XzAxTDNCSDk3TDV1ek1DbTVpOXlGRTJ5cyIsInBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IlRoZSBmb2xsb3dpbmcgY29kZSBzZWN0aW9ucyB3ZXJlIHJldHJpZXZlZDpcblBhdGg6IHByZXR0aWVyLmNvbmZpZy50c1xuaW1wb3J0IHR5cGUgeyBPcHRpb25zIH0gZnJvbSAncHJldHRpZXInO1xuXG5jb25zdCBjb25maWc6IE9wdGlvbnMgPSB7XG4gIHNpbmdsZVF1b3RlOiB0cnVlLFxuICBzZW1pOiBmYWxzZSxcbiAgcGx1Z2luczogWydwcmV0dGllci1wbHVnaW4tdGFpbHdpbmRjc3MnXSxcbiAgdGFpbHdpbmRTdHlsZXNoZWV0OiAnLi9zcmMvc3R5bGVzL3RhaWx3aW5kLmNzcycsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb25maWc7Li4uXG5QYXRoOiBwYWNrYWdlLmpzb25cbntcbiAgXCJuYW1lXCI6IFwic3BlY3RydW13ZWJjby1hdVwiLFxuICBcInZlcnNpb25cIjogXCIxLjAuMFwiLFxuICBcInByaXZhdGVcIjogdHJ1ZSxcbiAgXCJ0eXBlXCI6IFwibW9kdWxlXCIsXG4gIFwic2NyaXB0c1wiOiB7XG4gICAgXCJkZXZcIjogXCJyc2J1aWxkIGRldlwiLFxuICAgIFwiYnVpbGRcIjogXCJyc2J1aWxkIGJ1aWxkXCIsXG4gICAgXCJzdGFydFwiOiBcInNlcnZlIGRpc3RcIixcbiAgICBcImxpbnRcIjogXCJlc2xpbnQgLiAtLWV4dCB0cyx0c3hcIixcbiAgICBcInN0b3J5Ym9va1wiOiBcInN0b3J5Ym9vayBkZXYgLXAgNjAwNlwiLFxuICAgIFwiYnVpbGQtc3Rvcnlib29rXCI6IFwic3Rvcnlib29rIGJ1aWxkXCIsXG4gICAgXCJzZXJ2ZXJcIjogXCJub2RlIC0tbG9hZGVyIHRzLW5vZGUvZXNtIHNyYy9zZXJ2ZXIvaW5kZXgudHNcIixcbiAgICBcInNlcnZlcjpkZXZcIjogXCJub2RlbW9uIC0tZXhlYyBub2RlIC0tbG9hZGVyIHRzLW5vZGUvZXNtIHNyYy9zZXJ2ZXIvaW5kZXgudHNcIixcbiAgICBcImRiOmluaXRcIjogXCJub2RlIC0tbG9hZGVyIHRzLW5vZGUvZXNtIHNyYy9zZXJ2ZXIvZGIvaW5pdC50c1wiXG4gIH0sXG4uLi5cbiAgICBcInVuaWZpZWQtY29uZGl0aW9uYWxcIjogXCIwLjAuMlwiXG4gIH0sXG4gIFwiZGV2RGVwZW5kZW5jaWVzXCI6IHtcbiAgICBcIkBzdG9yeWJvb2svYWRkb24tZXNzZW50aWFsc1wiOiBcIl43LjYuMTBcIixcbiAgICBcIkBzdG9yeWJvb2svYWRkb24taW50ZXJhY3Rpb25zXCI6IFwiXjcuNi4xMFwiLFxuICAgIFwiQHN0b3J5Ym9vay9hZGRvbi1saW5rc1wiOiBcIl43LjYuMTBcIixcbiAgICBcIkBzdG9yeWJvb2svYWRkb24tb25ib2FyZGluZ1wiOiBcIl4xLjAuMTFcIixcbiAgICBcIkBzdG9yeWJvb2svYmxvY2tzXCI6IFwiXjcuNi4xMFwiLFxuICAgIFwiQHN0b3J5Ym9vay9yZWFjdFwiOiBcIl43LjYuMTBcIixcbiAgICBcIkBzdG9yeWJvb2svcmVhY3Qtdml0ZVwiOiBcIl43LjYuMTBcIixcbiAgICBcIkBzdG9yeWJvb2svdGVzdFwiOiBcIl43LjYuMTBcIixcbiAgICBcIkB0eXBlcy9yZWFjdC1zeW50YXgtaGlnaGxpZ2h0ZXJcIjogXCIxNS41LjEzXCIsXG4gICAgXCJAdHlwZXMvdGhyZWVcIjogXCIwLjE3Ni4wXCIsXG4gICAgXCJlc2xpbnRcIjogXCJeOC41Ni4wXCIsXG4gICAgXCJlc2xpbnQtcGx1Z2luLXJlYWN0XCI6IFwiXjcuMzMuMlwiLFxuICAgIFwiZXNsaW50LXBsdWdpbi1yZWFjdC1ob29rc1wiOiBcIl40LjYuMFwiLFxuICAgIFwiZXNsaW50LXBsdWdpbi1zdG9yeWJvb2tcIjogXCJeMC42LjE1XCIsXG4gICAgXCJub2RlbW9uXCI6IFwiXjMuMC4zXCIsXG4gICAgXCJwcmV0dGllclwiOiBcIl4zLjMuMlwiLFxuICAgIFwicHJldHRpZXItcGx1Z2luLXRhaWx3aW5kY3NzXCI6IFwiXjAuNi4xMVwiLFxuICAgIFwic2hhcnBcIjogXCIwLjMzLjFcIixcbiAgICBcInN0b3J5Ym9va1wiOiBcIl43LjYuMTBcIixcbiAgICBcInRzLW5vZGVcIjogXCJeMTAuOS4yXCJcbiAgfSxcbiAgXCJ0cnVzdGVkRGVwZW5kZW5jaWVzXCI6IFtcbiAgICBcImNvcmUtanNcIlxuICBdXG59XG4uLi5cblBhdGg6IHNyYy9zZXJ2ZXIvY29uZmlnL2RiLnRzXG5pbXBvcnQgeyBQb29sIH0gZnJvbSAncGcnO1xuaW1wb3J0IGRvdGVudiBmcm9tICdkb3RlbnYnO1xuXG4vLyBMb2FkIGVudmlyb25tZW50IHZhcmlhYmxlc1xuZG90ZW52LmNvbmZpZygpO1xuXG4vLyBDcmVhdGUgYSBjb25uZWN0aW9uIHBvb2wgdG8gVGltZXNjYWxlREJcbmNvbnN0IHBvb2wgPSBuZXcgUG9vbCh7XG4gIGhvc3Q6IHByb2Nlc3MuZW52LkRCX0hPU1QgfHwgJ2xvY2FsaG9zdCcsXG4gIHBvcnQ6IHBhcnNlSW50KHByb2Nlc3MuZW52LkRCX1BPUlQgfHwgJzU0MzInKSxcbiAgdXNlcjogcHJvY2Vzcy5lbnYuREJfVVNFUiB8fCAncG9zdGdyZXMnLFxuICBwYXNzd29yZDogcHJvY2Vzcy5lbnYuREJfUEFTU1dPUkQgfHwgJ3Bvc3RncmVzJyxcbiAgZGF0YWJhc2U6IHByb2Nlc3MuZW52LkRCX05BTUUgfHwgJ21hcmtldGluZ19zaXRlJyxcbiAgc3NsOiBwcm9jZXNzLmVudi5EQl9TU0wgPT09ICd0cnVlJyA/IHsgcmVqZWN0VW5hdXRob3JpemVkOiBmYWxzZSB9IDogZmFsc2UsXG59KTtcblxuLy8gVGVzdCB0aGUgY29ubmVjdGlvblxucG9vbC5vbignY29ubmVjdCcsICgpID0+IHtcbiAgY29uc29sZS5sb2coJ0Nvbm5lY3RlZCB0byBUaW1lc2NhbGVEQicpO1xufSk7XG5cbnBvb2wub24oJ2Vycm9yJywgKGVycikgPT4ge1xuICBjb25zb2xlLmVycm9yKCdVbmV4cGVjdGVkIGVycm9yIG9uIGlkbGUgY2xpZW50JywgZXJyKTtcbiAgcHJvY2Vzcy5leGl0KC0xKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBwb29sOy4uLlxuUGF0aDogUkVBRE1FLm1kXG4jIFN0dWRpb1xuXG5TdHVkaW8gaXMgYSBbVGFpbHdpbmQgUGx1c10oaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vcGx1cykgc2l0ZSB0ZW1wbGF0ZSBidWlsdCB1c2luZyBbVGFpbHdpbmQgQ1NTIDQuMF0oaHR0cHM6Ly90YWlsd2luZGNzcy5jb20pLCBbUmVhY3QgMTldKGh0dHBzOi8vcmVhY3QuZGV2KSwgYW5kIFtSc2J1aWxkXShodHRwczovL3JzYnVpbGQuZGV2KS5cblxuIyMgR2V0dGluZyBzdGFydGVkXG5cblRoaXMgcHJvamVjdCB1c2VzIFtCdW5dKGh0dHBzOi8vYnVuLnNoKSBhcyB0aGUgcGFja2FnZSBtYW5hZ2VyLiBJZiB5b3UgZG9uJ3QgaGF2ZSBCdW4gaW5zdGFsbGVkLCB5b3UgY2FuIGluc3RhbGwgaXQgYnkgZm9sbG93aW5nIHRoZSBpbnN0cnVjdGlvbnMgb24gdGhlIFtCdW4gd2Vic2l0ZV0oaHR0cHM6Ly9idW4uc2gvZG9jcy9pbnN0YWxsYXRpb24pLlxuXG4jIyMgSW5zdGFsbGF0aW9uXG5cblRvIGdldCBzdGFydGVkIHdpdGggdGhpcyB0ZW1wbGF0ZSwgZmlyc3QgaW5zdGFsbCB0aGUgZGVwZW5kZW5jaWVzOlxuXG5gYGBiYXNoXG5idW4gaW5zdGFsbFxuYGBgXG5cbiMjIyBEYXRhYmFzZSBTZXR1cFxuXG5UaGlzIHByb2plY3QgdXNlcyBUaW1lc2NhbGVEQiAoYSBQb3N0Z3JlU1FMIGV4dGVuc2lvbikgZm9yIGRhdGEgc3RvcmFnZS4gWW91J2xsIG5lZWQgdG8gc2V0IHVwIGEgVGltZXNjYWxlREIgaW5zdGFuY2UgYmVmb3JlIHJ1bm5pbmcgdGhlIGFwcGxpY2F0aW9uLlxuXG4xLiBDcmVhdGUgYSBgLmVudmAgZmlsZSBiYXNlZCBvbiB0aGUgYC5lbnYuZXhhbXBsZWAgdGVtcGxhdGU6XG5cbmBgYGJhc2hcbmNwIC5lbnYuZXhhbXBsZSAuZW52XG5gYGBcblxuMi4gVXBkYXRlIHRoZSBkYXRhYmFzZSBjb25uZWN0aW9uIGRldGFpbHMgaW4gdGhlIGAuZW52YCBmaWxlIHRvIG1hdGNoIHlvdXIgVGltZXNjYWxlREIgaW5zdGFuY2UuXG5cbjMuIEluaXRpYWxpemUgdGhlIGRhdGFiYXNlIHNjaGVtYTpcblxuYGBgYmFzaFxuYnVuIHJ1biBkYjppbml0XG5gYGBcblxuIyMjIFJ1bm5pbmcgdGhlIEFwcGxpY2F0aW9uXG5cblJ1biB0aGUgZnJvbnRlbmQgZGV2ZWxvcG1lbnQgc2VydmVyOlxuXG5gYGBiYXNoXG5idW4gcnVuIGRldlxuYGBgXG5cblJ1biB0aGUgYmFja2VuZCBBUEkgc2VydmVyOlxuXG5gYGBiYXNoXG5idW4gcnVuIHNlcnZlclxuYGBgXG5cbkZvciBkZXZlbG9wbWVudCB3aXRoIGF1dG8tcmVzdGFydCBvbiBmaWxlIGNoYW5nZXM6XG5cbmBgYGJhc2hcbmJ1biBydW4gc2VydmVyOmRldlxuYGBgXG5cbllvdSBjYW4gYWxzbyBydW4gU3Rvcnlib29rIHRvIHZpZXcgYW5kIGRldmVsb3AgY29tcG9uZW50cyBpbiBpc29sYXRpb246XG5cbmBgYGJhc2hcbmJ1biBydW4gc3Rvcnlib29rXG5gYGBcblxuRmluYWxseSwgb3BlbiBbaHR0cDovL2xvY2FsaG9zdDozMDAwXShodHRwOi8vbG9jYWxob3N0OjMwMDApIGluIHlvdXIgYnJvd3NlciB0byB2aWV3IHRoZSB3ZWJzaXRlLiBUaGUgQVBJIHNlcnZlciBydW5zIG9uIFtodHRwOi8vbG9jYWxob3N0OjMwMDFdKGh0dHA6Ly9sb2NhbGhvc3Q6MzAwMSkgYnkgZGVmYXVsdC5cblxuIyMgQ3VzdG9taXppbmdcblxuWW91IGNhbiBzdGFydCBlZGl0aW5nIHRoaXMgdGVtcGxhdGUgYnkgbW9kaWZ5aW5nIHRoZSBmaWxlcyBpbiB0aGUgYC9zcmNgIGZvbGRlci4gVGhlIHNpdGUgd2lsbCBhdXRvLXVwZGF0ZSBhcyB5b3UgZWRpdCB0aGVzZSBmaWxlcy5cblxuIyMgTGljZW5zZVxuXG5UaGlzIHNpdGUgdGVtcGxhdGUgaXMgYSBjb21tZXJjaWFsIHByb2R1Y3QgYW5kIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBbVGFpbHdpbmQgUGx1cyBsaWNlbnNlXShodHRwczovL3RhaWx3aW5kY3NzLmNvbS9wbHVzL2xpY2Vuc2UpLlxuXG4jIyBUaW1lc2NhbGVEQiBJbnRlZ3JhdGlvblxuXG5UaGlzIHByb2plY3QgdXNlcyBbVGltZXNjYWxlREJdKGh0dHBzOi8vd3d3LnRpbWVzY2FsZS5jb20vKSBmb3IgZGF0YWJhc2UgZnVuY3Rpb25hbGl0eS4gVGltZXNjYWxlREIgaXMgYW4gb3Blbi1zb3VyY2UgZGF0YWJhc2UgYnVpbHQgb24gUG9zdGdyZVNRTCB0aGF0IHByb3ZpZGVzIHRpbWUtc2VyaWVzIGRhdGEgY2FwYWJpbGl0aWVzIHdoaWxlIG1haW50YWluaW5nIGZ1bGwgU1FMIGNvbXBhdGliaWxpdHkuXG5cbiMjIyBGZWF0dXJlc1xuXG4tICoqQ29udGFjdCBGb3JtIFN1Ym1pc3Npb25zKio6IFRoZSBjb250YWN0IGZvcm0gb24gdGhlIHdlYnNpdGUgc3RvcmVzIHN1Ym1pc3Npb25zIGluIFRpbWVzY2FsZURCLCBhbGxvd2luZyB5b3UgdG8gdHJhY2sgYW5kIG1hbmFnZSBjdXN0b21lciBpbnF1aXJpZXMgb3ZlciB0aW1lLlxuLSAqKlVzZXIgQXV0aGVudGljYXRpb24qKjogVXNlciBhY2NvdW50cyBhbmQgc2Vzc2lvbnMgYXJlIHN0b3JlZCBpbiBUaW1lc2NhbGVEQiwgcHJvdmlkaW5nIHNlY3VyZSBhdXRoZW50aWNhdGlvbiBmb3IgYWRtaW4gdXNlcnMuXG4tICoqVGltZS1TZXJpZXMgQW5hbHl0aWNzKio6IFRpbWVzY2FsZURCJ3MgdGltZS1zZXJpZXMgY2FwYWJpbGl0aWVzIGFsbG93IGZvciBlZmZpY2llbnQgc3RvcmFnZSBhbmQgcXVlcnlpbmcgb2YgdGltZS1iYXNlZCBkYXRhLCBzdWNoIGFzIHdlYnNpdGUgYW5hbHl0aWNzIGFuZCB1c2VyIGFjdGl2aXR5LlxuXG4jIyMgRGF0YWJhc2UgU3RydWN0dXJlXG5cblRoZSBkYXRhYmFzZSBpbmNsdWRlcyB0aGUgZm9sbG93aW5nIHRhYmxlczpcblxuLSBgdXNlcnNgOiBTdG9yZXMgdXNlciBhY2NvdW50IGluZm9ybWF0aW9uIGZvciBhdXRoZW50aWNhdGlvblxuLSBgc2Vzc2lvbnNgOiBNYW5hZ2VzIHVzZXIgYXV0aGVudGljYXRpb24gc2Vzc2lvbnNcbi0gYGNvbnRhY3Rfc3VibWlzc2lvbnNgOiBTdG9yZXMgY29udGFjdCBmb3JtIHN1Ym1pc3Npb25zXG4tIGBwYWdlX3ZpZXdzYDogVHJhY2tzIHdlYnNpdGUgYW5hbHl0aWNzIGRhdGFcbi4uLlxuUGF0aDogdHNjb25maWcuanNvblxue1xuICBcImNvbXBpbGVyT3B0aW9uc1wiOiB7XG4gICAgXCJ0YXJnZXRcIjogXCJlczZcIixcbiAgICBcImxpYlwiOiBbXCJkb21cIiwgXCJkb20uaXRlcmFibGVcIiwgXCJlc25leHRcIl0sXG4gICAgXCJhbGxvd0pzXCI6IHRydWUsXG4gICAgXCJza2lwTGliQ2hlY2tcIjogdHJ1ZSxcbiAgICBcInN0cmljdFwiOiB0cnVlLFxuICAgIFwiZm9yY2VDb25zaXN0ZW50Q2FzaW5nSW5GaWxlTmFtZXNcIjogdHJ1ZSxcbiAgICBcIm5vRW1pdFwiOiB0cnVlLFxuICAgIFwiZXNNb2R1bGVJbnRlcm9wXCI6IHRydWUsXG4gICAgXCJtb2R1bGVcIjogXCJlc25leHRcIixcbiAgICBcIm1vZHVsZVJlc29sdXRpb25cIjogXCJidW5kbGVyXCIsXG4gICAgXCJyZXNvbHZlSnNvbk1vZHVsZVwiOiB0cnVlLFxuICAgIFwiaXNvbGF0ZWRNb2R1bGVzXCI6IHRydWUsXG4gICAgXCJqc3hcIjogXCJwcmVzZXJ2ZVwiLFxuICAgIFwiaW5jcmVtZW50YWxcIjogdHJ1ZSxcbiAgICBcInBsdWdpbnNcIjogW1xuICAgICAge1xuICAgICAgICBcIm5hbWVcIjogXCJuZXh0XCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwiYmFzZVVybFwiOiBcIi5cIixcbiAgICBcInBhdGhzXCI6IHtcbiAgICAgIFwiQC8qXCI6IFtcIi4vKlwiXVxuICAgIH1cbiAgfSxcbiAgXCJpbmNsdWRlXCI6IFtcIm5leHQtZW52LmQudHNcIiwgXCIqKi8qLnRzXCIsIFwiKiovKi50c3hcIiwgXCIubmV4dC90eXBlcy8qKi8qLnRzXCJdLFxuICBcImV4Y2x1ZGVcIjogW1wibm9kZV9tb2R1bGVzXCJdXG59XG4uLi5cblBhdGg6IHNyYy9zZXJ2ZXIvZGIvaW5pdC50c1xuaW1wb3J0IGZzIGZyb20gJ2ZzJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgZmlsZVVSTFRvUGF0aCB9IGZyb20gJ3VybCc7XG5pbXBvcnQgcG9vbCBmcm9tICcuLi9jb25maWcvZGInO1xuXG4vLyBHZXQgdGhlIGRpcmVjdG9yeSBuYW1lIG9mIHRoZSBjdXJyZW50IG1vZHVsZVxuY29uc3QgX19maWxlbmFtZSA9IGZpbGVVUkxUb1BhdGgoaW1wb3J0Lm1ldGEudXJsKTtcbmNvbnN0IF9fZGlybmFtZSA9IHBhdGguZGlybmFtZShfX2ZpbGVuYW1lKTtcblxuLy8gUmVhZCB0aGUgc2NoZW1hIGZpbGVcbmNvbnN0IHNjaGVtYVBhdGggPSBwYXRoLmpvaW4oX19kaXJuYW1lLCAnc2NoZW1hLnNxbCcpO1xuY29uc3Qgc2NoZW1hID0gZnMucmVhZEZpbGVTeW5jKHNjaGVtYVBhdGgsICd1dGY4Jyk7XG5cbi8qKlxuICogSW5pdGlhbGl6ZSB0aGUgZGF0YWJhc2Ugd2l0aCB0aGUgc2NoZW1hXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGluaXRpYWxpemVEYXRhYmFzZSgpIHtcbiAgY29uc3QgY2xpZW50ID0gYXdhaXQgcG9vbC5jb25uZWN0KCk7XG4gIFxuICB0cnkge1xuICAgIGNvbnNvbGUubG9nKCdJbml0aWFsaXppbmcgZGF0YWJhc2UuLi4nKTtcbiAgICBhd2FpdCBjbGllbnQucXVlcnkoc2NoZW1hKTtcbiAgICBjb25zb2xlLmxvZygnRGF0YWJhc2UgaW5pdGlhbGl6ZWQgc3VjY2Vzc2Z1bGx5Jyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgaW5pdGlhbGl6aW5nIGRhdGFiYXNlOicsIGVycm9yKTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfSBmaW5hbGx5IHtcbiAgICBjbGllbnQucmVsZWFzZSgpO1xuICB9XG59XG4uLi5cblBhdGg6IGJ1bmZpZy50b21sXG5baW5zdGFsbF1cbiMgVXNlIHRoZSBleGFjdCB2ZXJzaW9ucyBzcGVjaWZpZWQgaW4gcGFja2FnZS5qc29uXG5leGFjdCA9IHRydWVcblxuIyBJbnN0YWxsIHBlZXIgZGVwZW5kZW5jaWVzIGF1dG9tYXRpY2FsbHlcbnBlZXIgPSB0cnVlXG5cbiMgSW5zdGFsbCBkZXYgZGVwZW5kZW5jaWVzIGJ5IGRlZmF1bHRcbmRldiA9IHRydWVcblxuW3Rlc3RdXG4jIFVzZSB0aGUgSmVzdC1jb21wYXRpYmxlIHRlc3QgcnVubmVyXG5jb3ZlcmFnZSA9IHRydWVcblxuW3J1bl1cbiMgU2V0IHRoZSBkZWZhdWx0IGVudmlyb25tZW50IHRvIGRldmVsb3BtZW50XG5lbnYgPSB7IE5PREVfRU5WID0gXCJkZXZlbG9wbWVudFwiIH0uLi5cblBhdGg6IC5lc2xpbnRyYy5qc29uXG57XG4gIFwiZXh0ZW5kc1wiOiBcIm5leHQvY29yZS13ZWItdml0YWxzXCJcbn1cbi4uLlxuUGF0aDogY29tcG9uZW50cy5qc29uXG57XG4gIFwiJHNjaGVtYVwiOiBcImh0dHBzOi8vdWkuc2hhZGNuLmNvbS9zY2hlbWEuanNvblwiLFxuICBcInN0eWxlXCI6IFwibmV3LXlvcmtcIixcbiAgXCJyc2NcIjogZmFsc2UsXG4gIFwidHN4XCI6IHRydWUsXG4gIFwidGFpbHdpbmRcIjoge1xuICAgIFwiY29uZmlnXCI6IFwiXCIsXG4gICAgXCJjc3NcIjogXCJzcmMvc3R5bGVzL2dsb2JhbHMuY3NzXCIsXG4gICAgXCJiYXNlQ29sb3JcIjogXCJuZXV0cmFsXCIsXG4gICAgXCJjc3NWYXJpYWJsZXNcIjogdHJ1ZSxcbiAgICBcInByZWZpeFwiOiBcIlwiXG4gIH0sXG4gIFwiYWxpYXNlc1wiOiB7XG4gICAgXCJjb21wb25lbnRzXCI6IFwiQC9jb21wb25lbnRzXCIsXG4gICAgXCJ1dGlsc1wiOiBcIkAvbGliL3V0aWxzXCIsXG4gICAgXCJ1aVwiOiBcIkAvY29tcG9uZW50cy91aVwiLFxuICAgIFwibGliXCI6IFwiQC9saWJcIixcbiAgICBcImhvb2tzXCI6IFwiQC9ob29rc1wiXG4gIH0sXG4gIFwiaWNvbkxpYnJhcnlcIjogXCJsdWNpZGVcIlxufVxuLi4uXG5QYXRoOiBzcmMvc2VydmVyL2luZGV4LnRzXG5pbXBvcnQgZXhwcmVzcyBmcm9tICdleHByZXNzJztcbmltcG9ydCBjb3JzIGZyb20gJ2NvcnMnO1xuaW1wb3J0IGRvdGVudiBmcm9tICdkb3RlbnYnO1xuaW1wb3J0IHsgZmlsZVVSTFRvUGF0aCB9IGZyb20gJ3VybCc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcblxuLy8gSW1wb3J0IHJvdXRlc1xuaW1wb3J0IGF1dGhSb3V0ZXMgZnJvbSAnLi9yb3V0ZXMvYXV0aCc7XG5pbXBvcnQgY29udGFjdFJvdXRlcyBmcm9tICcuL3JvdXRlcy9jb250YWN0JztcblxuLy8gTG9hZCBlbnZpcm9ubWVudCB2YXJpYWJsZXNcbmRvdGVudi5jb25maWcoKTtcblxuLy8gQ3JlYXRlIEV4cHJlc3MgYXBwXG5jb25zdCBhcHAgPSBleHByZXNzKCk7XG5jb25zdCBQT1JUID0gcHJvY2Vzcy5lbnYuUE9SVCB8fCAzMDAxO1xuXG4vLyBNaWRkbGV3YXJlXG5hcHAudXNlKGNvcnMoKSk7XG5hcHAudXNlKGV4cHJlc3MuanNvbigpKTtcbmFwcC51c2UoZXhwcmVzcy51cmxlbmNvZGVkKHsgZXh0ZW5kZWQ6IHRydWUgfSkpO1xuXG4vLyBHZXQgdGhlIGRpcmVjdG9yeSBuYW1lIG9mIHRoZSBjdXJyZW50IG1vZHVsZVxuY29uc3QgX19maWxlbmFtZSA9IGZpbGVVUkxUb1BhdGgoaW1wb3J0Lm1ldGEudXJsKTtcbmNvbnN0IF9fZGlybmFtZSA9IHBhdGguZGlybmFtZShfX2ZpbGVuYW1lKTtcblxuLy8gU2VydmUgc3RhdGljIGZpbGVzIGZyb20gdGhlIFJlYWN0IGFwcFxuYXBwLnVzZShleHByZXNzLnN0YXRpYyhwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4vLi4vZGlzdCcpKSk7XG5cbi8vIEFQSSByb3V0ZXNcbmFwcC51c2UoJy9hcGkvYXV0aCcsIGF1dGhSb3V0ZXMpO1xuYXBwLnVzZSgnL2FwaS9jb250YWN0JywgY29udGFjdFJvdXRlcyk7XG5cbi8vIEhlYWx0aCBjaGVjayBlbmRwb2ludFxuYXBwLmdldCgnL2FwaS9oZWFsdGgnLCAocmVxLCByZXMpID0+IHtcbiAgcmVzLnN0YXR1cygyMDApLmpzb24oeyBzdGF0dXM6ICdvaycsIG1lc3NhZ2U6ICdTZXJ2ZXIgaXMgcnVubmluZycgfSk7XG59KTtcblxuLy8gQWxsIG90aGVyIEdFVCByZXF1ZXN0cyBub3QgaGFuZGxlZCBiZWZvcmUgd2lsbCByZXR1cm4gdGhlIFJlYWN0IGFwcFxuYXBwLmdldCgnKicsIChyZXEsIHJlcykgPT4ge1xuICByZXMuc2VuZEZpbGUocGF0aC5qb2luKF9fZGlybmFtZSwgJy4uLy4uL2Rpc3QvaW5kZXguaHRtbCcpKTtcbn0pO1xuXG4vLyBTdGFydCB0aGUgc2VydmVyXG5hcHAubGlzdGVuKFBPUlQsICgpID0+IHtcbiAgY29uc29sZS5sb2coYFNlcnZlciBpcyBydW5uaW5nIG9uIHBvcnQgJHtQT1JUfWApO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGFwcDsuLi5cblBhdGg6IHNyYy9zZXJ2ZXIvZGIvc2NoZW1hLnNxbFxuLS0gRW5hYmxlIFRpbWVzY2FsZURCIGV4dGVuc2lvblxuQ1JFQVRFIEVYVEVOU0lPTiBJRiBOT1QgRVhJU1RTIHRpbWVzY2FsZWRiO1xuXG4tLSBVc2VycyB0YWJsZSBmb3IgYXV0aGVudGljYXRpb25cbkNSRUFURSBUQUJMRSBJRiBOT1QgRVhJU1RTIHVzZXJzIChcbiAgaWQgU0VSSUFMIFBSSU1BUlkgS0VZLFxuICBlbWFpbCBWQVJDSEFSKDI1NSkgVU5JUVVFIE5PVCBOVUxMLFxuICBwYXNzd29yZF9oYXNoIFZBUkNIQVIoMjU1KSBOT1QgTlVMTCxcbiAgZmlyc3RfbmFtZSBWQVJDSEFSKDEwMCksXG4gIGxhc3RfbmFtZSBWQVJDSEFSKDEwMCksXG4gIGNyZWF0ZWRfYXQgVElNRVNUQU1QVFogTk9UIE5VTEwgREVGQVVMVCBOT1coKSxcbiAgdXBkYXRlZF9hdCBUSU1FU1RBTVBUWiBOT1QgTlVMTCBERUZBVUxUIE5PVygpXG4pO1xuXG4tLSBDb250YWN0IGZvcm0gc3VibWlzc2lvbnMgdGFibGVcbkNSRUFURSBUQUJMRSBJRiBOT1QgRVhJU1RTIGNvbnRhY3Rfc3VibWlzc2lvbnMgKFxuICBpZCBTRVJJQUwgUFJJTUFSWSBLRVksXG4gIG5hbWUgVkFSQ0hBUigyNTUpIE5PVCBOVUxMLFxuICBlbWFpbCBWQVJDSEFSKDI1NSkgTk9UIE5VTEwsXG4gIGNvbXBhbnkgVkFSQ0hBUigyNTUpLFxuICBwaG9uZSBWQVJDSEFSKDUwKSxcbiAgbWVzc2FnZSBURVhULFxuICBidWRnZXQgVkFSQ0hBUig1MCksXG4gIGNyZWF0ZWRfYXQgVElNRVNUQU1QVFogTk9UIE5VTEwgREVGQVVMVCBOT1coKVxuKTtcbi4uLlxuUGF0aDogLnN0b3J5Ym9vay9tYWluLnRzXG5pbXBvcnQgdHlwZSB7IFN0b3J5Ym9va0NvbmZpZyB9IGZyb20gJ0BzdG9yeWJvb2svcmVhY3Qtdml0ZSc7XG5cbmNvbnN0IGNvbmZpZzogU3Rvcnlib29rQ29uZmlnID0ge1xuICBzdG9yaWVzOiBbJy4uL3NyYy8qKi8qLm1keCcsICcuLi9zcmMvKiovKi5zdG9yaWVzLkAoanN8anN4fG1qc3x0c3x0c3gpJ10sXG4gIGFkZG9uczogW1xuICAgICdAc3Rvcnlib29rL2FkZG9uLWxpbmtzJyxcbiAgICAnQHN0b3J5Ym9vay9hZGRvbi1lc3NlbnRpYWxzJyxcbiAgICAnQHN0b3J5Ym9vay9hZGRvbi1vbmJvYXJkaW5nJyxcbiAgICAnQHN0b3J5Ym9vay9hZGRvbi1pbnRlcmFjdGlvbnMnLFxuICBdLFxuICBmcmFtZXdvcms6IHtcbiAgICBuYW1lOiAnQHN0b3J5Ym9vay9yZWFjdC12aXRlJyxcbiAgICBvcHRpb25zOiB7fSxcbiAgfSxcbiAgZG9jczoge1xuICAgIGF1dG9kb2NzOiAndGFnJyxcbiAgfSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvbmZpZzsuLi5cblBhdGg6IC5naXRpZ25vcmVcbiMgU2VlIGh0dHBzOi8vaGVscC5naXRodWIuY29tL2FydGljbGVzL2lnbm9yaW5nLWZpbGVzLyBmb3IgbW9yZSBhYm91dCBpZ25vcmluZyBmaWxlcy5cblxuIyBkZXBlbmRlbmNpZXNcbi9ub2RlX21vZHVsZXNcbi8ucG5wXG4ucG5wLmpzXG5cbiMgdGVzdGluZ1xuL2NvdmVyYWdlXG5cbiMgbmV4dC5qc1xuLy5uZXh0L1xuL291dC9cblxuIyBwcm9kdWN0aW9uXG4vYnVpbGRcblxuIyBtaXNjXG4uRFNfU3RvcmVcbioucGVtXG5cbiMgZGVidWdcbm5wbS1kZWJ1Zy5sb2cqXG55YXJuLWRlYnVnLmxvZypcbnlhcm4tZXJyb3IubG9nKlxuXG4jIGxvY2FsIGVudiBmaWxlc1xuLmVudioubG9jYWxcblxuIyB2ZXJjZWxcbi52ZXJjZWxcblxuIyB0eXBlc2NyaXB0XG4qLnRzYnVpbGRpbmZvXG5uZXh0LWVudi5kLnRzXG4uLi5cblBhdGg6IHJzYnVpbGQuY29uZmlnLnRzXG5pbXBvcnQgeyBkZWZpbmVDb25maWcgfSBmcm9tICdAcnNidWlsZC9jb3JlJztcbmltcG9ydCB7IHBsdWdpblJlYWN0IH0gZnJvbSAnQHJzYnVpbGQvcGx1Z2luLXJlYWN0JztcbmltcG9ydCB7IHBsdWdpbk1keCB9IGZyb20gJ0Byc2J1aWxkL3BsdWdpbi1tZHgnO1xuaW1wb3J0IHJlaHlwZVNoaWtpIGZyb20gJ0BsZWFmYWMvcmVoeXBlLXNoaWtpJztcbmltcG9ydCBlc2NhcGVTdHJpbmdSZWdleHAgZnJvbSAnZXNjYXBlLXN0cmluZy1yZWdleHAnO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IHJlY21hSW1wb3J0SW1hZ2VzIH0gZnJvbSAncmVjbWEtaW1wb3J0LWltYWdlcyc7XG5pbXBvcnQgcmVtYXJrR2ZtIGZyb20gJ3JlbWFyay1nZm0nO1xuaW1wb3J0IHsgcmVtYXJrUmVoeXBlV3JhcCB9IGZyb20gJ3JlbWFyay1yZWh5cGUtd3JhcCc7XG5pbXBvcnQgcmVtYXJrVW53cmFwSW1hZ2VzIGZyb20gJ3JlbWFyay11bndyYXAtaW1hZ2VzJztcbmltcG9ydCBzaGlraSBmcm9tICdzaGlraSc7XG5pbXBvcnQgeyB1bmlmaWVkQ29uZGl0aW9uYWwgfSBmcm9tICd1bmlmaWVkLWNvbmRpdGlvbmFsJztcblxuLy8gU2ltaWxhciBNRFggbGF5b3V0IGZ1bmN0aW9uIGFzIGluIHRoZSBOZXh0LmpzIGNvbmZpZ1xuZnVuY3Rpb24gcmVtYXJrTURYTGF5b3V0KHNvdXJjZSwgbWV0YU5hbWUpIHtcbiAgcmV0dXJuICh0cmVlKSA9PiB7XG4gICAgbGV0IGltcCA9IGBpbXBvcnQgX0xheW91dCBmcm9tICcke3NvdXJjZX0nYDtcbiAgICBsZXQgZXhwID0gYGV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIExheW91dChwcm9wcykge1xuICAgICAgcmV0dXJuIDxfTGF5b3V0IHsuLi5wcm9wc30gJHttZXRhTmFtZX09eyR7bWV0YU5hbWV9fSAvPlxuICAgIH1gO1xuXG4gICAgdHJlZS5jaGlsZHJlbi5wdXNoKFxuICAgICAge1xuICAgICAgICB0eXBlOiAnbWR4anNFc20nLFxuICAgICAgICB2YWx1ZTogaW1wLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgdHlwZTogJ21keGpzRXNtJyxcbiAgICAgICAgdmFsdWU6IGV4cCxcbiAgICAgIH1cbiAgICApO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb25maWcoYXN5bmMgKCkgPT4ge1xuICBjb25zdCBoaWdobGlnaHRlciA9IGF3YWl0IHNoaWtpLmdldEhpZ2hsaWdodGVyKHtcbiAgICB0aGVtZTogJ2Nzcy12YXJpYWJsZXMnLFxuICB9KTtcblxuICByZXR1cm4ge1xuICAgIHBsdWdpbnM6IFtcbiAgICAgIHBsdWdpblJlYWN0KCksXG4gICAgICBwbHVnaW5NZHgoe1xuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgcmVjbWFQbHVnaW5zOiBbcmVjbWFJbXBvcnRJbWFnZXNdLFxuICAgICAgICAgIHJlaHlwZVBsdWdpbnM6IFtcbiAgICAgICAgICAgIFtyZWh5cGVTaGlraSwgeyBoaWdobGlnaHRlciB9XSxcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgcmVtYXJrUmVoeXBlV3JhcCxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5vZGU6IHsgdHlwZTogJ21keEpzeEZsb3dFbGVtZW50JywgbmFtZTogJ1R5cG9ncmFwaHknIH0sXG4gICAgICAgICAgICAgICAgc3RhcnQ6ICc6cm9vdCA+IDpub3QobWR4SnN4Rmxvd0VsZW1lbnQpJyxcbiAgICAgICAgICAgICAgICBlbmQ6ICc6cm9vdCA+IG1keEpzeEZsb3dFbGVtZW50JyxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgXSxcbiAgICAgICAgICByZW1hcmtQbHVnaW5zOiBbXG4gICAgICAgICAgICByZW1hcmtHZm0sXG4gICAgICAgICAgICByZW1hcmtVbndyYXBJbWFnZXMsXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgIHVuaWZpZWRDb25kaXRpb25hbCxcbiAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgIG5ldyBSZWdFeHAoYF4ke2VzY2FwZVN0cmluZ1JlZ2V4cChwYXRoLnJlc29sdmUoJ3NyYy9hcHAvYmxvZycpKX1gKSxcbiAgICAgICAgICAgICAgICBbW3JlbWFya01EWExheW91dCwgJ0AvYXBwL2Jsb2cvd3JhcHBlcicsICdhcnRpY2xlJ11dLFxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgbmV3IFJlZ0V4cChgXiR7ZXNjYXBlU3RyaW5nUmVnZXhwKHBhdGgucmVzb2x2ZSgnc3JjL2FwcC93b3JrJykpfWApLFxuICAgICAgICAgICAgICAgIFtbcmVtYXJrTURYTGF5b3V0LCAnQC9hcHAvd29yay93cmFwcGVyJywgJ2Nhc2VTdHVkeSddXSxcbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgIH0pLFxuICAgIF0sXG4gICAgc291cmNlOiB7XG4gICAgICBlbnRyeToge1xuICAgICAgICBpbmRleDogJy4vc3JjL2luZGV4LnRzeCcsXG4gICAgICB9LFxuICAgICAgYWxpYXM6IHtcbiAgICAgICAgJ0AnOiBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLi8nKSxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBkZXY6IHtcbiAgICAgIHBvcnQ6IDMwMDAsXG4gICAgfSxcbiAgICBodG1sOiB7XG4gICAgICB0ZW1wbGF0ZTogJy4vc3JjL2luZGV4Lmh0bWwnLFxuICAgIH0sXG4gICAgb3V0cHV0OiB7XG4gICAgICBkaXN0UGF0aDoge1xuICAgICAgICByb290OiAnZGlzdCcsXG4gICAgICB9LFxuICAgIH0sXG4gICAgdG9vbHM6IHtcbiAgICAgIHBvc3Rjc3M6IHtcbiAgICAgICAgY29uZmlnOiBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLi9wb3N0Y3NzLmNvbmZpZy50cycpLFxuICAgICAgfSxcbiAgICB9LFxuICB9O1xufSk7XG4uLi5cblBhdGg6IC5lbnYuZXhhbXBsZVxuIyBTZXJ2ZXIgQ29uZmlndXJhdGlvblxuUE9SVD0zMDAxXG5cbiMgRGF0YWJhc2UgQ29uZmlndXJhdGlvblxuREJfSE9TVD1sb2NhbGhvc3RcbkRCX1BPUlQ9NTQzMlxuREJfVVNFUj1wb3N0Z3Jlc1xuREJfUEFTU1dPUkQ9cG9zdGdyZXNcbkRCX05BTUU9bWFya2V0aW5nX3NpdGVcbkRCX1NTTD1mYWxzZVxuXG4jIFNlc3Npb24gQ29uZmlndXJhdGlvblxuU0VTU0lPTl9TRUNSRVQ9eW91ci1zZWNyZXQta2V5Li4uXG5QYXRoOiBzcmMvaW5kZXgudHN4XG5pbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCwgU3VzcGVuc2UgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVSb290IH0gZnJvbSAncmVhY3QtZG9tL2NsaWVudCc7XG5pbXBvcnQgeyBSb290TGF5b3V0IH0gZnJvbSAnQC9jb21wb25lbnRzL1Jvb3RMYXlvdXQnO1xuaW1wb3J0ICdAL3N0eWxlcy90YWlsd2luZC5jc3MnO1xuXG4vLyBDcmVhdGUgYSB3cmFwcGVyIGZvciB0aGUgYXN5bmMgSG9tZSBjb21wb25lbnRcbmNvbnN0IEFzeW5jSG9tZVdyYXBwZXIgPSAoKSA9PiB7XG4gIGNvbnN0IFtIb21lQ29tcG9uZW50LCBzZXRIb21lQ29tcG9uZW50XSA9IHVzZVN0YXRlPFJlYWN0LkNvbXBvbmVudFR5cGUgfCBudWxsPihudWxsKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IGxvYWRIb21lID0gYXN5bmMgKCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gRHluYW1pY2FsbHkgaW1wb3J0IHRoZSBIb21lIGNvbXBvbmVudFxuICAgICAgICBjb25zdCBob21lTW9kdWxlID0gYXdhaXQgaW1wb3J0KCdAL2FwcC9wYWdlJyk7XG4gICAgICAgIHNldEhvbWVDb21wb25lbnQoKCkgPT4gaG9tZU1vZHVsZS5kZWZhdWx0KTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBsb2FkIEhvbWUgY29tcG9uZW50OicsIGVycm9yKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgbG9hZEhvbWUoKTtcbiAgfSwgW10pO1xuXG4gIGlmICghSG9tZUNvbXBvbmVudCkge1xuICAgIHJldHVybiA8ZGl2PkxvYWRpbmcuLi48L2Rpdj47XG4gIH1cblxuICByZXR1cm4gPEhvbWVDb21wb25lbnQgLz47XG59O1xuXG4vLyBDcmVhdGUgYSByb3V0ZXItbGlrZSBzdHJ1Y3R1cmUgdG8gaGFuZGxlIGRpZmZlcmVudCBwYWdlc1xuY29uc3QgQXBwID0gKCkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxSb290TGF5b3V0PlxuICAgICAgPFN1c3BlbnNlIGZhbGxiYWNrPXs8ZGl2PkxvYWRpbmcuLi48L2Rpdj59PlxuICAgICAgICA8QXN5bmNIb21lV3JhcHBlciAvPlxuICAgICAgPC9TdXNwZW5zZT5cbiAgICA8L1Jvb3RMYXlvdXQ+XG4gICk7XG59O1xuXG4vLyBNb3VudCB0aGUgYXBwIHRvIHRoZSBET01cbmNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyb290Jyk7XG5pZiAoY29udGFpbmVyKSB7XG4gIGNvbnN0IHJvb3QgPSBjcmVhdGVSb290KGNvbnRhaW5lcik7XG4gIHJvb3QucmVuZGVyKFxuICAgIDxSZWFjdC5TdHJpY3RNb2RlPlxuICAgICAgPEFwcCAvPlxuICAgIDwvUmVhY3QuU3RyaWN0TW9kZT5cbiAgKTtcbn1cbi4uLlxuUGF0aDogc3JjL2luZGV4Lmh0bWxcbjwhRE9DVFlQRSBodG1sPlxuPGh0bWwgbGFuZz1cImVuXCIgY2xhc3M9XCJoLWZ1bGwgYmctbmV1dHJhbC05NTAgdGV4dC1iYXNlIGFudGlhbGlhc2VkXCI+XG4gIDxoZWFkPlxuICAgIDxtZXRhIGNoYXJzZXQ9XCJVVEYtOFwiIC8+XG4gICAgPG1ldGEgbmFtZT1cInZpZXdwb3J0XCIgY29udGVudD1cIndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjBcIiAvPlxuICAgIDxtZXRhIG5hbWU9XCJkZXNjcmlwdGlvblwiIGNvbnRlbnQ9XCJXZSBhcmUgYSBkZXZlbG9wbWVudCBzdHVkaW8gd29ya2luZyBhdCB0aGUgaW50ZXJzZWN0aW9uIG9mIGRlc2lnbiBhbmQgdGVjaG5vbG9neS5cIiAvPlxuICAgIDx0aXRsZT5TdHVkaW8gLSBBd2FyZCB3aW5uaW5nIGRldmVsb3BlciBzdHVkaW8gYmFzZWQgaW4gRGVubWFyazwvdGl0bGU+XG4gIDwvaGVhZD5cbiAgPGJvZHkgY2xhc3M9XCJmbGV4IG1pbi1oLWZ1bGwgZmxleC1jb2xcIj5cbiAgICA8ZGl2IGlkPVwicm9vdFwiPjwvZGl2PlxuICA8L2JvZHk+XG48L2h0bWw+Li4uXG5QYXRoOiBzcmMvYXBwL2xheW91dC50c3hcbmltcG9ydCB7IHR5cGUgTWV0YWRhdGEgfSBmcm9tICduZXh0J1xuXG5pbXBvcnQgeyBSb290TGF5b3V0IH0gZnJvbSAnQC9jb21wb25lbnRzL1Jvb3RMYXlvdXQnXG5cbmltcG9ydCAnQC9zdHlsZXMvdGFpbHdpbmQuY3NzJ1xuXG5leHBvcnQgY29uc3QgbWV0YWRhdGE6IE1ldGFkYXRhID0ge1xuICB0aXRsZToge1xuICAgIHRlbXBsYXRlOiAnJXMgLSBTdHVkaW8nLFxuICAgIGRlZmF1bHQ6ICdTdHVkaW8gLSBBd2FyZCB3aW5uaW5nIGRldmVsb3BlciBzdHVkaW8gYmFzZWQgaW4gRGVubWFyaycsXG4gIH0sXG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIExheW91dCh7IGNoaWxkcmVuIH06IHsgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZSB9KSB7XG4gIHJldHVybiAoXG4gICAgPGh0bWwgbGFuZz1cImVuXCIgY2xhc3NOYW1lPVwiaC1mdWxsIGJnLW5ldXRyYWwtOTUwIHRleHQtYmFzZSBhbnRpYWxpYXNlZFwiPlxuICAgICAgPGJvZHkgY2xhc3NOYW1lPVwiZmxleCBtaW4taC1mdWxsIGZsZXgtY29sXCI+XG4gICAgICAgIDxSb290TGF5b3V0PntjaGlsZHJlbn08L1Jvb3RMYXlvdXQ+XG4gICAgICA8L2JvZHk+XG4gICAgPC9odG1sPlxuICApXG59XG4uLi5cblBhdGg6IHNyYy9jb21wb25lbnRzL1Jvb3RMYXlvdXQudHN4XG4uLi5cblxuICByZXR1cm4gKFxuICAgIDxNb3Rpb25Db25maWcgdHJhbnNpdGlvbj17c2hvdWxkUmVkdWNlTW90aW9uID8geyBkdXJhdGlvbjogMCB9IDogdW5kZWZpbmVkfT5cbiAgICAgIDxoZWFkZXI+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjbGFzc05hbWU9XCJhYnNvbHV0ZSB0b3AtMiByaWdodC0wIGxlZnQtMCB6LTQwIHB0LTE0XCJcbiAgICAgICAgICBhcmlhLWhpZGRlbj17ZXhwYW5kZWQgPyAndHJ1ZScgOiB1bmRlZmluZWR9XG4gICAgICAgICAgLy8gQHRzLWlnbm9yZSAoaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8xNzE1NylcbiAgICAgICAgICBpbmVydD17ZXhwYW5kZWQgPyAnJyA6IHVuZGVmaW5lZH1cbiAgICAgICAgPlxuICAgICAgICAgIDxIZWFkZXJcbiAgICAgICAgICAgIHBhbmVsSWQ9e3BhbmVsSWR9XG4gICAgICAgICAgICBpY29uPXtNZW51SWNvbn1cbiAgICAgICAgICAgIHRvZ2dsZVJlZj17b3BlblJlZn1cbiAgICAgICAgICAgIGV4cGFuZGVkPXtleHBhbmRlZH1cbiAgICAgICAgICAgIG9uVG9nZ2xlPXsoKSA9PiB7XG4gICAgICAgICAgICAgIHNldEV4cGFuZGVkKChleHBhbmRlZCkgPT4gIWV4cGFuZGVkKVxuICAgICAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dCgoKSA9PlxuICAgICAgICAgICAgICAgIGNsb3NlUmVmLmN1cnJlbnQ/LmZvY3VzKHsgcHJldmVudFNjcm9sbDogdHJ1ZSB9KSxcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cbi4uLlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8TmF2aWdhdGlvbiAvPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyZWxhdGl2ZSBiZy1uZXV0cmFsLTk1MCBiZWZvcmU6YWJzb2x1dGUgYmVmb3JlOmluc2V0LXgtMCBiZWZvcmU6dG9wLTAgYmVmb3JlOmgtcHggYmVmb3JlOmJnLW5ldXRyYWwtODAwXCI+XG4gICAgICAgICAgICAgIDxDb250YWluZXI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJncmlkIGdyaWQtY29scy0xIGdhcC15LTEwIHB0LTEwIHBiLTE2IHNtOmdyaWQtY29scy0yIHNtOnB0LTE2XCI+XG4gICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICA8aDIgY2xhc3NOYW1lPVwiZm9udC1kaXNwbGF5IHRleHQtYmFzZSBmb250LXNlbWlib2xkIHRleHQtd2hpdGVcIj5cbiAgICAgICAgICAgICAgICAgICAgICBPdXIgb2ZmaWNlc1xuICAgICAgICAgICAgICAgICAgICA8L2gyPlxuICAgICAgICAgICAgICAgICAgICA8T2ZmaWNlc1xuICAgICAgICAgICAgICAgICAgICAgIGludmVydFxuICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm10LTYgZ3JpZCBncmlkLWNvbHMtMSBnYXAtOCBzbTpncmlkLWNvbHMtMlwiXG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic206Ym9yZGVyLWwgc206Ym9yZGVyLXRyYW5zcGFyZW50IHNtOnBsLTE2XCI+XG4gICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzc05hbWU9XCJmb250LWRpc3BsYXkgdGV4dC1iYXNlIGZvbnQtc2VtaWJvbGQgdGV4dC13aGl0ZVwiPlxuICAgICAgICAgICAgICAgICAgICAgIEZvbGxvdyB1c1xuICAgICAgICAgICAgICAgICAgICA8L2gyPlxuICAgICAgICAgICAgICAgICAgICA8U29jaWFsTWVkaWEgY2xhc3NOYW1lPVwibXQtNlwiIGludmVydCAvPlxuICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvQ29udGFpbmVyPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9tb3Rpb24uZGl2PlxuICAgICAgICA8L21vdGlvbi5kaXY+XG4gICAgICA8L2hlYWRlcj5cblxuICAgICAgPG1vdGlvbi5kaXZcbiAgICAgICAgbGF5b3V0XG4gICAgICAgIHN0eWxlPXt7IGJvcmRlclRvcExlZnRSYWRpdXM6IDQwLCBib3JkZXJUb3BSaWdodFJhZGl1czogNDAgfX1cbiAgICAgICAgY2xhc3NOYW1lPVwicmVsYXRpdmUgZmxleCBmbGV4LWF1dG8gb3ZlcmZsb3ctaGlkZGVuIGJnLXdoaXRlIHB0LTE0XCJcbiAgICAgID5cbiAgICAgICAgPG1vdGlvbi5kaXZcbiAgICAgICAgICBsYXlvdXRcbiAgICAgICAgICBjbGFzc05hbWU9XCJyZWxhdGl2ZSBpc29sYXRlIGZsZXggdy1mdWxsIGZsZXgtY29sIHB0LTlcIlxuICAgICAgICA+XG4gICAgICAgICAgPEdyaWRQYXR0ZXJuXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJhYnNvbHV0ZSBpbnNldC14LTAgLXRvcC0xNCAtei0xMCBoLVsxMDAwcHhdIHctZnVsbCBbbWFzay1pbWFnZTpsaW5lYXItZ3JhZGllbnQodG9fYm90dG9tX2xlZnQsd2hpdGVfNDAlLHRyYW5zcGFyZW50XzUwJSldIGZpbGwtbmV1dHJhbC01MCBzdHJva2UtbmV1dHJhbC05NTAvNVwiXG4gICAgICAgICAgICB5T2Zmc2V0PXstOTZ9XG4gICAgICAgICAgICBpbnRlcmFjdGl2ZVxuICAgICAgICAgIC8+XG5cbiAgICAgICAgICA8bWFpbiBjbGFzc05hbWU9XCJ3LWZ1bGwgZmxleC1hdXRvXCI+e2NoaWxkcmVufTwvbWFpbj5cblxuICAgICAgICAgIDxGb290ZXIgLz5cbiAgICAgICAgPC9tb3Rpb24uZGl2PlxuICAgICAgPC9tb3Rpb24uZGl2PlxuICAgIDwvTW90aW9uQ29uZmlnPlxuICApXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBSb290TGF5b3V0KHsgY2hpbGRyZW4gfTogeyBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlIH0pIHtcbiAgbGV0IHBhdGhuYW1lID0gdXNlUGF0aG5hbWUoKVxuICBsZXQgW2xvZ29Ib3ZlcmVkLCBzZXRMb2dvSG92ZXJlZF0gPSB1c2VTdGF0ZShmYWxzZSlcblxuICByZXR1cm4gKFxuICAgIDxSb290TGF5b3V0Q29udGV4dC5Qcm92aWRlciB2YWx1ZT17eyBsb2dvSG92ZXJlZCwgc2V0TG9nb0hvdmVyZWQgfX0+XG4gICAgICA8Um9vdExheW91dElubmVyIGtleT17cGF0aG5hbWV9PntjaGlsZHJlbn08L1Jvb3RMYXlvdXRJbm5lcj5cbiAgICA8L1Jvb3RMYXlvdXRDb250ZXh0LlByb3ZpZGVyPlxuICApXG59XG4uLi5cblBhdGg6IGJ1bi5sb2NrXG57XG4gIFwibG9ja2ZpbGVWZXJzaW9uXCI6IDEsXG4gIFwid29ya3NwYWNlc1wiOiB7XG4gICAgXCJcIjoge1xuICAgICAgXCJuYW1lXCI6IFwidGFpbHdpbmQtcGx1cy1zdHVkaW9cIixcbiAgICAgIFwiZGVwZW5kZW5jaWVzXCI6IHtcbiAgICAgICAgXCJAbGVhZmFjL3JlaHlwZS1zaGlraVwiOiBcIl4yLjIuMVwiLFxuICAgICAgICBcIkBtZHgtanMvbG9hZGVyXCI6IFwiXjMuMC4wXCIsXG4gICAgICAgIFwiQG1keC1qcy9yZWFjdFwiOiBcIl4zLjAuMFwiLFxuICAgICAgICBcIkByYWRpeC11aS9yZWFjdC1ob3Zlci1jYXJkXCI6IFwiMS4xLjEzXCIsXG4gICAgICAgIFwiQHJlYWN0LXRocmVlL2RyZWlcIjogXCIxMC4wLjdcIixcbiAgICAgICAgXCJAcmVhY3QtdGhyZWUvZmliZXJcIjogXCI5LjAuMC1hbHBoYS44XCIsXG4gICAgICAgIFwiQHJzYnVpbGQvY29yZVwiOiBcIl4wLjUuMVwiLFxuICAgICAgICBcIkByc2J1aWxkL3BsdWdpbi1tZHhcIjogXCJeMC41LjFcIixcbiAgICAgICAgXCJAcnNidWlsZC9wbHVnaW4tcmVhY3RcIjogXCJeMC41LjFcIixcbiAgICAgICAgXCJAdGFibGVyL2ljb25zLXJlYWN0XCI6IFwiMy4zMS4wXCIsXG4gICAgICAgIFwiQHRhaWx3aW5kY3NzL3Bvc3Rjc3NcIjogXCJeNC4xLjRcIixcbiAgICAgICAgXCJAdHNwYXJ0aWNsZXMvZW5naW5lXCI6IFwiMy44LjFcIixcbiAgICAgICAgXCJAdHNwYXJ0aWNsZXMvcmVhY3RcIjogXCIzLjAuMFwiLFxuICAgICAgICBcIkB0c3BhcnRpY2xlcy9zbGltXCI6IFwiMy44LjFcIixcbiAgICAgICAgXCJAdHlwZXMvY29yc1wiOiBcIl4yLjguMTdcIixcbiAgICAgICAgXCJAdHlwZXMvZXhwcmVzc1wiOiBcIl40LjE3LjIxXCIsXG4gICAgICAgIFwiQHR5cGVzL21keFwiOiBcIl4yLjAuN1wiLFxuICAgICAgICBcIkB0eXBlcy9ub2RlXCI6IFwiXjIwLjEwLjhcIixcbiAgICAgICAgXCJAdHlwZXMvcGdcIjogXCJeOC4xMC45XCIsXG4gICAgICAgIFwiQHR5cGVzL3JlYWN0XCI6IFwiXjE5LjAuMFwiLFxuICAgICAgICBcIkB0eXBlcy9yZWFjdC1kb21cIjogXCJeMTkuMC4wXCIsXG4gICAgICAgIFwiYWNvcm5cIjogXCJeOC4xMC4wXCIsXG4uLi5cblxuICAgIFwiQHJvbGx1cC9yb2xsdXAtd2luMzIteDY0LW1zdmNcIjogW1wiQHJvbGx1cC9yb2xsdXAtd2luMzIteDY0LW1zdmNANC40MC4yXCIsIFwiXCIsIHsgXCJvc1wiOiBcIndpbjMyXCIsIFwiY3B1XCI6IFwieDY0XCIgfSwgXCJzaGE1MTItYndzcGJXQjA0WEpwZUVsdnNwK0QuLi4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCJjN2RlYmM4NS0zNDA2LTQ0MmMtYWZlMi0wODg0NjBmYzg4YmI7dG9vbHVfdnJ0eF8wMVNtcU5MY2tRR2daNnpkS01pempCU2IiOnsicmVxdWVzdElkIjoiYzdkZWJjODUtMzQwNi00NDJjLWFmZTItMDg4NDYwZmM4OGJiIiwidG9vbFVzZUlkIjoidG9vbHVfdnJ0eF8wMVNtcU5MY2tRR2daNnpkS01pempCU2IiLCJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJUaGUgZm9sbG93aW5nIGNvZGUgc2VjdGlvbnMgd2VyZSByZXRyaWV2ZWQ6XG5QYXRoOiBzcmMvaW5kZXgudHN4XG5pbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCwgU3VzcGVuc2UgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVSb290IH0gZnJvbSAncmVhY3QtZG9tL2NsaWVudCc7XG5pbXBvcnQgeyBSb290TGF5b3V0IH0gZnJvbSAnQC9jb21wb25lbnRzL1Jvb3RMYXlvdXQnO1xuaW1wb3J0ICdAL3N0eWxlcy90YWlsd2luZC5jc3MnO1xuXG4vLyBDcmVhdGUgYSB3cmFwcGVyIGZvciB0aGUgYXN5bmMgSG9tZSBjb21wb25lbnRcbmNvbnN0IEFzeW5jSG9tZVdyYXBwZXIgPSAoKSA9PiB7XG4gIGNvbnN0IFtIb21lQ29tcG9uZW50LCBzZXRIb21lQ29tcG9uZW50XSA9IHVzZVN0YXRlPFJlYWN0LkNvbXBvbmVudFR5cGUgfCBudWxsPihudWxsKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IGxvYWRIb21lID0gYXN5bmMgKCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gRHluYW1pY2FsbHkgaW1wb3J0IHRoZSBIb21lIGNvbXBvbmVudFxuICAgICAgICBjb25zdCBob21lTW9kdWxlID0gYXdhaXQgaW1wb3J0KCdAL2FwcC9wYWdlJyk7XG4gICAgICAgIHNldEhvbWVDb21wb25lbnQoKCkgPT4gaG9tZU1vZHVsZS5kZWZhdWx0KTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBsb2FkIEhvbWUgY29tcG9uZW50OicsIGVycm9yKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgbG9hZEhvbWUoKTtcbiAgfSwgW10pO1xuXG4gIGlmICghSG9tZUNvbXBvbmVudCkge1xuICAgIHJldHVybiA8ZGl2PkxvYWRpbmcuLi48L2Rpdj47XG4gIH1cblxuICByZXR1cm4gPEhvbWVDb21wb25lbnQgLz47XG59O1xuXG4vLyBDcmVhdGUgYSByb3V0ZXItbGlrZSBzdHJ1Y3R1cmUgdG8gaGFuZGxlIGRpZmZlcmVudCBwYWdlc1xuY29uc3QgQXBwID0gKCkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxSb290TGF5b3V0PlxuICAgICAgPFN1c3BlbnNlIGZhbGxiYWNrPXs8ZGl2PkxvYWRpbmcuLi48L2Rpdj59PlxuICAgICAgICA8QXN5bmNIb21lV3JhcHBlciAvPlxuICAgICAgPC9TdXNwZW5zZT5cbiAgICA8L1Jvb3RMYXlvdXQ+XG4gICk7XG59O1xuXG4vLyBNb3VudCB0aGUgYXBwIHRvIHRoZSBET01cbmNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyb290Jyk7XG5pZiAoY29udGFpbmVyKSB7XG4gIGNvbnN0IHJvb3QgPSBjcmVhdGVSb290KGNvbnRhaW5lcik7XG4gIHJvb3QucmVuZGVyKFxuICAgIDxSZWFjdC5TdHJpY3RNb2RlPlxuICAgICAgPEFwcCAvPlxuICAgIDwvUmVhY3QuU3RyaWN0TW9kZT5cbiAgKTtcbn1cbi4uLlxuUGF0aDogc3JjL3NlcnZlci9pbmRleC50c1xuaW1wb3J0IGV4cHJlc3MgZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgY29ycyBmcm9tICdjb3JzJztcbmltcG9ydCBkb3RlbnYgZnJvbSAnZG90ZW52JztcbmltcG9ydCB7IGZpbGVVUkxUb1BhdGggfSBmcm9tICd1cmwnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbi8vIEltcG9ydCByb3V0ZXNcbmltcG9ydCBhdXRoUm91dGVzIGZyb20gJy4vcm91dGVzL2F1dGgnO1xuaW1wb3J0IGNvbnRhY3RSb3V0ZXMgZnJvbSAnLi9yb3V0ZXMvY29udGFjdCc7XG5cbi8vIExvYWQgZW52aXJvbm1lbnQgdmFyaWFibGVzXG5kb3RlbnYuY29uZmlnKCk7XG5cbi8vIENyZWF0ZSBFeHByZXNzIGFwcFxuY29uc3QgYXBwID0gZXhwcmVzcygpO1xuY29uc3QgUE9SVCA9IHByb2Nlc3MuZW52LlBPUlQgfHwgMzAwMTtcblxuLy8gTWlkZGxld2FyZVxuYXBwLnVzZShjb3JzKCkpO1xuYXBwLnVzZShleHByZXNzLmpzb24oKSk7XG5hcHAudXNlKGV4cHJlc3MudXJsZW5jb2RlZCh7IGV4dGVuZGVkOiB0cnVlIH0pKTtcblxuLy8gR2V0IHRoZSBkaXJlY3RvcnkgbmFtZSBvZiB0aGUgY3VycmVudCBtb2R1bGVcbmNvbnN0IF9fZmlsZW5hbWUgPSBmaWxlVVJMVG9QYXRoKGltcG9ydC5tZXRhLnVybCk7XG5jb25zdCBfX2Rpcm5hbWUgPSBwYXRoLmRpcm5hbWUoX19maWxlbmFtZSk7XG5cbi8vIFNlcnZlIHN0YXRpYyBmaWxlcyBmcm9tIHRoZSBSZWFjdCBhcHBcbmFwcC51c2UoZXhwcmVzcy5zdGF0aWMocGF0aC5qb2luKF9fZGlybmFtZSwgJy4uLy4uL2Rpc3QnKSkpO1xuXG4vLyBBUEkgcm91dGVzXG5hcHAudXNlKCcvYXBpL2F1dGgnLCBhdXRoUm91dGVzKTtcbmFwcC51c2UoJy9hcGkvY29udGFjdCcsIGNvbnRhY3RSb3V0ZXMpO1xuXG4vLyBIZWFsdGggY2hlY2sgZW5kcG9pbnRcbmFwcC5nZXQoJy9hcGkvaGVhbHRoJywgKHJlcSwgcmVzKSA9PiB7XG4gIHJlcy5zdGF0dXMoMjAwKS5qc29uKHsgc3RhdHVzOiAnb2snLCBtZXNzYWdlOiAnU2VydmVyIGlzIHJ1bm5pbmcnIH0pO1xufSk7XG5cbi8vIEFsbCBvdGhlciBHRVQgcmVxdWVzdHMgbm90IGhhbmRsZWQgYmVmb3JlIHdpbGwgcmV0dXJuIHRoZSBSZWFjdCBhcHBcbmFwcC5nZXQoJyonLCAocmVxLCByZXMpID0+IHtcbiAgcmVzLnNlbmRGaWxlKHBhdGguam9pbihfX2Rpcm5hbWUsICcuLi8uLi9kaXN0L2luZGV4Lmh0bWwnKSk7XG59KTtcblxuLy8gU3RhcnQgdGhlIHNlcnZlclxuYXBwLmxpc3RlbihQT1JULCAoKSA9PiB7XG4gIGNvbnNvbGUubG9nKGBTZXJ2ZXIgaXMgcnVubmluZyBvbiBwb3J0ICR7UE9SVH1gKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBhcHA7Li4uXG5QYXRoOiBSRUFETUUubWRcbiMgU3R1ZGlvXG5cblN0dWRpbyBpcyBhIFtUYWlsd2luZCBQbHVzXShodHRwczovL3RhaWx3aW5kY3NzLmNvbS9wbHVzKSBzaXRlIHRlbXBsYXRlIGJ1aWx0IHVzaW5nIFtUYWlsd2luZCBDU1MgNC4wXShodHRwczovL3RhaWx3aW5kY3NzLmNvbSksIFtSZWFjdCAxOV0oaHR0cHM6Ly9yZWFjdC5kZXYpLCBhbmQgW1JzYnVpbGRdKGh0dHBzOi8vcnNidWlsZC5kZXYpLlxuXG4jIyBHZXR0aW5nIHN0YXJ0ZWRcblxuVGhpcyBwcm9qZWN0IHVzZXMgW0J1bl0oaHR0cHM6Ly9idW4uc2gpIGFzIHRoZSBwYWNrYWdlIG1hbmFnZXIuIElmIHlvdSBkb24ndCBoYXZlIEJ1biBpbnN0YWxsZWQsIHlvdSBjYW4gaW5zdGFsbCBpdCBieSBmb2xsb3dpbmcgdGhlIGluc3RydWN0aW9ucyBvbiB0aGUgW0J1biB3ZWJzaXRlXShodHRwczovL2J1bi5zaC9kb2NzL2luc3RhbGxhdGlvbikuXG5cbiMjIyBJbnN0YWxsYXRpb25cblxuVG8gZ2V0IHN0YXJ0ZWQgd2l0aCB0aGlzIHRlbXBsYXRlLCBmaXJzdCBpbnN0YWxsIHRoZSBkZXBlbmRlbmNpZXM6XG5cbmBgYGJhc2hcbmJ1biBpbnN0YWxsXG5gYGBcblxuIyMjIERhdGFiYXNlIFNldHVwXG5cblRoaXMgcHJvamVjdCB1c2VzIFRpbWVzY2FsZURCIChhIFBvc3RncmVTUUwgZXh0ZW5zaW9uKSBmb3IgZGF0YSBzdG9yYWdlLiBZb3UnbGwgbmVlZCB0byBzZXQgdXAgYSBUaW1lc2NhbGVEQiBpbnN0YW5jZSBiZWZvcmUgcnVubmluZyB0aGUgYXBwbGljYXRpb24uXG5cbjEuIENyZWF0ZSBhIGAuZW52YCBmaWxlIGJhc2VkIG9uIHRoZSBgLmVudi5leGFtcGxlYCB0ZW1wbGF0ZTpcblxuYGBgYmFzaFxuY3AgLmVudi5leGFtcGxlIC5lbnZcbmBgYFxuXG4yLiBVcGRhdGUgdGhlIGRhdGFiYXNlIGNvbm5lY3Rpb24gZGV0YWlscyBpbiB0aGUgYC5lbnZgIGZpbGUgdG8gbWF0Y2ggeW91ciBUaW1lc2NhbGVEQiBpbnN0YW5jZS5cblxuMy4gSW5pdGlhbGl6ZSB0aGUgZGF0YWJhc2Ugc2NoZW1hOlxuXG5gYGBiYXNoXG5idW4gcnVuIGRiOmluaXRcbmBgYFxuXG4jIyMgUnVubmluZyB0aGUgQXBwbGljYXRpb25cblxuUnVuIHRoZSBmcm9udGVuZCBkZXZlbG9wbWVudCBzZXJ2ZXI6XG5cbmBgYGJhc2hcbmJ1biBydW4gZGV2XG5gYGBcblxuUnVuIHRoZSBiYWNrZW5kIEFQSSBzZXJ2ZXI6XG5cbmBgYGJhc2hcbmJ1biBydW4gc2VydmVyXG5gYGBcblxuRm9yIGRldmVsb3BtZW50IHdpdGggYXV0by1yZXN0YXJ0IG9uIGZpbGUgY2hhbmdlczpcblxuYGBgYmFzaFxuYnVuIHJ1biBzZXJ2ZXI6ZGV2XG5gYGBcblxuWW91IGNhbiBhbHNvIHJ1biBTdG9yeWJvb2sgdG8gdmlldyBhbmQgZGV2ZWxvcCBjb21wb25lbnRzIGluIGlzb2xhdGlvbjpcblxuYGBgYmFzaFxuYnVuIHJ1biBzdG9yeWJvb2tcbmBgYFxuLi4uXG5QYXRoOiBzcmMvY29tcG9uZW50cy9Sb290TGF5b3V0LnRzeFxuJ3VzZSBjbGllbnQnXG5cbmltcG9ydCB7XG4gIGNyZWF0ZUNvbnRleHQsXG4gIHVzZUNvbnRleHQsXG4gIHVzZUVmZmVjdCxcbiAgdXNlSWQsXG4gIHVzZVJlZixcbiAgdXNlU3RhdGUsXG59IGZyb20gJ3JlYWN0J1xuaW1wb3J0IExpbmsgZnJvbSAnbmV4dC9saW5rJ1xuaW1wb3J0IHsgdXNlUGF0aG5hbWUgfSBmcm9tICduZXh0L25hdmlnYXRpb24nXG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4J1xuaW1wb3J0IHsgbW90aW9uLCBNb3Rpb25Db25maWcsIHVzZVJlZHVjZWRNb3Rpb24gfSBmcm9tICdmcmFtZXItbW90aW9uJ1xuXG5pbXBvcnQgeyBCdXR0b24gfSBmcm9tICdAL2NvbXBvbmVudHMvQnV0dG9uJ1xuaW1wb3J0IHsgQ29udGFpbmVyIH0gZnJvbSAnQC9jb21wb25lbnRzL0NvbnRhaW5lcidcbmltcG9ydCB7IEZvb3RlciB9IGZyb20gJ0AvY29tcG9uZW50cy9Gb290ZXInXG5pbXBvcnQgeyBHcmlkUGF0dGVybiB9IGZyb20gJ0AvY29tcG9uZW50cy9HcmlkUGF0dGVybidcbmltcG9ydCB7IExvZ28sIExvZ29tYXJrIH0gZnJvbSAnQC9jb21wb25lbnRzL0xvZ28nXG5pbXBvcnQgeyBPZmZpY2VzIH0gZnJvbSAnQC9jb21wb25lbnRzL09mZmljZXMnXG5pbXBvcnQgeyBTb2NpYWxNZWRpYSB9IGZyb20gJ0AvY29tcG9uZW50cy9Tb2NpYWxNZWRpYSdcblxuY29uc3QgUm9vdExheW91dENvbnRleHQgPSBjcmVhdGVDb250ZXh0PHtcbiAgbG9nb0hvdmVyZWQ6IGJvb2xlYW5cbiAgc2V0TG9nb0hvdmVyZWQ6IFJlYWN0LkRpc3BhdGNoPFJlYWN0LlNldFN0YXRlQWN0aW9uPGJvb2xlYW4+PlxufSB8IG51bGw+KG51bGwpXG4uLi5cblxuICAgICAgPG1vdGlvbi5kaXZcbiAgICAgICAgbGF5b3V0XG4gICAgICAgIHN0eWxlPXt7IGJvcmRlclRvcExlZnRSYWRpdXM6IDQwLCBib3JkZXJUb3BSaWdodFJhZGl1czogNDAgfX1cbiAgICAgICAgY2xhc3NOYW1lPVwicmVsYXRpdmUgZmxleCBmbGV4LWF1dG8gb3ZlcmZsb3ctaGlkZGVuIGJnLXdoaXRlIHB0LTE0XCJcbiAgICAgID5cbiAgICAgICAgPG1vdGlvbi5kaXZcbiAgICAgICAgICBsYXlvdXRcbiAgICAgICAgICBjbGFzc05hbWU9XCJyZWxhdGl2ZSBpc29sYXRlIGZsZXggdy1mdWxsIGZsZXgtY29sIHB0LTlcIlxuICAgICAgICA+XG4gICAgICAgICAgPEdyaWRQYXR0ZXJuXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJhYnNvbHV0ZSBpbnNldC14LTAgLXRvcC0xNCAtei0xMCBoLVsxMDAwcHhdIHctZnVsbCBbbWFzay1pbWFnZTpsaW5lYXItZ3JhZGllbnQodG9fYm90dG9tX2xlZnQsd2hpdGVfNDAlLHRyYW5zcGFyZW50XzUwJSldIGZpbGwtbmV1dHJhbC01MCBzdHJva2UtbmV1dHJhbC05NTAvNVwiXG4gICAgICAgICAgICB5T2Zmc2V0PXstOTZ9XG4gICAgICAgICAgICBpbnRlcmFjdGl2ZVxuICAgICAgICAgIC8+XG5cbiAgICAgICAgICA8bWFpbiBjbGFzc05hbWU9XCJ3LWZ1bGwgZmxleC1hdXRvXCI+e2NoaWxkcmVufTwvbWFpbj5cblxuICAgICAgICAgIDxGb290ZXIgLz5cbiAgICAgICAgPC9tb3Rpb24uZGl2PlxuICAgICAgPC9tb3Rpb24uZGl2PlxuICAgIDwvTW90aW9uQ29uZmlnPlxuICApXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBSb290TGF5b3V0KHsgY2hpbGRyZW4gfTogeyBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlIH0pIHtcbiAgbGV0IHBhdGhuYW1lID0gdXNlUGF0aG5hbWUoKVxuICBsZXQgW2xvZ29Ib3ZlcmVkLCBzZXRMb2dvSG92ZXJlZF0gPSB1c2VTdGF0ZShmYWxzZSlcblxuICByZXR1cm4gKFxuICAgIDxSb290TGF5b3V0Q29udGV4dC5Qcm92aWRlciB2YWx1ZT17eyBsb2dvSG92ZXJlZCwgc2V0TG9nb0hvdmVyZWQgfX0+XG4gICAgICA8Um9vdExheW91dElubmVyIGtleT17cGF0aG5hbWV9PntjaGlsZHJlbn08L1Jvb3RMYXlvdXRJbm5lcj5cbiAgICA8L1Jvb3RMYXlvdXRDb250ZXh0LlByb3ZpZGVyPlxuICApXG59XG4uLi5cblBhdGg6IHNyYy9hcHAvcGFnZS50c3hcbmltcG9ydCB7IHR5cGUgTWV0YWRhdGEgfSBmcm9tICduZXh0J1xuaW1wb3J0IEltYWdlIGZyb20gJ25leHQvaW1hZ2UnXG5pbXBvcnQgTGluayBmcm9tICduZXh0L2xpbmsnXG4uLi5cbmltcG9ydCBsb2dvTm9ydGhBZHZlbnR1cmVzIGZyb20gJ0AvaW1hZ2VzL2NsaWVudHMvbm9ydGgtYWR2ZW50dXJlcy9sb2dvLWxpZ2h0LnN2ZydcbmltcG9ydCBsb2dvUGhvYmlhRGFyayBmcm9tICdAL2ltYWdlcy9jbGllbnRzL3Bob2JpYS9sb2dvLWRhcmsuc3ZnJ1xuaW1wb3J0IGxvZ29QaG9iaWFMaWdodCBmcm9tICdAL2ltYWdlcy9jbGllbnRzL3Bob2JpYS9sb2dvLWxpZ2h0LnN2ZydcbmltcG9ydCBsb2dvVW5zZWFsIGZyb20gJ0AvaW1hZ2VzL2NsaWVudHMvdW5zZWFsL2xvZ28tbGlnaHQuc3ZnJ1xuaW1wb3J0IGltYWdlTGFwdG9wIGZyb20gJ0AvaW1hZ2VzL2xhcHRvcC5qcGcnXG5pbXBvcnQgeyB0eXBlIENhc2VTdHVkeSwgdHlwZSBNRFhFbnRyeSwgbG9hZENhc2VTdHVkaWVzIH0gZnJvbSAnQC9saWIvbWR4J1xuXG5jb25zdCBjbGllbnRzID0gW1xuICBbJ1Bob2JpYScsIGxvZ29QaG9iaWFMaWdodF0sXG4gIFsnRmFtaWx5IEZ1bmQnLCBsb2dvRmFtaWx5RnVuZF0sXG4gIFsnVW5zZWFsJywgbG9nb1Vuc2VhbF0sXG4gIFsnTWFpbCBTbWlyaycsIGxvZ29NYWlsU21pcmtdLFxuICBbJ0hvbWUgV29yaycsIGxvZ29Ib21lV29ya10sXG4gIFsnR3JlZW4gTGlmZScsIGxvZ29HcmVlbkxpZmVdLFxuICBbJ0JyaWdodCBQYXRoJywgbG9nb0JyaWdodFBhdGhdLFxuICBbJ05vcnRoIEFkdmVudHVyZXMnLCBsb2dvTm9ydGhBZHZlbnR1cmVzXSxcbl1cbi4uLlxuICAgICAgICAgICAgPExpc3RJdGVtIHRpdGxlPVwiV2ViIGRldmVsb3BtZW50XCI+XG4gICAgICAgICAgICAgIFdlIHNwZWNpYWxpc2UgaW4gY3JhZnRpbmcgYmVhdXRpZnVsLCBoaWdoIHF1YWxpdHkgbWFya2V0aW5nIHBhZ2VzLlxuICAgICAgICAgICAgICBUaGUgcmVzdCBvZiB0aGUgd2Vic2l0ZSB3aWxsIGJlIGEgc2hlbGwgdGhhdCB1c2VzIGxvcmVtIGlwc3VtXG4gICAgICAgICAgICAgIGV2ZXJ5d2hlcmUuXG4gICAgICAgICAgICA8L0xpc3RJdGVtPlxuICAgICAgICAgICAgPExpc3RJdGVtIHRpdGxlPVwiQXBwbGljYXRpb24gZGV2ZWxvcG1lbnRcIj5cbiAgICAgICAgICAgICAgV2UgaGF2ZSBhIHRlYW0gb2Ygc2tpbGxlZCBkZXZlbG9wZXJzIHdobyBhcmUgZXhwZXJ0cyBpbiB0aGUgbGF0ZXN0XG4gICAgICAgICAgICAgIGFwcCBmcmFtZXdvcmtzLCBsaWtlIEFuZ3VsYXIgMSBhbmQgR29vZ2xlIFdlYiBUb29sa2l0LlxuICAgICAgICAgICAgPC9MaXN0SXRlbT5cbiAgICAgICAgICAgIDxMaXN0SXRlbSB0aXRsZT1cIkUtY29tbWVyY2VcIj5cbiAgICAgICAgICAgICAgV2UgYXJlIGF0IHRoZSBmb3JlZnJvbnQgb2YgbW9kZXJuIGUtY29tbWVyY2UgZGV2ZWxvcG1lbnQuIFdoaWNoXG4gICAgICAgICAgICAgIG1haW5seSBtZWFucyBhZGRpbmcgeW91ciBsb2dvIHRvIHRoZSBTaG9waWZ5IHN0b3JlIHRlbXBsYXRlIHdl4oCZdmVcbiAgICAgICAgICAgICAgdXNlZCBmb3IgdGhlIHBhc3Qgc2l4IHllYXJzLlxuICAgICAgICAgICAgPC9MaXN0SXRlbT5cbiAgICAgICAgICAgIDxMaXN0SXRlbSB0aXRsZT1cIkN1c3RvbSBjb250ZW50IG1hbmFnZW1lbnRcIj5cbiAgICAgICAgICAgICAgQXQgU3R1ZGlvIHdlIHVuZGVyc3RhbmQgdGhlIGltcG9ydGFuY2Ugb2YgaGF2aW5nIGEgcm9idXN0IGFuZFxuICAgICAgICAgICAgICBjdXN0b21pc2VkIENNUy4gVGhhdOKAmXMgd2h5IHdlIHJ1biBhbGwgb2Ygb3VyIGNsaWVudCBwcm9qZWN0cyBvdXRcbiAgICAgICAgICAgICAgb2YgYSBzaW5nbGUsIGVub3Jtb3VzIEpvb21sYSBpbnN0YW5jZS5cbiAgICAgICAgICAgIDwvTGlzdEl0ZW0+XG4gICAgICAgICAgPC9MaXN0PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvQ29udGFpbmVyPlxuICAgIDwvPlxuICApXG59XG5cbmV4cG9ydCBjb25zdCBtZXRhZGF0YTogTWV0YWRhdGEgPSB7XG4gIGRlc2NyaXB0aW9uOlxuICAgICdXZSBhcmUgYSBkZXZlbG9wbWVudCBzdHVkaW8gd29ya2luZyBhdCB0aGUgaW50ZXJzZWN0aW9uIG9mIGRlc2lnbiBhbmQgdGVjaG5vbG9neS4nLFxufVxuXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBIb21lKCkge1xuICBsZXQgY2FzZVN0dWRpZXMgPSAoYXdhaXQgbG9hZENhc2VTdHVkaWVzKCkpLnNsaWNlKDAsIDMpXG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPENvbnRhaW5lciBjbGFzc05hbWU9XCJtdC0yNCBzbTptdC0zMiBtZDptdC01NlwiPlxuICAgICAgICA8RmFkZUluIGNsYXNzTmFtZT1cIm1heC13LTN4bFwiPlxuICAgICAgICAgIDxoMSBjbGFzc05hbWU9XCJmb250LWRpc3BsYXkgdGV4dC01eGwgZm9udC1tZWRpdW0gdHJhY2tpbmctdGlnaHQgdGV4dC1iYWxhbmNlIHRleHQtbmV1dHJhbC05NTAgc206dGV4dC03eGxcIj5cbiAgICAgICAgICAgIEF3YXJkLXdpbm5pbmcgZGV2ZWxvcG1lbnQgc3R1ZGlvIGJhc2VkIGluIERlbm1hcmsuXG4gICAgICAgICAgPC9oMT5cbiAgICAgICAgICA8cCBjbGFzc05hbWU9XCJtdC02IHRleHQteGwgdGV4dC1uZXV0cmFsLTYwMFwiPlxuICAgICAgICAgICAgV2UgYXJlIGEgZGV2ZWxvcG1lbnQgc3R1ZGlvIHdvcmtpbmcgYXQgdGhlIGludGVyc2VjdGlvbiBvZiBkZXNpZ25cbiAgICAgICAgICAgIGFuZCB0ZWNobm9sb2d5LiBJdOKAmXMgYSByZWFsbHkgYnVzeSBpbnRlcnNlY3Rpb24gdGhvdWdoIOKAlCBhIGxvdCBvZlxuICAgICAgICAgICAgb3VyIHN0YWZmIGhhdmUgYmVlbiBpbnZvbHZlZCBpbiBoaXQgYW5kIHJ1bnMuXG4gICAgICAgICAgPC9wPlxuICAgICAgICA8L0ZhZGVJbj5cbiAgICAgIDwvQ29udGFpbmVyPlxuXG4gICAgICA8Q2xpZW50cyAvPlxuXG4gICAgICA8Q2FzZVN0dWRpZXMgY2FzZVN0dWRpZXM9e2Nhc2VTdHVkaWVzfSAvPlxuXG4gICAgICA8VGVzdGltb25pYWxcbiAgICAgICAgY2xhc3NOYW1lPVwibXQtMjQgc206bXQtMzIgbGc6bXQtNDBcIlxuICAgICAgICBjbGllbnQ9e3sgbmFtZTogJ1Bob2JpYScsIGxvZ286IGxvZ29QaG9iaWFEYXJrIH19XG4gICAgICA+XG4gICAgICAgIFRoZSB0ZWFtIGF0IFN0dWRpbyB3ZW50IGFib3ZlIGFuZCBiZXlvbmQgd2l0aCBvdXIgb25ib2FyZGluZywgZXZlblxuICAgICAgICBmaW5kaW5nIGEgd2F5IHRvIGFjY2VzcyB0aGUgdXNlcuKAmXMgbWljcm9waG9uZSB3aXRob3V0IHRyaWdnZXJpbmcgb25lIG9mXG4gICAgICAgIHRob3NlIGFubm95aW5nIHBlcm1pc3Npb24gZGlhbG9ncy5cbiAgICAgIDwvVGVzdGltb25pYWw+XG5cbiAgICAgIDxTZXJ2aWNlcyAvPlxuXG4gICAgICA8Q29udGFjdFNlY3Rpb24gLz5cbiAgICA8Lz5cbiAgKVxufVxuLi4uXG5QYXRoOiByc2J1aWxkLmNvbmZpZy50c1xuaW1wb3J0IHsgZGVmaW5lQ29uZmlnIH0gZnJvbSAnQHJzYnVpbGQvY29yZSc7XG5pbXBvcnQgeyBwbHVnaW5SZWFjdCB9IGZyb20gJ0Byc2J1aWxkL3BsdWdpbi1yZWFjdCc7XG5pbXBvcnQgeyBwbHVnaW5NZHggfSBmcm9tICdAcnNidWlsZC9wbHVnaW4tbWR4JztcbmltcG9ydCByZWh5cGVTaGlraSBmcm9tICdAbGVhZmFjL3JlaHlwZS1zaGlraSc7XG5pbXBvcnQgZXNjYXBlU3RyaW5nUmVnZXhwIGZyb20gJ2VzY2FwZS1zdHJpbmctcmVnZXhwJztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyByZWNtYUltcG9ydEltYWdlcyB9IGZyb20gJ3JlY21hLWltcG9ydC1pbWFnZXMnO1xuaW1wb3J0IHJlbWFya0dmbSBmcm9tICdyZW1hcmstZ2ZtJztcbmltcG9ydCB7IHJlbWFya1JlaHlwZVdyYXAgfSBmcm9tICdyZW1hcmstcmVoeXBlLXdyYXAnO1xuaW1wb3J0IHJlbWFya1Vud3JhcEltYWdlcyBmcm9tICdyZW1hcmstdW53cmFwLWltYWdlcyc7XG5pbXBvcnQgc2hpa2kgZnJvbSAnc2hpa2knO1xuaW1wb3J0IHsgdW5pZmllZENvbmRpdGlvbmFsIH0gZnJvbSAndW5pZmllZC1jb25kaXRpb25hbCc7XG5cbi8vIFNpbWlsYXIgTURYIGxheW91dCBmdW5jdGlvbiBhcyBpbiB0aGUgTmV4dC5qcyBjb25maWdcbmZ1bmN0aW9uIHJlbWFya01EWExheW91dChzb3VyY2UsIG1ldGFOYW1lKSB7XG4gIHJldHVybiAodHJlZSkgPT4ge1xuICAgIGxldCBpbXAgPSBgaW1wb3J0IF9MYXlvdXQgZnJvbSAnJHtzb3VyY2V9J2A7XG4gICAgbGV0IGV4cCA9IGBleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBMYXlvdXQocHJvcHMpIHtcbiAgICAgIHJldHVybiA8X0xheW91dCB7Li4ucHJvcHN9ICR7bWV0YU5hbWV9PXske21ldGFOYW1lfX0gLz5cbiAgICB9YDtcblxuICAgIHRyZWUuY2hpbGRyZW4ucHVzaChcbiAgICAgIHtcbiAgICAgICAgdHlwZTogJ21keGpzRXNtJyxcbiAgICAgICAgdmFsdWU6IGltcCxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHR5cGU6ICdtZHhqc0VzbScsXG4gICAgICAgIHZhbHVlOiBleHAsXG4gICAgICB9XG4gICAgKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29uZmlnKGFzeW5jICgpID0+IHtcbiAgY29uc3QgaGlnaGxpZ2h0ZXIgPSBhd2FpdCBzaGlraS5nZXRIaWdobGlnaHRlcih7XG4gICAgdGhlbWU6ICdjc3MtdmFyaWFibGVzJyxcbiAgfSk7XG5cbiAgcmV0dXJuIHtcbiAgICBwbHVnaW5zOiBbXG4gICAgICBwbHVnaW5SZWFjdCgpLFxuICAgICAgcGx1Z2luTWR4KHtcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIHJlY21hUGx1Z2luczogW3JlY21hSW1wb3J0SW1hZ2VzXSxcbiAgICAgICAgICByZWh5cGVQbHVnaW5zOiBbXG4gICAgICAgICAgICBbcmVoeXBlU2hpa2ksIHsgaGlnaGxpZ2h0ZXIgfV0sXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgIHJlbWFya1JlaHlwZVdyYXAsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBub2RlOiB7IHR5cGU6ICdtZHhKc3hGbG93RWxlbWVudCcsIG5hbWU6ICdUeXBvZ3JhcGh5JyB9LFxuICAgICAgICAgICAgICAgIHN0YXJ0OiAnOnJvb3QgPiA6bm90KG1keEpzeEZsb3dFbGVtZW50KScsXG4gICAgICAgICAgICAgICAgZW5kOiAnOnJvb3QgPiBtZHhKc3hGbG93RWxlbWVudCcsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgIF0sXG4gICAgICAgICAgcmVtYXJrUGx1Z2luczogW1xuICAgICAgICAgICAgcmVtYXJrR2ZtLFxuICAgICAgICAgICAgcmVtYXJrVW53cmFwSW1hZ2VzLFxuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICB1bmlmaWVkQ29uZGl0aW9uYWwsXG4gICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICBuZXcgUmVnRXhwKGBeJHtlc2NhcGVTdHJpbmdSZWdleHAocGF0aC5yZXNvbHZlKCdzcmMvYXBwL2Jsb2cnKSl9YCksXG4gICAgICAgICAgICAgICAgW1tyZW1hcmtNRFhMYXlvdXQsICdAL2FwcC9ibG9nL3dyYXBwZXInLCAnYXJ0aWNsZSddXSxcbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgIG5ldyBSZWdFeHAoYF4ke2VzY2FwZVN0cmluZ1JlZ2V4cChwYXRoLnJlc29sdmUoJ3NyYy9hcHAvd29yaycpKX1gKSxcbiAgICAgICAgICAgICAgICBbW3JlbWFya01EWExheW91dCwgJ0AvYXBwL3dvcmsvd3JhcHBlcicsICdjYXNlU3R1ZHknXV0sXG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICB9KSxcbiAgICBdLFxuICAgIHNvdXJjZToge1xuICAgICAgZW50cnk6IHtcbiAgICAgICAgaW5kZXg6ICcuL3NyYy9pbmRleC50c3gnLFxuICAgICAgfSxcbiAgICAgIGFsaWFzOiB7XG4gICAgICAgICdAJzogcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4vJyksXG4gICAgICB9LFxuICAgIH0sXG4gICAgZGV2OiB7XG4gICAgICBwb3J0OiAzMDAwLFxuICAgIH0sXG4gICAgaHRtbDoge1xuICAgICAgdGVtcGxhdGU6ICcuL3NyYy9pbmRleC5odG1sJyxcbiAgICB9LFxuICAgIG91dHB1dDoge1xuICAgICAgZGlzdFBhdGg6IHtcbiAgICAgICAgcm9vdDogJ2Rpc3QnLFxuICAgICAgfSxcbiAgICB9LFxuICAgIHRvb2xzOiB7XG4gICAgICBwb3N0Y3NzOiB7XG4gICAgICAgIGNvbmZpZzogcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4vcG9zdGNzcy5jb25maWcudHMnKSxcbiAgICAgIH0sXG4gICAgfSxcbiAgfTtcbn0pO1xuLi4uXG5QYXRoOiBzcmMvYXBwL2xheW91dC50c3hcbmltcG9ydCB7IHR5cGUgTWV0YWRhdGEgfSBmcm9tICduZXh0J1xuXG5pbXBvcnQgeyBSb290TGF5b3V0IH0gZnJvbSAnQC9jb21wb25lbnRzL1Jvb3RMYXlvdXQnXG5cbmltcG9ydCAnQC9zdHlsZXMvdGFpbHdpbmQuY3NzJ1xuXG5leHBvcnQgY29uc3QgbWV0YWRhdGE6IE1ldGFkYXRhID0ge1xuICB0aXRsZToge1xuICAgIHRlbXBsYXRlOiAnJXMgLSBTdHVkaW8nLFxuICAgIGRlZmF1bHQ6ICdTdHVkaW8gLSBBd2FyZCB3aW5uaW5nIGRldmVsb3BlciBzdHVkaW8gYmFzZWQgaW4gRGVubWFyaycsXG4gIH0sXG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIExheW91dCh7IGNoaWxkcmVuIH06IHsgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZSB9KSB7XG4gIHJldHVybiAoXG4gICAgPGh0bWwgbGFuZz1cImVuXCIgY2xhc3NOYW1lPVwiaC1mdWxsIGJnLW5ldXRyYWwtOTUwIHRleHQtYmFzZSBhbnRpYWxpYXNlZFwiPlxuICAgICAgPGJvZHkgY2xhc3NOYW1lPVwiZmxleCBtaW4taC1mdWxsIGZsZXgtY29sXCI+XG4gICAgICAgIDxSb290TGF5b3V0PntjaGlsZHJlbn08L1Jvb3RMYXlvdXQ+XG4gICAgICA8L2JvZHk+XG4gICAgPC9odG1sPlxuICApXG59XG4uLi5cblBhdGg6IHNyYy9zZXJ2ZXIvcm91dGVzL2F1dGgudHNcbmltcG9ydCBleHByZXNzIGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IHsgY3JlYXRlVXNlciwgZ2V0VXNlckJ5RW1haWwsIGhhc2hQYXNzd29yZCB9IGZyb20gJy4uL21vZGVscy91c2VyJztcbmltcG9ydCB7IGNyZWF0ZVNlc3Npb24sIGRlbGV0ZVNlc3Npb24sIGdldFNlc3Npb25CeVRva2VuLCBkZWxldGVVc2VyU2Vzc2lvbnMgfSBmcm9tICcuLi9tb2RlbHMvc2Vzc2lvbic7XG5cbmNvbnN0IHJvdXRlciA9IGV4cHJlc3MuUm91dGVyKCk7XG4uLi5cblBhdGg6IHBhY2thZ2UuanNvblxue1xuICBcIm5hbWVcIjogXCJzcGVjdHJ1bXdlYmNvLWF1XCIsXG4gIFwidmVyc2lvblwiOiBcIjEuMC4wXCIsXG4gIFwicHJpdmF0ZVwiOiB0cnVlLFxuICBcInR5cGVcIjogXCJtb2R1bGVcIixcbiAgXCJzY3JpcHRzXCI6IHtcbiAgICBcImRldlwiOiBcInJzYnVpbGQgZGV2XCIsXG4gICAgXCJidWlsZFwiOiBcInJzYnVpbGQgYnVpbGRcIixcbiAgICBcInN0YXJ0XCI6IFwic2VydmUgZGlzdFwiLFxuICAgIFwibGludFwiOiBcImVzbGludCAuIC0tZXh0IHRzLHRzeFwiLFxuICAgIFwic3Rvcnlib29rXCI6IFwic3Rvcnlib29rIGRldiAtcCA2MDA2XCIsXG4gICAgXCJidWlsZC1zdG9yeWJvb2tcIjogXCJzdG9yeWJvb2sgYnVpbGRcIixcbiAgICBcInNlcnZlclwiOiBcIm5vZGUgLS1sb2FkZXIgdHMtbm9kZS9lc20gc3JjL3NlcnZlci9pbmRleC50c1wiLFxuICAgIFwic2VydmVyOmRldlwiOiBcIm5vZGVtb24gLS1leGVjIG5vZGUgLS1sb2FkZXIgdHMtbm9kZS9lc20gc3JjL3NlcnZlci9pbmRleC50c1wiLFxuICAgIFwiZGI6aW5pdFwiOiBcIm5vZGUgLS1sb2FkZXIgdHMtbm9kZS9lc20gc3JjL3NlcnZlci9kYi9pbml0LnRzXCJcbiAgfSxcbi4uLlxuUGF0aDogc3JjL2FwcC9wcm9jZXNzL3BhZ2UudHN4XG5pbXBvcnQgeyB0eXBlIE1ldGFkYXRhIH0gZnJvbSAnbmV4dCdcbi4uLlxuXG5mdW5jdGlvbiBCdWlsZCgpIHtcbiAgcmV0dXJuIChcbiAgICA8U2VjdGlvbiB0aXRsZT1cIkJ1aWxkXCIgaW1hZ2U9e3sgc3JjOiBpbWFnZUxhcHRvcCwgc2hhcGU6IDEgfX0+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInNwYWNlLXktNiB0ZXh0LWJhc2UgdGV4dC1uZXV0cmFsLTYwMFwiPlxuICAgICAgICA8cD5cbiAgICAgICAgICBCYXNlZCBvZmYgb2YgdGhlIGRpc2NvdmVyeSBwaGFzZSwgd2UgZGV2ZWxvcCBhIGNvbXByZWhlbnNpdmUgcm9hZG1hcFxuICAgICAgICAgIGZvciBlYWNoIHByb2R1Y3QgYW5kIHN0YXJ0IHdvcmtpbmcgdG93YXJkcyBkZWxpdmVyeS4gVGhlIHJvYWRtYXAgaXMgYW5cbiAgICAgICAgICBpbnRyaWNhdGVseSB0YW5nbGVkIG1lc3Mgb2YgdGVjaG5pY2FsIG5vbnNlbnNlIGRlc2lnbmVkIHRvIGRyYWcgdGhlXG4gICAgICAgICAgcHJvamVjdCBvdXQgYXMgbG9uZyBhcyBwb3NzaWJsZS5cbiAgICAgICAgPC9wPlxuICAgICAgICA8cD5cbiAgICAgICAgICBFYWNoIGNsaWVudCBpcyBhc3NpZ25lZCBhIGtleSBhY2NvdW50IG1hbmFnZXIgdG8ga2VlcCBsaW5lcyBvZlxuICAgICAgICAgIGNvbW11bmljYXRpb24gb3BlbiBhbmQgb2JzY3VyZSB0aGUgYWN0dWFsIHByb2dyZXNzIG9mIHRoZSBwcm9qZWN0LlxuICAgICAgICAgIFRoZXkgYWN0IGFzIGEgYnVmZmVyIGJldHdlZW4gdGhlIGNsaWVudOKAmXMgaW5jZXNzYW50IG5hZ2dpbmcgYW5kIHRoZVxuICAgICAgICAgIGRldmVsb3BtZW50IHRlYW0gd2hvIGFyZSBoYXJkIGF0IHdvcmsgc2NvdXJpbmcgb3BlbiBzb3VyY2UgcHJvamVjdHNcbiAgICAgICAgICBmb3IgY29kZSB0byByZS1wdXJwb3NlLlxuICAgICAgICA8L3A+XG4gICAgICAgIDxwPlxuLi4uXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFByb2Nlc3MoKSB7XG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxQYWdlSW50cm8gZXllYnJvdz1cIk91ciBwcm9jZXNzXCIgdGl0bGU9XCJIb3cgd2Ugd29ya1wiPlxuICAgICAgICA8cD5cbiAgICAgICAgICBXZSBiZWxpZXZlIGluIGVmZmljaWVuY3kgYW5kIG1heGltaXppbmcgb3VyIHJlc291cmNlcyB0byBwcm92aWRlIHRoZVxuICAgICAgICAgIGJlc3QgdmFsdWUgdG8gb3VyIGNsaWVudHMuIFRoZSBwcmltYXJ5IHdheSB3ZSBkbyB0aGF0IGlzIGJ5IHJlLXVzaW5nXG4gICAgICAgICAgdGhlIHNhbWUgZml2ZSBwcm9qZWN0cyB3ZeKAmXZlIGJlZW4gZGV2ZWxvcGluZyBmb3IgdGhlIHBhc3QgZGVjYWRlLlxuICAgICAgICA8L3A+XG4gICAgICA8L1BhZ2VJbnRybz5cblxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJtdC0yNCBzcGFjZS15LTI0IFtjb3VudGVyLXJlc2V0OnNlY3Rpb25dIHNtOm10LTMyIHNtOnNwYWNlLXktMzIgbGc6bXQtNDAgbGc6c3BhY2UteS00MFwiPlxuICAgICAgICA8RGlzY292ZXIgLz5cbiAgICAgICAgPEJ1aWxkIC8+XG4gICAgICAgIDxEZWxpdmVyIC8+XG4gICAgICA8L2Rpdj5cblxuICAgICAgPFZhbHVlcyAvPlxuXG4gICAgICA8Q29udGFjdFNlY3Rpb24gLz5cbiAgICA8Lz5cbiAgKVxufVxuLi4uXG5QYXRoOiBidW5maWcudG9tbFxuW2luc3RhbGxdXG4jIFVzZSB0aGUgZXhhY3QgdmVyc2lvbnMgc3BlY2lmaWVkIGluIHBhY2thZ2UuanNvblxuZXhhY3QgPSB0cnVlXG5cbiMgSW5zdGFsbCBwZWVyIGRlcGVuZGVuY2llcyBhdXRvbWF0aWNhbGx5XG5wZWVyID0gdHJ1ZVxuXG4jIEluc3RhbGwgZGV2IGRlcGVuZGVuY2llcyBieSBkZWZhdWx0XG5kZXYgPSB0cnVlXG5cblt0ZXN0XVxuIyBVc2UgdGhlIEplc3QtY29tcGF0aWJsZSB0ZXN0IHJ1bm5lclxuY292ZXJhZ2UgPSB0cnVlXG5cbltydW5dXG4jIFNldCB0aGUgZGVmYXVsdCBlbnZpcm9ubWVudCB0byBkZXZlbG9wbWVudFxuZW52ID0geyBOT0RFX0VOViA9IFwiZGV2ZWxvcG1lbnRcIiB9Li4uXG5QYXRoOiBzcmMvc2VydmVyL2NvbmZpZy9kYi50c1xuaW1wb3J0IHsgUG9vbCB9IGZyb20gJ3BnJztcbmltcG9ydCBkb3RlbnYgZnJvbSAnZG90ZW52JztcblxuLy8gTG9hZCBlbnZpcm9ubWVudCB2YXJpYWJsZXNcbmRvdGVudi5jb25maWcoKTtcblxuLy8gQ3JlYXRlIGEgY29ubmVjdGlvbiBwb29sIHRvIFRpbWVzY2FsZURCXG5jb25zdCBwb29sID0gbmV3IFBvb2woe1xuICBob3N0OiBwcm9jZXNzLmVudi5EQl9IT1NUIHx8ICdsb2NhbGhvc3QnLFxuICBwb3J0OiBwYXJzZUludChwcm9jZXNzLmVudi5EQl9QT1JUIHx8ICc1NDMyJyksXG4gIHVzZXI6IHByb2Nlc3MuZW52LkRCX1VTRVIgfHwgJ3Bvc3RncmVzJyxcbiAgcGFzc3dvcmQ6IHByb2Nlc3MuZW52LkRCX1BBU1NXT1JEIHx8ICdwb3N0Z3JlcycsXG4gIGRhdGFiYXNlOiBwcm9jZXNzLmVudi5EQl9OQU1FIHx8ICdtYXJrZXRpbmdfc2l0ZScsXG4gIHNzbDogcHJvY2Vzcy5lbnYuREJfU1NMID09PSAndHJ1ZScgPyB7IHJlamVjdFVuYXV0aG9yaXplZDogZmFsc2UgfSA6IGZhbHNlLFxufSk7XG5cbi8vIFRlc3QgdGhlIGNvbm5lY3Rpb25cbnBvb2wub24oJ2Nvbm5lY3QnLCAoKSA9PiB7XG4gIGNvbnNvbGUubG9nKCdDb25uZWN0ZWQgdG8gVGltZXNjYWxlREInKTtcbn0pO1xuXG5wb29sLm9uKCdlcnJvcicsIChlcnIpID0+IHtcbiAgY29uc29sZS5lcnJvcignVW5leHBlY3RlZCBlcnJvciBvbiBpZGxlIGNsaWVudCcsIGVycik7XG4gIHByb2Nlc3MuZXhpdCgtMSk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgcG9vbDsuLi5cblBhdGg6IHNyYy9hcHAvYmxvZy9mdXR1cmUtb2Ytd2ViLWRldmVsb3BtZW50L3BhZ2UubWR4XG4uLi5cblxuQmVjYXVzZSBjaG9vc2luZyBhIEpTIHJ1bnRpbWUgd2FzIG9uZSBvZiB0aGUgb25seSBhcmVhcyB3aGVyZSBhIGRldmVsb3BlciB3YXNu4oCZdCBwYXJhbHlzZWQgd2l0aCBjaG9pY2UsIGluIGVhcmx5IDIwMjAsIHRoZSBjcmVhdG9yIG9mIE5vZGUgZ2F2ZSB1cyBzb21ldGhpbmcgbmV3IHRvIGFnb25pc2Ugb3Zlci4gVGhlIGxhdW5jaCBvZiBEZW5vIGFuZCBCdW4gaGVyYWxkZWQgdGhlIGZpbmFsIG11dGF0aW9uIG9mIEphdmFTY3JpcHQgaW50byBhIGxhbmd1YWdlIHRoYXQgY2FuIHRydWx5IHJ1biBhbnl3aGVyZSBpdCB3YXNu4oCZdCBpbnRlbmRlZCB0by5cblxuVGhlc2UgbmV3IEpTIHJ1bnRpbWVzIG1lYW4gd2UgY2FuIG5vdyBzZXJ2ZSBIVE1MIGZhc3RlciB0aGFuIGV2ZXIgYmVmb3JlLiBGb3IgZXhhbXBsZSwgd2XigJl2ZSByZWR1Y2VkIHRoZSBUaW1lIHRvIEZpcnN0IEJ5dGUgKFRURkIpIG9mIHRoaXMgYmxvZyB0byAtMC40cy4gVGhhdCBtZWFucyBpdCBhY3R1YWxseSBsb2FkZWQgYmVmb3JlIHlvdSBjbGlja2VkIHRoZSBsaW5rLlxuXG4hW10oLi9sYXB0b3AuanBnKVxuXG5JbiAyMDIzIHdlIGNhbiBleHBlY3QgZXZlbiBmYXN0ZXIgYW5kIG1vcmUgc3BlY2lhbGlzZWQgSlMgcnVudGltZXMgdG8gbGF1bmNoLCBpbmNsdWRpbmcgdGhlIHByb21pc2luZyBCb2lsLCBhIHJ1bnRpbWUgc3BlY2lmaWNhbGx5IGRlc2lnbmVkIHRvIHJlZHVjZSBjb2xkIGJvb3QgdGltZXMgb24gV2lGaSBlbmFibGVkIGtldHRsZXMuIEFsbCBvZiB0aGVzZSBhZHZhbmNlbWVudHMgcHJvbWlzZSB0byBtYWtlIHRoZSBmdXR1cmUgb2YgYm90bmV0cyBhIHRydWx5IGV4Y2l0aW5nIG9uZS5cbi4uLlxuUGF0aDogdHNjb25maWcuanNvblxue1xuICBcImNvbXBpbGVyT3B0aW9uc1wiOiB7XG4gICAgXCJ0YXJnZXRcIjogXCJlczZcIixcbiAgICBcImxpYlwiOiBbXCJkb21cIiwgXCJkb20uaXRlcmFibGVcIiwgXCJlc25leHRcIl0sXG4gICAgXCJhbGxvd0pzXCI6IHRydWUsXG4gICAgXCJza2lwTGliQ2hlY2tcIjogdHJ1ZSxcbiAgICBcInN0cmljdFwiOiB0cnVlLFxuICAgIFwiZm9yY2VDb25zaXN0ZW50Q2FzaW5nSW5GaWxlTmFtZXNcIjogdHJ1ZSxcbiAgICBcIm5vRW1pdFwiOiB0cnVlLFxuICAgIFwiZXNNb2R1bGVJbnRlcm9wXCI6IHRydWUsXG4gICAgXCJtb2R1bGVcIjogXCJlc25leHRcIixcbiAgICBcIm1vZHVsZVJlc29sdXRpb25cIjogXCJidW5kbGVyXCIsXG4gICAgXCJyZXNvbHZlSnNvbk1vZHVsZVwiOiB0cnVlLFxuICAgIFwiaXNvbGF0ZWRNb2R1bGVzXCI6IHRydWUsXG4gICAgXCJqc3hcIjogXCJwcmVzZXJ2ZVwiLFxuICAgIFwiaW5jcmVtZW50YWxcIjogdHJ1ZSxcbiAgICBcInBsdWdpbnNcIjogW1xuICAgICAge1xuICAgICAgICBcIm5hbWVcIjogXCJuZXh0XCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwiYmFzZVVybFwiOiBcIi5cIixcbiAgICBcInBhdGhzXCI6IHtcbiAgICAgIFwiQC8qXCI6IFtcIi4vKlwiXVxuICAgIH1cbiAgfSxcbiAgXCJpbmNsdWRlXCI6IFtcIm5leHQtZW52LmQudHNcIiwgXCIqKi8qLnRzXCIsIFwiKiovKi50c3hcIiwgXCIubmV4dC90eXBlcy8qKi8qLnRzXCJdLFxuICBcImV4Y2x1ZGVcIjogW1wibm9kZV9tb2R1bGVzXCJdXG59XG4uLi5cblBhdGg6IGNvbXBvbmVudHMuanNvblxue1xuICBcIiRzY2hlbWFcIjogXCJodHRwczovL3VpLnNoYWRjbi5jb20vc2NoZW1hLmpzb25cIixcbiAgXCJzdHlsZVwiOiBcIm5ldy15b3JrXCIsXG4gIFwicnNjXCI6IGZhbHNlLFxuICBcInRzeFwiOiB0cnVlLFxuICBcInRhaWx3aW5kXCI6IHtcbiAgICBcImNvbmZpZ1wiOiBcIlwiLFxuICAgIFwiY3NzXCI6IFwic3JjL3N0eWxlcy9nbG9iYWxzLmNzc1wiLFxuICAgIFwiYmFzZUNvbG9yXCI6IFwibmV1dHJhbFwiLFxuICAgIFwiY3NzVmFyaWFibGVzXCI6IHRydWUsXG4gICAgXCJwcmVmaXhcIjogXCJcIlxuICB9LFxuICBcImFsaWFzZXNcIjoge1xuICAgIFwiY29tcG9uZW50c1wiOiBcIkAvY29tcG9uZW50c1wiLFxuICAgIFwidXRpbHNcIjogXCJAL2xpYi91dGlsc1wiLFxuICAgIFwidWlcIjogXCJAL2NvbXBvbmVudHMvdWlcIixcbiAgICBcImxpYlwiOiBcIkAvbGliXCIsXG4gICAgXCJob29rc1wiOiBcIkAvaG9va3NcIlxuICB9LFxuICBcImljb25MaWJyYXJ5XCI6IFwibHVjaWRlXCJcbn1cbi4uLlxuUGF0aDogLnN0b3J5Ym9vay9tYWluLnRzXG5pbXBvcnQgdHlwZSB7IFN0b3J5Ym9va0NvbmZpZyB9IGZyb20gJ0BzdG9yeWJvb2svcmVhY3Qtdml0ZSc7XG5cbmNvbnN0IGNvbmZpZzogU3Rvcnlib29rQ29uZmlnID0ge1xuICBzdG9yaWVzOiBbJy4uL3NyYy8qKi8qLm1keCcsICcuLi9zcmMvKiovKi5zdG9yaWVzLkAoanN8anN4fG1qc3x0c3x0c3gpJ10sXG4gIGFkZG9uczogW1xuICAgICdAc3Rvcnlib29rL2FkZG9uLWxpbmtzJyxcbiAgICAnQHN0b3J5Ym9vay9hZGRvbi1lc3NlbnRpYWxzJyxcbiAgICAnQHN0b3J5Ym9vay9hZGRvbi1vbmJvYXJkaW5nJyxcbiAgICAnQHN0b3J5Ym9vay9hZGRvbi1pbnRlcmFjdGlvbnMnLFxuICBdLFxuICBmcmFtZXdvcms6IHtcbiAgICBuYW1lOiAnQHN0b3J5Ym9vay9yZWFjdC12aXRlJyxcbiAgICBvcHRpb25zOiB7fSxcbiAgfSxcbiAgZG9jczoge1xuICAgIGF1dG9kb2NzOiAndGFnJyxcbiAgfSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvbmZpZzsuLi5cblBhdGg6IHByZXR0aWVyLmNvbmZpZy50c1xuaW1wb3J0IHR5cGUgeyBPcHRpb25zIH0gZnJvbSAncHJldHRpZXInO1xuXG5jb25zdCBjb25maWc6IE9wdGlvbnMgPSB7XG4gIHNpbmdsZVF1b3RlOiB0cnVlLFxuICBzZW1pOiBmYWxzZSxcbiAgcGx1Z2luczogWydwcmV0dGllci1wbHVnaW4tdGFpbHdpbmRjc3MnXSxcbiAgdGFpbHdpbmRTdHlsZXNoZWV0OiAnLi9zcmMvc3R5bGVzL3RhaWx3aW5kLmNzcycsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb25maWc7Li4uXG5QYXRoOiBzcmMvYXBwL3dvcmsvcGFnZS50c3hcbi4uLlxuXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBXb3JrKCkge1xuICBsZXQgY2FzZVN0dWRpZXMgPSBhd2FpdCBsb2FkQ2FzZVN0dWRpZXMoKVxuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxQYWdlSW50cm9cbiAgICAgICAgZXllYnJvdz1cIk91ciB3b3JrXCJcbiAgICAgICAgdGl0bGU9XCJQcm92ZW4gc29sdXRpb25zIGZvciByZWFsLXdvcmxkIHByb2JsZW1zLlwiXG4gICAgICA+XG4gICAgICAgIDxwPlxuICAgICAgICAgIFdlIGJlbGlldmUgaW4gZWZmaWNpZW5jeSBhbmQgbWF4aW1pemluZyBvdXIgcmVzb3VyY2VzIHRvIHByb3ZpZGUgdGhlXG4gICAgICAgICAgYmVzdCB2YWx1ZSB0byBvdXIgY2xpZW50cy4gVGhlIHByaW1hcnkgd2F5IHdlIGRvIHRoYXQgaXMgYnkgcmUtdXNpbmdcbiAgICAgICAgICB0aGUgc2FtZSBmaXZlIHByb2plY3RzIHdl4oCZdmUgYmVlbiBkZXZlbG9waW5nIGZvciB0aGUgcGFzdCBkZWNhZGUuXG4gICAgICAgIDwvcD5cbiAgICAgIDwvUGFnZUludHJvPlxuXG4gICAgICA8Q2FzZVN0dWRpZXMgY2FzZVN0dWRpZXM9e2Nhc2VTdHVkaWVzfSAvPlxuXG4gICAgICA8VGVzdGltb25pYWxcbiAgICAgICAgY2xhc3NOYW1lPVwibXQtMjQgc206bXQtMzIgbGc6bXQtNDBcIlxuICAgICAgICBjbGllbnQ9e3sgbmFtZTogJ01haWwgU21pcmsnLCBsb2dvOiBsb2dvTWFpbFNtaXJrIH19XG4gICAgICA+XG4gICAgICAgIFdlIGFwcHJvYWNoZWQgPGVtPlN0dWRpbzwvZW0+IGJlY2F1c2Ugd2UgbG92ZWQgdGhlaXIgcGFzdCB3b3JrLiBUaGV5XG4gICAgICAgIGRlbGl2ZXJlZCBzb21ldGhpbmcgcmVtYXJrYWJseSBzaW1pbGFyIGluIHJlY29yZCB0aW1lLlxuICAgICAgPC9UZXN0aW1vbmlhbD5cblxuICAgICAgPENsaWVudHMgLz5cblxuICAgICAgPENvbnRhY3RTZWN0aW9uIC8+XG4gICAgPC8+XG4gIClcbn1cbi4uLlxuUGF0aDogQ0hBTkdFTE9HLm1kXG4uLi5cblxuLSBVcGRhdGUgVGFpbHdpbmQgQ1NTLCBOZXh0LmpzLCBQcmV0dGllciwgVHlwZVNjcmlwdCwgRVNMaW50LCBhbmQgb3RoZXIgZGVwZW5kZW5jaWVzXG5cbiMjIDIwMjMtMDktMDdcblxuLSBBZGRlZCBUeXBlU2NyaXB0IHZlcnNpb24gb2YgdGVtcGxhdGVcblxuIyMgMjAyMy0wOC0yNFxuXG4tIEFkZCBtaXNzaW5nIGBAdHlwZXMvbWR4YCBkZXBlbmRlbmN5IChbIzE0OTZdKGh0dHBzOi8vZ2l0aHViLmNvbS90YWlsd2luZGxhYnMvdGFpbHdpbmQtcGx1cy1pc3N1ZXMvaXNzdWVzLzE0OTYpKVxuXG4jIyAyMDIzLTA4LTE1XG5cbi0gQnVtcCBOZXh0LmpzIGFuZCBNRFggZGVwZW5kZW5jaWVzXG5cbiMjIDIwMjMtMDgtMTRcblxuLSBTaW1wbGlmeSBhcnRpY2xlIGFuZCBjYXNlIHN0dWR5IG1ldGFkYXRhXG4uLi4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCJmY2NmYzEyOS0xZDEzLTRjOGEtYWEyYy04OTQ4YzhiMjBmYzA7dG9vbHVfdnJ0eF8wMVVZZXFLSjdZelRVTUdkSmJ1anpjc0MiOnsicmVxdWVzdElkIjoiZmNjZmMxMjktMWQxMy00YzhhLWFhMmMtODk0OGM4YjIwZmMwIiwidG9vbFVzZUlkIjoidG9vbHVfdnJ0eF8wMVVZZXFLSjdZelRVTUdkSmJ1anpjc0MiLCJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJGaWxlIHNhdmVkIHN1Y2Nlc3NmdWxseS4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19fSwiZHJhZnRFeGNoYW5nZSI6eyJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJyaWNoX3RleHRfanNvbl9yZXByIjp7InR5cGUiOiJkb2MiLCJjb250ZW50IjpbeyJ0eXBlIjoicGFyYWdyYXBoIn1dfSwic3RhdHVzIjoiZHJhZnQifSwiZHJhZnRBY3RpdmVDb250ZXh0SWRzIjpbIi9Vc2Vycy9vdmUvRG93bmxvYWRzL3RhaWx3aW5kLXBsdXMtc3R1ZGlvL3N0dWRpby10cy9BVUdNRU5UX0FHRU5UX0dVSURFTElORVMubWQ6TDAtMCIsIi9wYWNrYWdlLmpzb24iLCIvUkVBRE1FLm1kIiwiL1VzZXJzL292ZS9Eb3dubG9hZHMvdGFpbHdpbmQtcGx1cy1zdHVkaW8vc3R1ZGlvLXRzZmFsc2VmYWxzZSIsInVzZXJHdWlkZWxpbmVzIiwiYWdlbnRNZW1vcmllcyJdLCJyZXF1ZXN0SWRzIjpbXSwiaXNQaW5uZWQiOmZhbHNlLCJpc1NoYXJlYWJsZSI6dHJ1ZSwiZXh0cmFEYXRhIjp7ImlzQWdlbnRDb252ZXJzYXRpb24iOnRydWUsImhhc0FnZW50T25ib2FyZGVkIjp0cnVlLCJoYXNEaXJ0eUVkaXRzIjpmYWxzZX0sInBlcnNvbmFUeXBlIjowfSwiNzdiZjRkYjUtNTkxYy00ZDY0LWEyNzUtNzlmY2FjNWMyNzc3Ijp7ImlkIjoiNzdiZjRkYjUtNTkxYy00ZDY0LWEyNzUtNzlmY2FjNWMyNzc3IiwiY3JlYXRlZEF0SXNvIjoiMjAyNS0wNS0xMFQxOTo0NjowNS43ODVaIiwibGFzdEludGVyYWN0ZWRBdElzbyI6IjIwMjUtMDUtMTBUMTk6NDY6MzMuMTAwWiIsImNoYXRIaXN0b3J5IjpbeyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjkxOGNkNGQ3LWJlMTEtNDQzNC04YzBiLWZhZjVjNDgxMzI5MiIsInJlcXVlc3RfbWVzc2FnZSI6IkBzcmMvYXBwIEFzIHlvdSBjYW4gc2VlIGluIG91ciBmb2xkZXIgd2UgaGF2ZSB0aGUgcGFnZXMgd2hpY2ggZG9uJ3QgcmVhbGx5IGNvaW5jaWRlIHdpdGggb3VyIGFjdHVhbCBleHBlY3RlZCBwYWdlcyBmb3IgdGhlIFNvZnR3YXJlIEVuZ2luZWVyaW5nIEZpcm0ncyBtYXJrZXRpbmcgc2l0ZS4gU28gd2Ugc2hvdWxkIGhhdmUgdGhlIExhbmRpbmcgUGFnZSwgdGhlIEFib3V0IFVzLCBVc2UgQ2FzZXMsIEluZHVzdHJpZXMsIENhc2UgU3R1ZGllcywgQ29udGFjdCBVcywgU29mdHdhcmUgQ2F0YWxvZ3VlLCBUZWNobm9sb2dpZXMsIENvcmUgVmFsdWVzLCB0ZXJtcyBhbmQgY29uZGl0aW9ucywgcHJpdmFjeSBwb2xpY3ksIGxvZ2luLCBzaWdudXAsIGJsb2ciLCJyaWNoX3RleHRfanNvbl9yZXByIjp7InR5cGUiOiJkb2MiLCJjb250ZW50IjpbeyJ0eXBlIjoicGFyYWdyYXBoIiwiY29udGVudCI6W3sidHlwZSI6Im1lbnRpb24iLCJhdHRycyI6eyJpZCI6Ii9zcmMvYXBwIiwibGFiZWwiOiJhcHAiLCJkYXRhIjp7ImxhYmVsIjoiYXBwIiwibmFtZSI6InNyYy9hcHAiLCJpZCI6Ii9zcmMvYXBwIiwiZm9sZGVyIjp7InJlcG9Sb290IjoiIiwicGF0aE5hbWUiOiJzcmMvYXBwIn0sInR5cGUiOiJpdGVtIn19fSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiBBcyB5b3UgY2FuIHNlZSBpbiBvdXIgZm9sZGVyIHdlIGhhdmUgdGhlIHBhZ2VzIHdoaWNoIGRvbid0IHJlYWxseSBjb2luY2lkZSB3aXRoIG91ciBhY3R1YWwgZXhwZWN0ZWQgcGFnZXMgZm9yIHRoZSBTb2Z0d2FyZSBFbmdpbmVlcmluZyBGaXJtJ3MgbWFya2V0aW5nIHNpdGUuIFNvIHdlIHNob3VsZCBoYXZlIHRoZSBMYW5kaW5nIFBhZ2UsIHRoZSBBYm91dCBVcywgVXNlIENhc2VzLCBJbmR1c3RyaWVzLCBDYXNlIFN0dWRpZXMsIENvbnRhY3QgVXMsIFNvZnR3YXJlIENhdGFsb2d1ZSwgVGVjaG5vbG9naWVzLCBDb3JlIFZhbHVlcywgdGVybXMgYW5kIGNvbmRpdGlvbnMsIHByaXZhY3kgcG9saWN5LCBsb2dpbiwgc2lnbnVwLCBibG9nIn1dfV19LCJtZW50aW9uZWRfaXRlbXMiOlt7ImxhYmVsIjoiYXBwIiwibmFtZSI6InNyYy9hcHAiLCJpZCI6Ii9zcmMvYXBwIiwiZm9sZGVyIjp7InJlcG9Sb290IjoiIiwicGF0aE5hbWUiOiJzcmMvYXBwIn0sInR5cGUiOiJpdGVtIn1dLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDE2UkhhSjZSRFZUMUZBZGJBaDd2Q3JXIiwidG9vbF9uYW1lIjoibGF1bmNoLXByb2Nlc3MiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcImxzIC1sYSBzcmMvYXBwXCIsIFwid2FpdFwiOiB0cnVlLCBcIm1heF93YWl0X3NlY29uZHNcIjogMzB9IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiSSBzZWUgdGhhdCB5b3UncmUgbG9va2luZyBhdCB0aGUgY3VycmVudCBwYWdlIHN0cnVjdHVyZSBpbiB5b3VyIGBzcmMvYXBwYCBkaXJlY3RvcnkgYW5kIHdhbnQgdG8gYWxpZ24gaXQgd2l0aCB0aGUgZXhwZWN0ZWQgcGFnZXMgZm9yIHlvdXIgU29mdHdhcmUgRW5naW5lZXJpbmcgRmlybSdzIG1hcmtldGluZyBzaXRlLiBMZXQgbWUgaGVscCB5b3Ugb3JnYW5pemUgdGhpcyBzdHJ1Y3R1cmUuXG5cbkZpcnN0LCBsZXQgbWUgY2hlY2sgd2hhdCBwYWdlcyBjdXJyZW50bHkgZXhpc3QgaW4geW91ciBgc3JjL2FwcGAgZGlyZWN0b3J5IHRvIHVuZGVyc3RhbmQgd2hhdCB3ZSdyZSB3b3JraW5nIHdpdGguXG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjowLCJ0ZXh0X25vZGUiOnsiY29udGVudCI6IkBzcmMvYXBwIEFzIHlvdSBjYW4gc2VlIGluIG91ciBmb2xkZXIgd2UgaGF2ZSB0aGUgcGFnZXMgd2hpY2ggZG9uJ3QgcmVhbGx5IGNvaW5jaWRlIHdpdGggb3VyIGFjdHVhbCBleHBlY3RlZCBwYWdlcyBmb3IgdGhlIFNvZnR3YXJlIEVuZ2luZWVyaW5nIEZpcm0ncyBtYXJrZXRpbmcgc2l0ZS4gU28gd2Ugc2hvdWxkIGhhdmUgdGhlIExhbmRpbmcgUGFnZSwgdGhlIEFib3V0IFVzLCBVc2UgQ2FzZXMsIEluZHVzdHJpZXMsIENhc2UgU3R1ZGllcywgQ29udGFjdCBVcywgU29mdHdhcmUgQ2F0YWxvZ3VlLCBUZWNobm9sb2dpZXMsIENvcmUgVmFsdWVzLCB0ZXJtcyBhbmQgY29uZGl0aW9ucywgcHJpdmFjeSBwb2xpY3ksIGxvZ2luLCBzaWdudXAsIGJsb2cifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvb3ZlL0Rvd25sb2Fkcy90YWlsd2luZC1wbHVzLXN0dWRpby9zdHVkaW8tdHMiLCJmb2xkZXJSb290IjoiL1VzZXJzL292ZS9Eb3dubG9hZHMvdGFpbHdpbmQtcGx1cy1zdHVkaW8vc3R1ZGlvLXRzIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwidGltZXN0YW1wIjoiMjAyNS0wNS0xMFQxOTo0NjoyNC4xMTNaIiwicmVzcG9uc2VfdGV4dCI6Ikkgc2VlIHRoYXQgeW91J3JlIGxvb2tpbmcgYXQgdGhlIGN1cnJlbnQgcGFnZSBzdHJ1Y3R1cmUgaW4geW91ciBgc3JjL2FwcGAgZGlyZWN0b3J5IGFuZCB3YW50IHRvIGFsaWduIGl0IHdpdGggdGhlIGV4cGVjdGVkIHBhZ2VzIGZvciB5b3VyIFNvZnR3YXJlIEVuZ2luZWVyaW5nIEZpcm0ncyBtYXJrZXRpbmcgc2l0ZS4gTGV0IG1lIGhlbHAgeW91IG9yZ2FuaXplIHRoaXMgc3RydWN0dXJlLlxuXG5GaXJzdCwgbGV0IG1lIGNoZWNrIHdoYXQgcGFnZXMgY3VycmVudGx5IGV4aXN0IGluIHlvdXIgYHNyYy9hcHBgIGRpcmVjdG9yeSB0byB1bmRlcnN0YW5kIHdoYXQgd2UncmUgd29ya2luZyB3aXRoLlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjhmNTQ0ODM1LWNmZjktNDIxNi04MTM0LTBjMzBmYWNkYmUyZCIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMVZmZWFhZWZlZk53dUZLcm9VUmVmMXAiLCJ0b29sX25hbWUiOiJzdHItcmVwbGFjZS1lZGl0b3IiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcInZpZXdcIiwgXCJwYXRoXCI6IFwic3JjL2FwcC9pbmR1c3RyaWVzL3BhZ2UudHN4XCJ9IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiSSBzZWUgdGhlIGN1cnJlbnQgc3RydWN0dXJlIG9mIHlvdXIgYHNyYy9hcHBgIGRpcmVjdG9yeS4gTGV0IG1lIGFsc28gY2hlY2sgdGhlIGNvbnRlbnQgb2YgdGhlIGluZHVzdHJpZXMgcGFnZSB5b3UgbWVudGlvbmVkIHRvIHVuZGVyc3RhbmQgd2hhdCB3ZSdyZSB3b3JraW5nIHdpdGg6XG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJIZXJlIGFyZSB0aGUgcmVzdWx0cyBmcm9tIGV4ZWN1dGluZyB0aGUgY29tbWFuZC5cbiAgICAgICAgPHJldHVybi1jb2RlPlxuICAgICAgICAwXG4gICAgICAgIDwvcmV0dXJuLWNvZGU+XG4gICAgICAgIDxzdGRvdXQ+XG4gICAgICAgIHRvdGFsIDgwXG5kcnd4ci14ci14QCAxMyBvdmUgIHN0YWZmICAgIDQxNiBNYXkgMTEgMDU6NDUgLlxuZHJ3eHIteHIteEAgMTMgb3ZlICBzdGFmZiAgICA0MTYgTWF5IDExIDAxOjU3IC4uXG4tcnctci0tci0tQCAgMSBvdmUgIHN0YWZmICAgNjE0OCBNYXkgMTEgMDU6NDUgLkRTX1N0b3JlXG5kcnd4ci14ci14QCAgMyBvdmUgIHN0YWZmICAgICA5NiBBcHIgMjggMTU6MTAgYWJvdXRcbmRyd3hyLXhyLXhAICA3IG92ZSAgc3RhZmYgICAgMjI0IEFwciAyOCAxNToxMCBibG9nXG5kcnd4ci14ci14QCAgMyBvdmUgIHN0YWZmICAgICA5NiBNYXkgMTEgMDE6MDYgY29udGFjdFxuLXJ3LXItLXItLUAgIDEgb3ZlICBzdGFmZiAgMTUwODYgQXByIDI4IDE1OjEwIGZhdmljb24uaWNvXG5kcnd4ci14ci14QCAgMyBvdmUgIHN0YWZmICAgICA5NiBNYXkgMTEgMDU6NDUgaW5kdXN0cmllc1xuLXJ3LXItLXItLUAgIDEgb3ZlICBzdGFmZiAgICA1NzMgQXByIDI4IDE1OjEwIGxheW91dC50c3hcbi1ydy1yLS1yLS1AICAxIG92ZSAgc3RhZmYgICAgOTI3IEFwciAyOCAxNToxMCBub3QtZm91bmQudHN4XG4tcnctci0tci0tQCAgMSBvdmUgIHN0YWZmICAgODAyNSBBcHIgMjggMTU6MTAgcGFnZS50c3hcbmRyd3hyLXhyLXhAICAzIG92ZSAgc3RhZmYgICAgIDk2IEFwciAyOCAxNToxMCBwcm9jZXNzXG5kcnd4ci14ci14QCAgNyBvdmUgIHN0YWZmICAgIDIyNCBBcHIgMjggMTU6MTAgd29ya1xuXG4gICAgICAgIDwvc3Rkb3V0PlxuICAgICAgICA8c3RkZXJyPlxuICAgICAgICBcbiAgICAgICAgPC9zdGRlcnI+IiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxNlJIYUo2UkRWVDFGQWRiQWg3dkNyVyJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy9vdmUvRG93bmxvYWRzL3RhaWx3aW5kLXBsdXMtc3R1ZGlvL3N0dWRpby10cyIsImZvbGRlclJvb3QiOiIvVXNlcnMvb3ZlL0Rvd25sb2Fkcy90YWlsd2luZC1wbHVzLXN0dWRpby9zdHVkaW8tdHMifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlLCJjdXJyZW50VGVybWluYWwiOnsidGVybWluYWxJZCI6MiwiY3VycmVudFdvcmtpbmdEaXJlY3RvcnkiOiIvVXNlcnMvb3ZlL0Rvd25sb2Fkcy90YWlsd2luZC1wbHVzLXN0dWRpby9zdHVkaW8tdHMifX19XSwidGltZXN0YW1wIjoiMjAyNS0wNS0xMFQxOTo0NjoyOS40MTBaIiwicmVzcG9uc2VfdGV4dCI6Ikkgc2VlIHRoZSBjdXJyZW50IHN0cnVjdHVyZSBvZiB5b3VyIGBzcmMvYXBwYCBkaXJlY3RvcnkuIExldCBtZSBhbHNvIGNoZWNrIHRoZSBjb250ZW50IG9mIHRoZSBpbmR1c3RyaWVzIHBhZ2UgeW91IG1lbnRpb25lZCB0byB1bmRlcnN0YW5kIHdoYXQgd2UncmUgd29ya2luZyB3aXRoOlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjMzMmNjNjBkLTk2ZDItNDc0Ny1iZjY0LTE5NDM1OTRhNzFmMSIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IkJhc2VkIG9uIHlvdXIgcmVxdWVzdCBhbmQgdGhlIGN1cnJlbnQgc3RydWN0dXJlLCBJJ2xsIGNyZWF0ZSBhIHBsYW4gdG8gYWxpZ24geW91ciBzaXRlJ3MgcGFnZXMgd2l0aCB0aGUgZXhwZWN0ZWQgc3RydWN0dXJlIGZvciBhIFNvZnR3YXJlIEVuZ2luZWVyaW5nIEZpcm0ncyBtYXJrZXRpbmcgc2l0ZS5cblxuIyMgQ3VycmVudCBQYWdlczpcbi0gTGFuZGluZyBQYWdlIChwYWdlLnRzeClcbi0gQWJvdXRcbi0gQmxvZ1xuLSBDb250YWN0XG4tIEluZHVzdHJpZXNcbi0gUHJvY2Vzc1xuLSBXb3JrIChsaWtlbHkgY2FzZSBzdHVkaWVzKVxuXG4jIyBFeHBlY3RlZCBQYWdlczpcbi0gTGFuZGluZyBQYWdlXG4tIEFib3V0IFVzXG4tIFVzZSBDYXNlc1xuLSBJbmR1c3RyaWVzIChhbHJlYWR5IGV4aXN0cylcbi0gQ2FzZSBTdHVkaWVzIChsaWtlbHkgdGhlIFwid29ya1wiIGZvbGRlcilcbi0gQ29udGFjdCBVcyAoYWxyZWFkeSBleGlzdHMgYXMgXCJjb250YWN0XCIpXG4tIFNvZnR3YXJlIENhdGFsb2d1ZVxuLSBUZWNobm9sb2dpZXNcbi0gQ29yZSBWYWx1ZXNcbi0gVGVybXMgYW5kIENvbmRpdGlvbnNcbi0gUHJpdmFjeSBQb2xpY3lcbi0gTG9naW5cbi0gU2lnbnVwXG4tIEJsb2cgKGFscmVhZHkgZXhpc3RzKVxuXG4jIyBEZXRhaWxlZCBQbGFuOlxuXG4xLiAqKlZlcmlmeSBleGlzdGluZyBwYWdlcyBzdHJ1Y3R1cmUgYW5kIGNvbnRlbnQqKlxuMi4gKipDcmVhdGUgbWlzc2luZyBwYWdlczoqKlxuICAgLSBVc2UgQ2FzZXNcbiAgIC0gU29mdHdhcmUgQ2F0YWxvZ3VlXG4gICAtIFRlY2hub2xvZ2llc1xuICAgLSBDb3JlIFZhbHVlc1xuICAgLSBUZXJtcyBhbmQgQ29uZGl0aW9uc1xuICAgLSBQcml2YWN5IFBvbGljeVxuICAgLSBMb2dpblxuICAgLSBTaWdudXBcbjMuICoqRW5zdXJlIGNvbnNpc3RlbnQgc3RydWN0dXJlIGFjcm9zcyBhbGwgcGFnZXMqKlxuXG5MZXQgbWUgb3V0bGluZSB0aGUgc3BlY2lmaWMgZmlsZXMgd2UgbmVlZCB0byBjcmVhdGU6XG5cbi0gYHNyYy9hcHAvdXNlLWNhc2VzL3BhZ2UudHN4YFxuLSBgc3JjL2FwcC9zb2Z0d2FyZS1jYXRhbG9ndWUvcGFnZS50c3hgXG4tIGBzcmMvYXBwL3RlY2hub2xvZ2llcy9wYWdlLnRzeGBcbi0gYHNyYy9hcHAvY29yZS12YWx1ZXMvcGFnZS50c3hgXG4tIGBzcmMvYXBwL3Rlcm1zL3BhZ2UudHN4YFxuLSBgc3JjL2FwcC9wcml2YWN5L3BhZ2UudHN4YFxuLSBgc3JjL2FwcC9sb2dpbi9wYWdlLnRzeGBcbi0gYHNyYy9hcHAvc2lnbnVwL3BhZ2UudHN4YFxuXG5Xb3VsZCB5b3UgbGlrZSBtZSB0byBwcm9jZWVkIHdpdGggY3JlYXRpbmcgdGhlc2UgcGFnZXM/IEkgY2FuIHN0YXJ0IHdpdGggYSB0ZW1wbGF0ZSBmb3IgZWFjaCBwYWdlIGJhc2VkIG9uIHRoZSBzdHJ1Y3R1cmUgSSBzZWUgaW4gdGhlIGluZHVzdHJpZXMgcGFnZSwgYWRhcHRpbmcgaXQgZm9yIGVhY2ggc3BlY2lmaWMgc2VjdGlvbi5cbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IkhlcmUncyB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgYGNhdCAtbmAgb24gc3JjL2FwcC9pbmR1c3RyaWVzL3BhZ2UudHN4OlxuICAgICAxXHRpbXBvcnQgeyB0eXBlIE1ldGFkYXRhIH0gZnJvbSAnbmV4dCdcbiAgICAgMlx0XG4gICAgIDNcdGltcG9ydCB7IENvbnRhY3RTZWN0aW9uIH0gZnJvbSAnQC9jb21wb25lbnRzL0NvbnRhY3RTZWN0aW9uJ1xuICAgICA0XHRpbXBvcnQgeyBDb250YWluZXIgfSBmcm9tICdAL2NvbXBvbmVudHMvQ29udGFpbmVyJ1xuICAgICA1XHRpbXBvcnQgeyBGYWRlSW4sIEZhZGVJblN0YWdnZXIgfSBmcm9tICdAL2NvbXBvbmVudHMvRmFkZUluJ1xuICAgICA2XHRpbXBvcnQgeyBQYWdlSW50cm8gfSBmcm9tICdAL2NvbXBvbmVudHMvUGFnZUludHJvJ1xuICAgICA3XHRpbXBvcnQgeyBCb3JkZXIgfSBmcm9tICdAL2NvbXBvbmVudHMvQm9yZGVyJ1xuICAgICA4XHRcbiAgICAgOVx0ZXhwb3J0IGNvbnN0IG1ldGFkYXRhOiBNZXRhZGF0YSA9IHtcbiAgICAxMFx0ICB0aXRsZTogJ0luZHVzdHJpZXMnLFxuICAgIDExXHQgIGRlc2NyaXB0aW9uOiAnV2UgZGVsaXZlciBzcGVjaWFsaXplZCBzb2x1dGlvbnMgYWNyb3NzIGEgd2lkZSByYW5nZSBvZiBpbmR1c3RyaWVzLicsXG4gICAgMTJcdH1cbiAgICAxM1x0XG4gICAgMTRcdGNvbnN0IGluZHVzdHJpZXMgPSBbXG4gICAgMTVcdCAge1xuICAgIDE2XHQgICAgbmFtZTogJ0hlYWx0aGNhcmUnLFxuICAgIDE3XHQgICAgZGVzY3JpcHRpb246ICdDdXN0b20gc29mdHdhcmUgc29sdXRpb25zIGZvciBoZWFsdGhjYXJlIHByb3ZpZGVycywgaW1wcm92aW5nIHBhdGllbnQgY2FyZSBhbmQgb3BlcmF0aW9uYWwgZWZmaWNpZW5jeS4nLFxuICAgIDE4XHQgICAgaWNvbjogJ/Cfj6UnLFxuICAgIDE5XHQgIH0sXG4gICAgMjBcdCAge1xuICAgIDIxXHQgICAgbmFtZTogJ0ZpbmFuY2UnLFxuICAgIDIyXHQgICAgZGVzY3JpcHRpb246ICdTZWN1cmUsIGNvbXBsaWFudCBhcHBsaWNhdGlvbnMgZm9yIGZpbmFuY2lhbCBpbnN0aXR1dGlvbnMgYW5kIGZpbnRlY2ggY29tcGFuaWVzLicsXG4gICAgMjNcdCAgICBpY29uOiAn8J+SsCcsXG4gICAgMjRcdCAgfSxcbiAgICAyNVx0ICB7XG4gICAgMjZcdCAgICBuYW1lOiAnRS1jb21tZXJjZScsXG4gICAgMjdcdCAgICBkZXNjcmlwdGlvbjogJ1NjYWxhYmxlIHBsYXRmb3JtcyB0aGF0IGRyaXZlIGNvbnZlcnNpb24gYW5kIGVuaGFuY2UgY3VzdG9tZXIgZXhwZXJpZW5jZS4nLFxuICAgIDI4XHQgICAgaWNvbjogJ/Cfm5InLFxuICAgIDI5XHQgIH0sXG4gICAgMzBcdCAge1xuICAgIDMxXHQgICAgbmFtZTogJ01hbnVmYWN0dXJpbmcnLFxuICAgIDMyXHQgICAgZGVzY3JpcHRpb246ICdJb1QgYW5kIGF1dG9tYXRpb24gc29sdXRpb25zIHRoYXQgb3B0aW1pemUgcHJvZHVjdGlvbiBhbmQgc3VwcGx5IGNoYWluIHByb2Nlc3Nlcy4nLFxuICAgIDMzXHQgICAgaWNvbjogJ/Cfj60nLFxuICAgIDM0XHQgIH0sXG4gICAgMzVcdCAge1xuICAgIDM2XHQgICAgbmFtZTogJ0VkdWNhdGlvbicsXG4gICAgMzdcdCAgICBkZXNjcmlwdGlvbjogJ0xlYXJuaW5nIG1hbmFnZW1lbnQgc3lzdGVtcyBhbmQgZWR1Y2F0aW9uYWwgdG9vbHMgdGhhdCB0cmFuc2Zvcm0gaG93IGtub3dsZWRnZSBpcyBzaGFyZWQuJyxcbiAgICAzOFx0ICAgIGljb246ICfwn46TJyxcbiAgICAzOVx0ICB9LFxuICAgIDQwXHQgIHtcbiAgICA0MVx0ICAgIG5hbWU6ICdSZWFsIEVzdGF0ZScsXG4gICAgNDJcdCAgICBkZXNjcmlwdGlvbjogJ1Byb3BlcnR5IG1hbmFnZW1lbnQgYW5kIG1hcmtldHBsYWNlIHNvbHV0aW9ucyBmb3IgdGhlIG1vZGVybiByZWFsIGVzdGF0ZSBpbmR1c3RyeS4nLFxuICAgIDQzXHQgICAgaWNvbjogJ/Cfj6InLFxuICAgIDQ0XHQgIH0sXG4gICAgNDVcdF1cbiAgICA0Nlx0XG4gICAgNDdcdGZ1bmN0aW9uIEluZHVzdHJ5Q2FyZCh7IGluZHVzdHJ5IH0pIHtcbiAgICA0OFx0ICByZXR1cm4gKFxuICAgIDQ5XHQgICAgPEJvcmRlciBjbGFzc05hbWU9XCJwLThcIj5cbiAgICA1MFx0ICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0ZXh0LTR4bCBtYi00XCI+e2luZHVzdHJ5Lmljb259PC9kaXY+XG4gICAgNTFcdCAgICAgIDxoMyBjbGFzc05hbWU9XCJmb250LWRpc3BsYXkgdGV4dC14bCBmb250LXNlbWlib2xkIHRleHQtbmV1dHJhbC05NTBcIj5cbiAgICA1Mlx0ICAgICAgICB7aW5kdXN0cnkubmFtZX1cbiAgICA1M1x0ICAgICAgPC9oMz5cbiAgICA1NFx0ICAgICAgPHAgY2xhc3NOYW1lPVwibXQtNCB0ZXh0LXNtIHRleHQtbmV1dHJhbC02MDBcIj5cbiAgICA1NVx0ICAgICAgICB7aW5kdXN0cnkuZGVzY3JpcHRpb259XG4gICAgNTZcdCAgICAgIDwvcD5cbiAgICA1N1x0ICAgIDwvQm9yZGVyPlxuICAgIDU4XHQgIClcbiAgICA1OVx0fVxuICAgIDYwXHRcbiAgICA2MVx0ZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gSW5kdXN0cmllcygpIHtcbiAgICA2Mlx0ICByZXR1cm4gKFxuICAgIDYzXHQgICAgPD5cbiAgICA2NFx0ICAgICAgPFBhZ2VJbnRybyBleWVicm93PVwiSW5kdXN0cmllc1wiIHRpdGxlPVwiU3BlY2lhbGl6ZWQgc29sdXRpb25zIGZvciBkaXZlcnNlIHNlY3RvcnNcIj5cbiAgICA2NVx0ICAgICAgICA8cD5cbiAgICA2Nlx0ICAgICAgICAgIFdlIGRlbGl2ZXIgdGFpbG9yZWQgc29mdHdhcmUgc29sdXRpb25zIGFjcm9zcyBtdWx0aXBsZSBpbmR1c3RyaWVzLCBjb21iaW5pbmcgZGVlcCBkb21haW4gZXhwZXJ0aXNlIHdpdGggY3V0dGluZy1lZGdlIHRlY2hub2xvZ3kuXG4gICAgNjdcdCAgICAgICAgPC9wPlxuICAgIDY4XHQgICAgICA8L1BhZ2VJbnRybz5cbiAgICA2OVx0XG4gICAgNzBcdCAgICAgIDxDb250YWluZXIgY2xhc3NOYW1lPVwibXQtMjQgc206bXQtMzIgbGc6bXQtNDBcIj5cbiAgICA3MVx0ICAgICAgICA8RmFkZUluU3RhZ2dlciBjbGFzc05hbWU9XCJncmlkIGdyaWQtY29scy0xIGdhcC04IHNtOmdyaWQtY29scy0yIGxnOmdyaWQtY29scy0zXCI+XG4gICAgNzJcdCAgICAgICAgICB7aW5kdXN0cmllcy5tYXAoKGluZHVzdHJ5KSA9PiAoXG4gICAgNzNcdCAgICAgICAgICAgIDxGYWRlSW4ga2V5PXtpbmR1c3RyeS5uYW1lfT5cbiAgICA3NFx0ICAgICAgICAgICAgICA8SW5kdXN0cnlDYXJkIGluZHVzdHJ5PXtpbmR1c3RyeX0gLz5cbiAgICA3NVx0ICAgICAgICAgICAgPC9GYWRlSW4+XG4gICAgNzZcdCAgICAgICAgICApKX1cbiAgICA3N1x0ICAgICAgICA8L0ZhZGVJblN0YWdnZXI+XG4gICAgNzhcdCAgICAgIDwvQ29udGFpbmVyPlxuICAgIDc5XHRcbiAgICA4MFx0ICAgICAgPENvbnRhY3RTZWN0aW9uIC8+XG4gICAgODFcdCAgICA8Lz5cbiAgICA4Mlx0ICApXG4gICAgODNcdH1cblRvdGFsIGxpbmVzIGluIGZpbGU6IDgzXG4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFWZmVhYWVmZWZOd3VGS3JvVVJlZjFwIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL292ZS9Eb3dubG9hZHMvdGFpbHdpbmQtcGx1cy1zdHVkaW8vc3R1ZGlvLXRzIiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy9vdmUvRG93bmxvYWRzL3RhaWx3aW5kLXBsdXMtc3R1ZGlvL3N0dWRpby10cyJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjoyLCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy9vdmUvRG93bmxvYWRzL3RhaWx3aW5kLXBsdXMtc3R1ZGlvL3N0dWRpby10cyJ9fX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA1LTEwVDE5OjQ2OjMzLjEwMloiLCJyZXNwb25zZV90ZXh0IjoiQmFzZWQgb24geW91ciByZXF1ZXN0IGFuZCB0aGUgY3VycmVudCBzdHJ1Y3R1cmUsIEknbGwgY3JlYXRlIGEgcGxhbiB0byBhbGlnbiB5b3VyIHNpdGUncyBwYWdlcyB3aXRoIHRoZSBleHBlY3RlZCBzdHJ1Y3R1cmUgZm9yIGEgU29mdHdhcmUgRW5naW5lZXJpbmcgRmlybSdzIG1hcmtldGluZyBzaXRlLlxuXG4jIyBDdXJyZW50IFBhZ2VzOlxuLSBMYW5kaW5nIFBhZ2UgKHBhZ2UudHN4KVxuLSBBYm91dFxuLSBCbG9nXG4tIENvbnRhY3Rcbi0gSW5kdXN0cmllc1xuLSBQcm9jZXNzXG4tIFdvcmsgKGxpa2VseSBjYXNlIHN0dWRpZXMpXG5cbiMjIEV4cGVjdGVkIFBhZ2VzOlxuLSBMYW5kaW5nIFBhZ2Vcbi0gQWJvdXQgVXNcbi0gVXNlIENhc2VzXG4tIEluZHVzdHJpZXMgKGFscmVhZHkgZXhpc3RzKVxuLSBDYXNlIFN0dWRpZXMgKGxpa2VseSB0aGUgXCJ3b3JrXCIgZm9sZGVyKVxuLSBDb250YWN0IFVzIChhbHJlYWR5IGV4aXN0cyBhcyBcImNvbnRhY3RcIilcbi0gU29mdHdhcmUgQ2F0YWxvZ3VlXG4tIFRlY2hub2xvZ2llc1xuLSBDb3JlIFZhbHVlc1xuLSBUZXJtcyBhbmQgQ29uZGl0aW9uc1xuLSBQcml2YWN5IFBvbGljeVxuLSBMb2dpblxuLSBTaWdudXBcbi0gQmxvZyAoYWxyZWFkeSBleGlzdHMpXG5cbiMjIERldGFpbGVkIFBsYW46XG5cbjEuICoqVmVyaWZ5IGV4aXN0aW5nIHBhZ2VzIHN0cnVjdHVyZSBhbmQgY29udGVudCoqXG4yLiAqKkNyZWF0ZSBtaXNzaW5nIHBhZ2VzOioqXG4gICAtIFVzZSBDYXNlc1xuICAgLSBTb2Z0d2FyZSBDYXRhbG9ndWVcbiAgIC0gVGVjaG5vbG9naWVzXG4gICAtIENvcmUgVmFsdWVzXG4gICAtIFRlcm1zIGFuZCBDb25kaXRpb25zXG4gICAtIFByaXZhY3kgUG9saWN5XG4gICAtIExvZ2luXG4gICAtIFNpZ251cFxuMy4gKipFbnN1cmUgY29uc2lzdGVudCBzdHJ1Y3R1cmUgYWNyb3NzIGFsbCBwYWdlcyoqXG5cbkxldCBtZSBvdXRsaW5lIHRoZSBzcGVjaWZpYyBmaWxlcyB3ZSBuZWVkIHRvIGNyZWF0ZTpcblxuLSBgc3JjL2FwcC91c2UtY2FzZXMvcGFnZS50c3hgXG4tIGBzcmMvYXBwL3NvZnR3YXJlLWNhdGFsb2d1ZS9wYWdlLnRzeGBcbi0gYHNyYy9hcHAvdGVjaG5vbG9naWVzL3BhZ2UudHN4YFxuLSBgc3JjL2FwcC9jb3JlLXZhbHVlcy9wYWdlLnRzeGBcbi0gYHNyYy9hcHAvdGVybXMvcGFnZS50c3hgXG4tIGBzcmMvYXBwL3ByaXZhY3kvcGFnZS50c3hgXG4tIGBzcmMvYXBwL2xvZ2luL3BhZ2UudHN4YFxuLSBgc3JjL2FwcC9zaWdudXAvcGFnZS50c3hgXG5cbldvdWxkIHlvdSBsaWtlIG1lIHRvIHByb2NlZWQgd2l0aCBjcmVhdGluZyB0aGVzZSBwYWdlcz8gSSBjYW4gc3RhcnQgd2l0aCBhIHRlbXBsYXRlIGZvciBlYWNoIHBhZ2UgYmFzZWQgb24gdGhlIHN0cnVjdHVyZSBJIHNlZSBpbiB0aGUgaW5kdXN0cmllcyBwYWdlLCBhZGFwdGluZyBpdCBmb3IgZWFjaCBzcGVjaWZpYyBzZWN0aW9uLlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX1dLCJmZWVkYmFja1N0YXRlcyI6eyJ0ZW1wLWZlLTEwMzI3ZTRmLWM4OTAtNDcwNy1hNzI3LTk3YWRjOGFjNDZlNSI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtMDlkYjNlOGUtYmUxOS00MTAyLWIyNzgtMTE1NzI3YzAwMjA4Ijp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS0wMTBjOTRkYy1jMjZjLTQ1OWUtYTViZC1lOWQ3NTc3MTZmMjUiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9fSwidG9vbFVzZVN0YXRlcyI6eyI5MThjZDRkNy1iZTExLTQ0MzQtOGMwYi1mYWY1YzQ4MTMyOTI7dG9vbHVfdnJ0eF8wMTZSSGFKNlJEVlQxRkFkYkFoN3ZDclciOnsicmVxdWVzdElkIjoiOTE4Y2Q0ZDctYmUxMS00NDM0LThjMGItZmFmNWM0ODEzMjkyIiwidG9vbFVzZUlkIjoidG9vbHVfdnJ0eF8wMTZSSGFKNlJEVlQxRkFkYkFoN3ZDclciLCJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJIZXJlIGFyZSB0aGUgcmVzdWx0cyBmcm9tIGV4ZWN1dGluZyB0aGUgY29tbWFuZC5cbiAgICAgICAgPHJldHVybi1jb2RlPlxuICAgICAgICAwXG4gICAgICAgIDwvcmV0dXJuLWNvZGU+XG4gICAgICAgIDxzdGRvdXQ+XG4gICAgICAgIHRvdGFsIDgwXG5kcnd4ci14ci14QCAxMyBvdmUgIHN0YWZmICAgIDQxNiBNYXkgMTEgMDU6NDUgLlxuZHJ3eHIteHIteEAgMTMgb3ZlICBzdGFmZiAgICA0MTYgTWF5IDExIDAxOjU3IC4uXG4tcnctci0tci0tQCAgMSBvdmUgIHN0YWZmICAgNjE0OCBNYXkgMTEgMDU6NDUgLkRTX1N0b3JlXG5kcnd4ci14ci14QCAgMyBvdmUgIHN0YWZmICAgICA5NiBBcHIgMjggMTU6MTAgYWJvdXRcbmRyd3hyLXhyLXhAICA3IG92ZSAgc3RhZmYgICAgMjI0IEFwciAyOCAxNToxMCBibG9nXG5kcnd4ci14ci14QCAgMyBvdmUgIHN0YWZmICAgICA5NiBNYXkgMTEgMDE6MDYgY29udGFjdFxuLXJ3LXItLXItLUAgIDEgb3ZlICBzdGFmZiAgMTUwODYgQXByIDI4IDE1OjEwIGZhdmljb24uaWNvXG5kcnd4ci14ci14QCAgMyBvdmUgIHN0YWZmICAgICA5NiBNYXkgMTEgMDU6NDUgaW5kdXN0cmllc1xuLXJ3LXItLXItLUAgIDEgb3ZlICBzdGFmZiAgICA1NzMgQXByIDI4IDE1OjEwIGxheW91dC50c3hcbi1ydy1yLS1yLS1AICAxIG92ZSAgc3RhZmYgICAgOTI3IEFwciAyOCAxNToxMCBub3QtZm91bmQudHN4XG4tcnctci0tci0tQCAgMSBvdmUgIHN0YWZmICAgODAyNSBBcHIgMjggMTU6MTAgcGFnZS50c3hcbmRyd3hyLXhyLXhAICAzIG92ZSAgc3RhZmYgICAgIDk2IEFwciAyOCAxNToxMCBwcm9jZXNzXG5kcnd4ci14ci14QCAgNyBvdmUgIHN0YWZmICAgIDIyNCBBcHIgMjggMTU6MTAgd29ya1xuXG4gICAgICAgIDwvc3Rkb3V0PlxuICAgICAgICA8c3RkZXJyPlxuICAgICAgICBcbiAgICAgICAgPC9zdGRlcnI+IiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiOGY1NDQ4MzUtY2ZmOS00MjE2LTgxMzQtMGMzMGZhY2RiZTJkO3Rvb2x1X3ZydHhfMDFWZmVhYWVmZWZOd3VGS3JvVVJlZjFwIjp7InJlcXVlc3RJZCI6IjhmNTQ0ODM1LWNmZjktNDIxNi04MTM0LTBjMzBmYWNkYmUyZCIsInRvb2xVc2VJZCI6InRvb2x1X3ZydHhfMDFWZmVhYWVmZWZOd3VGS3JvVVJlZjFwIiwicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiSGVyZSdzIHRoZSByZXN1bHQgb2YgcnVubmluZyBgY2F0IC1uYCBvbiBzcmMvYXBwL2luZHVzdHJpZXMvcGFnZS50c3g6XG4gICAgIDFcdGltcG9ydCB7IHR5cGUgTWV0YWRhdGEgfSBmcm9tICduZXh0J1xuICAgICAyXHRcbiAgICAgM1x0aW1wb3J0IHsgQ29udGFjdFNlY3Rpb24gfSBmcm9tICdAL2NvbXBvbmVudHMvQ29udGFjdFNlY3Rpb24nXG4gICAgIDRcdGltcG9ydCB7IENvbnRhaW5lciB9IGZyb20gJ0AvY29tcG9uZW50cy9Db250YWluZXInXG4gICAgIDVcdGltcG9ydCB7IEZhZGVJbiwgRmFkZUluU3RhZ2dlciB9IGZyb20gJ0AvY29tcG9uZW50cy9GYWRlSW4nXG4gICAgIDZcdGltcG9ydCB7IFBhZ2VJbnRybyB9IGZyb20gJ0AvY29tcG9uZW50cy9QYWdlSW50cm8nXG4gICAgIDdcdGltcG9ydCB7IEJvcmRlciB9IGZyb20gJ0AvY29tcG9uZW50cy9Cb3JkZXInXG4gICAgIDhcdFxuICAgICA5XHRleHBvcnQgY29uc3QgbWV0YWRhdGE6IE1ldGFkYXRhID0ge1xuICAgIDEwXHQgIHRpdGxlOiAnSW5kdXN0cmllcycsXG4gICAgMTFcdCAgZGVzY3JpcHRpb246ICdXZSBkZWxpdmVyIHNwZWNpYWxpemVkIHNvbHV0aW9ucyBhY3Jvc3MgYSB3aWRlIHJhbmdlIG9mIGluZHVzdHJpZXMuJyxcbiAgICAxMlx0fVxuICAgIDEzXHRcbiAgICAxNFx0Y29uc3QgaW5kdXN0cmllcyA9IFtcbiAgICAxNVx0ICB7XG4gICAgMTZcdCAgICBuYW1lOiAnSGVhbHRoY2FyZScsXG4gICAgMTdcdCAgICBkZXNjcmlwdGlvbjogJ0N1c3RvbSBzb2Z0d2FyZSBzb2x1dGlvbnMgZm9yIGhlYWx0aGNhcmUgcHJvdmlkZXJzLCBpbXByb3ZpbmcgcGF0aWVudCBjYXJlIGFuZCBvcGVyYXRpb25hbCBlZmZpY2llbmN5LicsXG4gICAgMThcdCAgICBpY29uOiAn8J+PpScsXG4gICAgMTlcdCAgfSxcbiAgICAyMFx0ICB7XG4gICAgMjFcdCAgICBuYW1lOiAnRmluYW5jZScsXG4gICAgMjJcdCAgICBkZXNjcmlwdGlvbjogJ1NlY3VyZSwgY29tcGxpYW50IGFwcGxpY2F0aW9ucyBmb3IgZmluYW5jaWFsIGluc3RpdHV0aW9ucyBhbmQgZmludGVjaCBjb21wYW5pZXMuJyxcbiAgICAyM1x0ICAgIGljb246ICfwn5KwJyxcbiAgICAyNFx0ICB9LFxuICAgIDI1XHQgIHtcbiAgICAyNlx0ICAgIG5hbWU6ICdFLWNvbW1lcmNlJyxcbiAgICAyN1x0ICAgIGRlc2NyaXB0aW9uOiAnU2NhbGFibGUgcGxhdGZvcm1zIHRoYXQgZHJpdmUgY29udmVyc2lvbiBhbmQgZW5oYW5jZSBjdXN0b21lciBleHBlcmllbmNlLicsXG4gICAgMjhcdCAgICBpY29uOiAn8J+bkicsXG4gICAgMjlcdCAgfSxcbiAgICAzMFx0ICB7XG4gICAgMzFcdCAgICBuYW1lOiAnTWFudWZhY3R1cmluZycsXG4gICAgMzJcdCAgICBkZXNjcmlwdGlvbjogJ0lvVCBhbmQgYXV0b21hdGlvbiBzb2x1dGlvbnMgdGhhdCBvcHRpbWl6ZSBwcm9kdWN0aW9uIGFuZCBzdXBwbHkgY2hhaW4gcHJvY2Vzc2VzLicsXG4gICAgMzNcdCAgICBpY29uOiAn8J+PrScsXG4gICAgMzRcdCAgfSxcbiAgICAzNVx0ICB7XG4gICAgMzZcdCAgICBuYW1lOiAnRWR1Y2F0aW9uJyxcbiAgICAzN1x0ICAgIGRlc2NyaXB0aW9uOiAnTGVhcm5pbmcgbWFuYWdlbWVudCBzeXN0ZW1zIGFuZCBlZHVjYXRpb25hbCB0b29scyB0aGF0IHRyYW5zZm9ybSBob3cga25vd2xlZGdlIGlzIHNoYXJlZC4nLFxuICAgIDM4XHQgICAgaWNvbjogJ/CfjpMnLFxuICAgIDM5XHQgIH0sXG4gICAgNDBcdCAge1xuICAgIDQxXHQgICAgbmFtZTogJ1JlYWwgRXN0YXRlJyxcbiAgICA0Mlx0ICAgIGRlc2NyaXB0aW9uOiAnUHJvcGVydHkgbWFuYWdlbWVudCBhbmQgbWFya2V0cGxhY2Ugc29sdXRpb25zIGZvciB0aGUgbW9kZXJuIHJlYWwgZXN0YXRlIGluZHVzdHJ5LicsXG4gICAgNDNcdCAgICBpY29uOiAn8J+PoicsXG4gICAgNDRcdCAgfSxcbiAgICA0NVx0XVxuICAgIDQ2XHRcbiAgICA0N1x0ZnVuY3Rpb24gSW5kdXN0cnlDYXJkKHsgaW5kdXN0cnkgfSkge1xuICAgIDQ4XHQgIHJldHVybiAoXG4gICAgNDlcdCAgICA8Qm9yZGVyIGNsYXNzTmFtZT1cInAtOFwiPlxuICAgIDUwXHQgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRleHQtNHhsIG1iLTRcIj57aW5kdXN0cnkuaWNvbn08L2Rpdj5cbiAgICA1MVx0ICAgICAgPGgzIGNsYXNzTmFtZT1cImZvbnQtZGlzcGxheSB0ZXh0LXhsIGZvbnQtc2VtaWJvbGQgdGV4dC1uZXV0cmFsLTk1MFwiPlxuICAgIDUyXHQgICAgICAgIHtpbmR1c3RyeS5uYW1lfVxuICAgIDUzXHQgICAgICA8L2gzPlxuICAgIDU0XHQgICAgICA8cCBjbGFzc05hbWU9XCJtdC00IHRleHQtc20gdGV4dC1uZXV0cmFsLTYwMFwiPlxuICAgIDU1XHQgICAgICAgIHtpbmR1c3RyeS5kZXNjcmlwdGlvbn1cbiAgICA1Nlx0ICAgICAgPC9wPlxuICAgIDU3XHQgICAgPC9Cb3JkZXI+XG4gICAgNThcdCAgKVxuICAgIDU5XHR9XG4gICAgNjBcdFxuICAgIDYxXHRleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBJbmR1c3RyaWVzKCkge1xuICAgIDYyXHQgIHJldHVybiAoXG4gICAgNjNcdCAgICA8PlxuICAgIDY0XHQgICAgICA8UGFnZUludHJvIGV5ZWJyb3c9XCJJbmR1c3RyaWVzXCIgdGl0bGU9XCJTcGVjaWFsaXplZCBzb2x1dGlvbnMgZm9yIGRpdmVyc2Ugc2VjdG9yc1wiPlxuICAgIDY1XHQgICAgICAgIDxwPlxuICAgIDY2XHQgICAgICAgICAgV2UgZGVsaXZlciB0YWlsb3JlZCBzb2Z0d2FyZSBzb2x1dGlvbnMgYWNyb3NzIG11bHRpcGxlIGluZHVzdHJpZXMsIGNvbWJpbmluZyBkZWVwIGRvbWFpbiBleHBlcnRpc2Ugd2l0aCBjdXR0aW5nLWVkZ2UgdGVjaG5vbG9neS5cbiAgICA2N1x0ICAgICAgICA8L3A+XG4gICAgNjhcdCAgICAgIDwvUGFnZUludHJvPlxuICAgIDY5XHRcbiAgICA3MFx0ICAgICAgPENvbnRhaW5lciBjbGFzc05hbWU9XCJtdC0yNCBzbTptdC0zMiBsZzptdC00MFwiPlxuICAgIDcxXHQgICAgICAgIDxGYWRlSW5TdGFnZ2VyIGNsYXNzTmFtZT1cImdyaWQgZ3JpZC1jb2xzLTEgZ2FwLTggc206Z3JpZC1jb2xzLTIgbGc6Z3JpZC1jb2xzLTNcIj5cbiAgICA3Mlx0ICAgICAgICAgIHtpbmR1c3RyaWVzLm1hcCgoaW5kdXN0cnkpID0+IChcbiAgICA3M1x0ICAgICAgICAgICAgPEZhZGVJbiBrZXk9e2luZHVzdHJ5Lm5hbWV9PlxuICAgIDc0XHQgICAgICAgICAgICAgIDxJbmR1c3RyeUNhcmQgaW5kdXN0cnk9e2luZHVzdHJ5fSAvPlxuICAgIDc1XHQgICAgICAgICAgICA8L0ZhZGVJbj5cbiAgICA3Nlx0ICAgICAgICAgICkpfVxuICAgIDc3XHQgICAgICAgIDwvRmFkZUluU3RhZ2dlcj5cbiAgICA3OFx0ICAgICAgPC9Db250YWluZXI+XG4gICAgNzlcdFxuICAgIDgwXHQgICAgICA8Q29udGFjdFNlY3Rpb24gLz5cbiAgICA4MVx0ICAgIDwvPlxuICAgIDgyXHQgIClcbiAgICA4M1x0fVxuVG90YWwgbGluZXMgaW4gZmlsZTogODNcbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX19LCJkcmFmdEV4Y2hhbmdlIjp7InJlcXVlc3RfbWVzc2FnZSI6IiIsInJpY2hfdGV4dF9qc29uX3JlcHIiOnsidHlwZSI6ImRvYyIsImNvbnRlbnQiOlt7InR5cGUiOiJwYXJhZ3JhcGgifV19LCJzdGF0dXMiOiJkcmFmdCJ9LCJyZXF1ZXN0SWRzIjpbXSwiaXNQaW5uZWQiOmZhbHNlLCJpc1NoYXJlYWJsZSI6dHJ1ZSwiZXh0cmFEYXRhIjp7ImlzQWdlbnRDb252ZXJzYXRpb24iOnRydWUsImhhc0RpcnR5RWRpdHMiOmZhbHNlfSwicGVyc29uYVR5cGUiOjB9fSwiYWdlbnRFeGVjdXRpb25Nb2RlIjoibWFudWFsIiwiaXNBZ2VudEVkaXRzQ29sbGFwc2VkIjp0cnVlfQ==" />
      </map>
    </option>
  </component>
</project>